(this.webpackJsonp=this.webpackJsonp||[]).push([[3],{446:function(t,e,i){"use strict";i.r(e);var a=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"editor"},[i("div",{staticClass:"column"},[i("div",{staticClass:"row"},[i("a-select",{staticStyle:{flex:"1 1","min-width":"0"},model:{value:t.model.url,callback:function(e){t.$set(t.model,"url",e)},expression:"model.url"}},t._l(t.models,(function(e){return i("a-select-option",{key:e.path,attrs:{value:e.path}},[t._v("\n                    "+t._s(e.name)+"\n                ")])})),1)],1),t._v(" "),i("model-viewer",{attrs:{"model-url":t.model.url,"rotate-x":t.model.rotateX,"rotate-y":t.model.rotateY,"rotate-z":t.model.rotateZ,zoom:t.model.zoom,width:t.modelViewerSize,height:t.modelViewerSize},on:{"update:rotateX":function(e){return t.$set(t.model,"rotateX",e)},"update:rotate-x":function(e){return t.$set(t.model,"rotateX",e)},"update:rotateY":function(e){return t.$set(t.model,"rotateY",e)},"update:rotate-y":function(e){return t.$set(t.model,"rotateY",e)},"update:rotateZ":function(e){return t.$set(t.model,"rotateZ",e)},"update:rotate-z":function(e){return t.$set(t.model,"rotateZ",e)},"update:zoom":function(e){return t.$set(t.model,"zoom",e)}}},[i("div",{staticClass:"model-position"},[i("div",[t._v("X: "+t._s(t.model.rotateX)+"°")]),t._v(" "),i("div",[t._v("Y: "+t._s(t.model.rotateY)+"°")]),t._v(" "),i("div",[t._v("Z: "+t._s(t.model.rotateZ)+"°")])])]),t._v(" "),i("div",{staticClass:"model-controls"},[i("a-slider",{staticClass:"slider",attrs:{included:!1,min:-180,max:180},model:{value:t.model.rotateZ,callback:function(e){t.$set(t.model,"rotateZ",e)},expression:"model.rotateZ"}}),t._v(" "),i("a-button",{attrs:{size:"small"},on:{click:function(e){t.model.rotateX=t.model.rotateY=t.model.rotateZ=0}}},[t._v("\n                Reset\n            ")])],1),t._v(" "),i("h4",[t._v("Direction Distribution:")]),t._v(" "),i("div",{staticClass:"row"},[i("a-select",{staticStyle:{flex:"1 1","min-width":"0"},model:{value:t.dataDistributionFilterTag,callback:function(e){t.dataDistributionFilterTag=e},expression:"dataDistributionFilterTag"}},t._l(t.tags,(function(e,a){return i("a-select-option",{key:a},[t._v(t._s(a)+" ("+t._s(e)+")")])})),1)],1),t._v(" "),i("data-distribution",{attrs:{width:t.modelViewerSize,height:t.modelViewerSize,data:t.dataWithTag}})],1),t._v(" "),i("div",{staticClass:"column"},[i("div",{staticClass:"row"},[i("a-input",{staticStyle:{width:"140px"},attrs:{placeholder:"Flickr API Key",title:"Flicker API Key"},model:{value:t.search.apiKey,callback:function(e){t.$set(t.search,"apiKey",e)},expression:"search.apiKey"}},[i("a-icon",{attrs:{slot:"prefix",type:"lock"},slot:"prefix"})],1),t._v(" "),i("a-input",{staticStyle:{flex:"1 1"},attrs:{placeholder:"Search Keywords",disabled:!t.search.apiKey},model:{value:t.search.keywords,callback:function(e){t.$set(t.search,"keywords",e)},expression:"search.keywords"}}),t._v(" "),i("a-button-group",[i("a-button",{attrs:{disabled:!(t.search.apiKey&&t.search.keywords&&(t.search.currentIndex>0||t.search.currentPage>1)),icon:"left",title:"Get Prev Image"},on:{click:t.getPrevOne}}),t._v(" "),i("a-button",{attrs:{disabled:!(t.search.apiKey&&t.search.keywords),loading:t.search.loading,title:"Get Next Image"},on:{click:t.getNextOne}},[t._v("\n                    Get One\n                    "),t.search.result.total?[t._v("\n                        ("+t._s(t.currentSearchResultNo)+"/"+t._s(t.search.result.total)+")\n                    ")]:t._e()],2)],1)],1),t._v(" "),i("div",{staticClass:"row"},[i("a-input",{staticStyle:{flex:"1 1","min-width":"0"},attrs:{placeholder:"Image Url"},model:{value:t.clip.imageUrl,callback:function(e){t.$set(t.clip,"imageUrl",e)},expression:"clip.imageUrl"}}),t._v(" "),i("a-button",{attrs:{icon:"check",title:"Save to List",disabled:!(t.clip.imageUrl&&t.clip.tags&&t.clip.tags.length)},on:{click:t.saveRecord}})],1),t._v(" "),i("div",{staticClass:"row"},[i("a-select",{staticStyle:{flex:"1 1","min-width":"0"},attrs:{mode:"tags",placeholder:"Tags"},model:{value:t.clip.tags,callback:function(e){t.$set(t.clip,"tags",e)},expression:"clip.tags"}})],1),t._v(" "),i("div",{staticClass:"row"},[i("image-clip",{staticStyle:{width:"600px",height:"420px"},attrs:{"image-url":t.clip.imageUrl,"image-width":t.clip.width,"image-height":t.clip.height,"clip-left":t.clip.clipLeft,"clip-top":t.clip.clipTop,"clip-size":t.clip.clipSize},on:{"update:imageWidth":function(e){return t.$set(t.clip,"width",e)},"update:image-width":function(e){return t.$set(t.clip,"width",e)},"update:imageHeight":function(e){return t.$set(t.clip,"height",e)},"update:image-height":function(e){return t.$set(t.clip,"height",e)},"update:clipLeft":function(e){return t.$set(t.clip,"clipLeft",e)},"update:clip-left":function(e){return t.$set(t.clip,"clipLeft",e)},"update:clipTop":function(e){return t.$set(t.clip,"clipTop",e)},"update:clip-top":function(e){return t.$set(t.clip,"clipTop",e)},"update:clipSize":function(e){return t.$set(t.clip,"clipSize",e)},"update:clip-size":function(e){return t.$set(t.clip,"clipSize",e)}}})],1)]),t._v(" "),i("div",{staticClass:"column"},[i("div",{staticClass:"row",staticStyle:{width:"240px"}},[i("a-auto-complete",{staticStyle:{flex:"1 1","min-width":"0"},attrs:{"data-source":t.file.files,placeholder:"Filename"},model:{value:t.file.filename,callback:function(e){t.$set(t.file,"filename",e)},expression:"file.filename"}}),t._v(" "),i("a-button",{attrs:{icon:"file",title:"New"},on:{click:t.createNew}}),t._v(" "),i("a-button",{attrs:{icon:"save",title:"Save .json File",disabled:!t.file.filename},on:{click:t.saveJson}})],1),t._v(" "),i("div",{staticClass:"row",staticStyle:{flex:"1 1","min-height":"0"}},[i("thumb-list",{ref:"thumbList",attrs:{images:t.file.data,active:t.file.selectedIndex},on:{select:t.thumbListSelect,remove:t.thumbListRemove}})],1),t._v(" "),i("div",{staticClass:"row"},[i("div",{staticStyle:{flex:"1 1","min-width":"0","text-align":"right"}},[t._v("\n                Total: "+t._s(t.file.data.length)+"\n            ")])]),t._v(" "),i("div",{staticClass:"row"},[i("a-button",{staticStyle:{width:"100%"},attrs:{disabled:t.check.checking},on:{click:t.removeInvalid}},[t.check.checking?[t._v("\n                    "+t._s(t.check.progress)+" / "+t._s(t.check.total)+"\n                ")]:[t._v("\n                    Remove Invalid Images\n                ")]],2)],1)])])};a._withStripped=!0;var s=i(11),o=i(456),l=i.n(o),r=i(535),n=i(448),c=i(459),h=function(){var t=this.$createElement;return(this._self._c||t)("canvas",{ref:"canvas",attrs:{width:this.width,height:this.height}})};h._withStripped=!0;var d=i(457);class u extends(s.a.extend({props:{width:Number,height:Number,data:Array},mounted(){const t=this.$refs.canvas;this.ctx=t.getContext("2d"),this.render()},watch:{data(){this.render()}},methods:{render(){var t;const e=this.ctx;if(!e)return;e.fillStyle="#f2f2f2",e.fillRect(0,0,this.width,this.height);const i=this.width/2,a=this.height/2;e.beginPath(),e.moveTo(0,a),e.lineTo(this.width,a),e.moveTo(i,0),e.lineTo(i,this.height),e.strokeStyle="#999",e.stroke(),e.fillStyle="#000",e.fillText("front",this.width-28,a+3),e.fillText("back",6,a+3),e.fillText("up",i-6,12),e.fillText("down",i-12,this.height-6);const s=this.width/2*.75;null===(t=this.data)||void 0===t||t.forEach(t=>{const o=Object(d.a)(t.rx+180,t.ry+180,t.rz+180);e.beginPath(),e.arc(i+(1-2*Math.abs(o.z))*s,a+o.y*s,1,0,2*Math.PI),e.strokeStyle="#000",e.stroke()})}}})){}var p=u,m=i(104),f=Object(m.a)(p,h,[],!1,null,null,null);f.options.__file="src/components/DataDistribution.vue";var g=f.exports,v=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"image-clip"},[i("div",{staticClass:"side"},[i("div",{staticClass:"small"},[t.imageUrl?i("img",{style:t.smallImageStyle,attrs:{src:t.imageUrl,alt:""}}):t._e()]),t._v(" "),i("div",{staticClass:"slider-wrapper"},[i("span",{staticClass:"prefix"},[t._v("Size")]),t._v(" "),i("a-slider",{staticClass:"slider",attrs:{included:!1,min:0,max:t.imageClipMaxSize},model:{value:t.clipSizeValue,callback:function(e){t.clipSizeValue=e},expression:"clipSizeValue"}})],1)]),t._v(" "),i("div",{ref:"imageClipLarge",staticClass:"main"},[i("div",{staticClass:"large",on:{mousemove:t.imageClipDragMove}},[i("a-spin",{attrs:{spinning:t.loading}},[t.imageUrl?i("div",{staticClass:"image",style:t.imageStyle}):t._e()]),t._v(" "),t.imageUrl?i("div",{staticClass:"image-clip",style:t.imageClipStyle,on:{mousedown:t.imageClipDragStart}}):t._e()],1),t._v(" "),i("div",{staticClass:"slider-wrapper",staticStyle:{width:"100%"}},[i("span",{staticClass:"prefix"},[t._v("Zoom")]),t._v(" "),i("a-slider",{staticClass:"slider",attrs:{included:!1,min:10,max:100},model:{value:t.zoom,callback:function(e){t.zoom=e},expression:"zoom"}})],1)])])};v._withStripped=!0;class b extends(s.a.extend({props:{imageUrl:String,imageWidth:Number,imageHeight:Number,clipLeft:Number,clipTop:Number,clipSize:Number},data:()=>({loading:!1,zoom:1,dragging:!1,dragX:0,dragY:0,clipSizeValue:0}),computed:{imageStyle(){return{background:`url(${this.imageUrl}) 0 0 / 100% 100% no-repeat`,width:this.imageWidth*this.zoom/100+"px",height:this.imageHeight*this.zoom/100+"px"}},imageClipStyle(){return{left:this.clipLeft*this.zoom/100+"px",top:this.clipTop*this.zoom/100+"px",width:this.clipSize*this.zoom/100+"px",height:this.clipSize*this.zoom/100+"px"}},imageClipMaxSize(){return Math.min(this.imageWidth,this.imageHeight)},smallImageStyle(){const t=1/this.clipSize*160;return{position:"absolute",width:this.imageWidth*t+"px",height:this.imageHeight*t+"px",left:-this.clipLeft*t+"px",top:-this.clipTop*t+"px"}}},watch:{imageUrl:{immediate:!0,handler(t){if(!t)return;this.loading=!0;const e=new Image;e.onload=()=>{this.loading=!1;const t=this.$refs.imageClipLarge;this.zoom=Math.min(e.width,e.height,t.clientWidth-18,t.clientHeight-18-32)/e.width*100|0;const i=e.width,a=e.height,s=Math.min(i,a,this.clipSizeValue<1?i:this.clipSizeValue);this.$emit("update:imageWidth",i),this.$emit("update:imageHeight",a),this.$emit("update:clipSize",s)},e.onerror=e.onabort=()=>{this.loading=!1},e.src=t}},clipSize:{immediate:!0,handler(t){this.clipSizeValue=t,this.$emit("update:clipLeft",Math.min(this.clipLeft,this.imageWidth-t)),this.$emit("update:clipTop",Math.min(this.clipTop,this.imageHeight-t))}},clipSizeValue(t){this.$emit("update:clipSize",t)}},mounted(){window.addEventListener("mouseup",this.imageClipDragStop),this.$once("hook:beforeDestroy",()=>{window.removeEventListener("mouseup",this.imageClipDragStop)})},methods:{imageClipDragStart(t){0===t.button&&(this.dragging=!0,this.dragX=t.clientX,this.dragY=t.clientY)},imageClipDragStop(){this.dragging=!1},imageClipDragMove(t){const e=this.dragX,i=this.dragY,a=t.clientX,s=t.clientY;if(this.dragX=a,this.dragY=s,!this.dragging)return;const o=a-e,l=s-i;let r=this.clipLeft,n=this.clipTop;r+=o/(this.zoom/100),r=Math.max(0,Math.min(this.imageWidth-this.clipSize,r)),n+=l/(this.zoom/100),n=Math.max(0,Math.min(this.imageHeight-this.clipSize,n)),this.$emit("update:clipLeft",r),this.$emit("update:clipTop",n)}}})){}var x=b,w=(i(498),Object(m.a)(x,v,[],!1,null,"5c5ef5cb",null));w.options.__file="src/components/ImageClip.vue";var k=w.exports,y=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{ref:"scroll",staticClass:"thumb-list",on:{scroll:t.updateVisibleIndex}},[i("div",{staticClass:"list"},t._l(t.thumbUrls,(function(e,a){return i("div",{staticClass:"thumb",class:{active:t.active===a},on:{click:function(e){return t.select(a)}}},[i("div",{staticClass:"label"},[t._v("#"+t._s(a+1))]),t._v(" "),a>=t.firstVisibleIndex&&a<=t.lastVisibleIndex?i("img",{attrs:{src:e,alt:""}}):t._e(),t._v(" "),i("a-button",{staticClass:"btn-remove",attrs:{icon:"delete",shape:"circle",size:"small"},on:{click:function(e){return e.stopPropagation(),t.remove(a)}}})],1)})),0)])};y._withStripped=!0;var S=i(452);function _(t,e){let i=null,a=void 0;return function s(){null!=a&&clearTimeout(a);const o=Date.now();null!=i&&o-i>=e?(t.apply(this,arguments),i=null):(a=setTimeout(s.bind(this,arguments),e),i=o)}}class z extends(s.a.extend({props:{images:Array,active:Number},data:()=>({firstVisibleIndex:-1,lastVisibleIndex:-1}),computed:{thumbUrls(){return(this.images||[]).map(t=>Object(S.d)(t.url))}},mounted(){this.updateVisibleIndex()},watch:{active(t){this.$nextTick(()=>{if(t>=0&&(t<this.firstVisibleIndex||t>this.lastVisibleIndex)){const e=this.$refs.scroll;e&&(e.scrollTop=124*t)}})}},methods:{updateVisibleIndex:_((function(){if(!this.$refs)return;const t=this.$refs.scroll;t&&(this.firstVisibleIndex=Math.floor(t.scrollTop/124),this.lastVisibleIndex=this.firstVisibleIndex+Math.ceil(t.clientHeight/124))}),50),select(t){this.$emit("select",t)},remove(t){this.$emit("remove",t)}}})){}var C=z,I=(i(500),Object(m.a)(C,y,[],!1,null,"2dd20994",null));I.options.__file="src/components/ThumbList.vue";var $=I.exports;var j=i(458),M=i(502),T=function(t,e,i,a){return new(i||(i=Promise))((function(s,o){function l(t){try{n(a.next(t))}catch(t){o(t)}}function r(t){try{n(a.throw(t))}catch(t){o(t)}}function n(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(l,r)}n((a=a.apply(t,e||[])).next())}))};const L=l.a.create({baseURL:"/server"});const P=new Set;M.default.forEach(t=>{const e=Object(S.c)(t.url);e&&P.add(e)});class O extends(s.a.extend({components:{ModelViewer:c.a,DataDistribution:g,ImageClip:k,ThumbList:$},data:()=>({modelViewerSize:300,models:j.a,data:M.default,model:{url:j.a[0].path,rotateX:0,rotateY:0,rotateZ:0,zoom:10},dataDistributionFilterTag:"",search:{perPage:100,apiKey:"",keywords:"",loading:!1,result:{page:0,pages:0,perPage:0,total:0,photos:[]},actualIndex:-1,currentPage:1,currentIndex:-1,lastKeywords:""},clip:{imageUrl:"",tags:[],width:0,height:0,clipLeft:0,clipTop:0,clipSize:0},file:{files:[],filename:"",data:[],selectedIndex:-1},check:{checking:!1,progress:0,total:0}}),watch:{"search.apiKey"(t){localStorage.setItem("flicker-api-key",t)},"file.filename"(t){return T(this,void 0,void 0,(function*(){this.file.files.includes(t)&&(this.file.data=yield function(t){return T(this,void 0,void 0,(function*(){return(yield L.get("/data",{params:{name:t+".json"}})).data}))}(t),this.file.selectedIndex=-1,this.clip.tags=[])}))},"clip.imageUrl"(t){const e=Object(S.c)(t);e&&this.thumbListSelect(this.file.data.findIndex(t=>Object(S.c)(t.url)===e))}},computed:{tags(){const t={};return this.data.forEach(e=>e.tags.forEach(e=>{t[e]=(t[e]||0)+1})),t},dataWithTag(){return this.data.filter(t=>t.tags.includes(this.dataDistributionFilterTag))},currentSearchResultNo(){return(Math.max(1,this.search.result.page)-1)*this.search.perPage+this.search.actualIndex+1}},mounted(){return T(this,void 0,void 0,(function*(){this.search.apiKey=localStorage.getItem("flicker-api-key")||"",this.file.files=(yield function(){return T(this,void 0,void 0,(function*(){return(yield L.get("/dataList")).data}))}()).map(t=>t.slice(0,t.lastIndexOf(".json")))}))},methods:{searchFlickr(){return T(this,void 0,void 0,(function*(){try{this.search.loading=!0,this.search.result=yield Object(S.a)(this.search.apiKey,this.search.keywords,this.search.perPage,this.search.currentPage),this.search.lastKeywords=this.search.keywords,this.search.actualIndex=this.search.currentIndex}finally{this.search.loading=!1}}))},moveSearchWindow(t){return T(this,void 0,void 0,(function*(){if(this.search.lastKeywords!==this.search.keywords)return this.search.currentPage=1,this.search.currentIndex=0,yield this.searchFlickr(),!0;let e=this.search.currentPage;if(t<0)t=this.search.perPage-1,e-=1;else{if(!(t>=this.search.result.perPage))return this.search.actualIndex=this.search.currentIndex=t,!0;t=0,e+=1}return!(e<0||e>this.search.result.pages)&&(this.search.currentIndex=t,this.search.currentPage=e,yield this.searchFlickr(),!0)}))},getOne(t){var e;return T(this,void 0,void 0,(function*(){for(;yield this.moveSearchWindow(this.search.currentIndex+t);){const t=(null===(e=this.search.result.photos[this.search.currentIndex])||void 0===e?void 0:e.large)||"",i=Object(S.c)(t);if(!i||!P.has(i)){this.clip.imageUrl=t;break}if(!i)break}}))},getPrevOne(){return this.getOne(-1)},getNextOne(){return this.getOne(1)},saveRecord(){const t=this.clip.imageUrl,e=Object(S.c)(t);let i=e&&this.file.data.find(t=>Object(S.c)(t.url)===e)||null;i||(i={rx:0,ry:0,rz:0,url:"",cx:0,cy:0,cs:0,w:0,h:0,tags:[]},this.file.data.push(i)),i.url=this.clip.imageUrl,i.tags=[...this.clip.tags],i.w=this.clip.width,i.h=this.clip.height,i.cx=this.clip.clipLeft,i.cy=this.clip.clipTop,i.cs=this.clip.clipSize,i.rx=this.model.rotateX,i.ry=this.model.rotateY,i.rz=this.model.rotateZ,this.file.selectedIndex=this.file.data.indexOf(i)},thumbListSelect(t){this.file.selectedIndex=t;const e=this.file.data[t];e&&(this.clip.imageUrl=e.url,this.clip.tags=[...e.tags],this.clip.width=e.w,this.clip.height=e.h,this.clip.clipLeft=e.cx,this.clip.clipTop=e.cy,this.clip.clipSize=e.cs,this.model.rotateX=e.rx,this.model.rotateY=e.ry,this.model.rotateZ=e.rz)},thumbListRemove(t){r.a.confirm({title:"Are you sure you want to delete?",onOk:()=>{this.file.data.splice(t,1),this.file.selectedIndex===t&&(this.file.selectedIndex=-1)}})},createNew(){this.file.data.length&&r.a.confirm({title:"Are you sure you want to create a new list?",onOk:()=>{this.file.selectedIndex=-1,this.file.data=[],this.clip.tags=[],this.file.files.includes(this.file.filename)&&(this.file.filename="")}})},saveJson(){return T(this,void 0,void 0,(function*(){yield function(t,e){return T(this,void 0,void 0,(function*(){yield L.post("/data",JSON.stringify(e),{params:{name:t+".json"},headers:{"Content-Type":"text/plain"}})}))}(this.file.filename,this.file.data),n.a.success("Saved.")}))},removeInvalid(){return T(this,void 0,void 0,(function*(){const t=[];if(this.check.progress=0,this.check.total=this.file.data.length,this.check.total<1)return;this.check.checking=!0;const e=this.file.data.map(e=>T(this,void 0,void 0,(function*(){var i;(yield(i=e.url,new Promise((function(t,e){const a=new Image;a.onload=function(){t(!0)},a.onerror=a.onabort=function(){t(!1)},a.src=i}))))||t.push(e),this.check.progress+=1,this.check.progress===this.check.total&&(this.check.checking=!1)})));yield Promise.all(e),t.length&&(this.file.data=this.file.data.filter(e=>!t.includes(e))),n.a.success(t.length+" removed.")}))}}})){}var Y=O,X=(i(533),Object(m.a)(Y,a,[],!1,null,"7ef494b2",null));X.options.__file="src/views/Editor.vue";e.default=X.exports},451:function(t,e,i){var a=i(455);"string"==typeof a&&(a=[[t.i,a,""]]),a.locals&&(t.exports=a.locals);(0,i(450).default)("635b7542",a,!1,{})},452:function(t,e,i){"use strict";i.d(e,"a",(function(){return n})),i.d(e,"c",(function(){return c})),i.d(e,"d",(function(){return h})),i.d(e,"b",(function(){return d}));var a=i(456),s=i.n(a),o=function(t,e,i,a){return new(i||(i=Promise))((function(s,o){function l(t){try{n(a.next(t))}catch(t){o(t)}}function r(t){try{n(a.throw(t))}catch(t){o(t)}}function n(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(l,r)}n((a=a.apply(t,e||[])).next())}))};function l(t,e,i,a){return`https://farm${t}.static.flickr.com/${e}/${i}_${a}`}function r(t){const e=t.match(/farm([0-9]+)\.static\.flickr\.com\/([0-9]+)\/([0-9]+)_([0-9a-z]+)/);return e?{farm:Number(e[1]),server:e[2],id:e[3],secret:e[4]}:null}function n(t,e,i,a){return o(this,void 0,void 0,(function*(){const o="https://api.flickr.com/services/rest/?"+new URLSearchParams({method:"flickr.photos.search",api_key:t,format:"json",nojsoncallback:"1",license:"2,3,4,5,6,9",privacy_filter:"1",content_type:"1",text:e,sort:"relevance",per_page:Math.max(1,Math.min(500,i))+"",page:a+""}).toString(),r=(yield s.a.create().get(o)).data;if("ok"!==r.stat)throw new Error("Request failed");const n=r.photos.photo;return{page:r.photos.page,pages:r.photos.pages,perPage:r.photos.perpage,total:Number(r.photos.total),photos:n.map(t=>{const e=l(t.farm,t.server,t.id,t.secret);return{id:t.id,thumb:e+"_t.jpg",medium:e+".jpg",large:e+"_b.jpg"}})}}))}function c(t){const e=r(t);return e&&e.id}function h(t){const e=r(t);return e?l(e.farm,e.server,e.id,e.secret)+"_t.jpg":t}function d(t){const e=r(t);return e?"https://www.flickr.com/photo.gne?id="+e.id:null}},454:function(t,e,i){"use strict";i(451)},455:function(t,e,i){(e=i(21)(!1)).push([t.i,".model-viewer[data-v-4ef7cf1b]{position:relative}.model-viewer canvas[data-v-4ef7cf1b]{cursor:grab}\n",""]),t.exports=e},457:function(t,e,i){"use strict";i.d(e,"a",(function(){return s})),i.d(e,"b",(function(){return o}));const a=1/180*Math.PI;function s(t,e,i){return function(t,e,i){const a=Math.cos(.5*t),s=Math.sin(.5*t),o=Math.cos(.5*e),l=Math.sin(.5*e),r=Math.cos(.5*i),n=Math.sin(.5*i);return{x:a*o*r+s*l*n,y:a*o*n-s*l*r,z:s*o*n+a*l*r,w:s*o*r-a*l*n}}(i*a,e*a,t*a)}function o(t,e){const i=t.x*e.x+t.y*e.y+t.z*e.z+t.w*e.w;return 1-i*i}},458:function(t,e,i){"use strict";e.a=[{name:"Wolf Skull (for canis)",path:"./static/models/wolf-skull.obj",origin:"https://sketchfab.com/osuecampus"},{name:"Hyena Skull",path:"./static/models/hyena-skull.obj",origin:"https://www.myminifactory.com/users/Digimorph"},{name:"Lion Skull (for big cats)",path:"./static/models/lion-skull.obj",origin:"https://sketchfab.com/aucklandmuseum"},{name:"Cat Skull (for small cats)",path:"./static/models/cat-skull.obj",origin:"https://sketchfab.com/openededinburgh"},{name:"Bear Skull",path:"./static/models/bear-skull.obj",origin:"https://sketchfab.com/geoffreymarchal"},{name:"Raccoon Skull",path:"./static/models/raccoon-skull.obj",origin:"https://sketchfab.com/3d-models/raccoon-skull-4bec9f17661542269bfe2f66ebe42361"},{name:"Skunk Skull",path:"./static/models/skunk-skull.obj",origin:"https://sketchfab.com/3d-models/skunk-skull-c82f5ecc8b5445828619cc6e8aea7457"},{name:"River Otter Skull",path:"./static/models/river-otter-skull.obj",origin:"https://sketchfab.com/3d-models/river-otter-skull-c17e2cd117714da7a3592c1f13ec64ac"},{name:"Opossum Skull",path:"./static/models/opossum-skull.obj",origin:"https://www.thingiverse.com/Spfaff1994/designs"},{name:"Kangaroo Skull",path:"./static/models/kangaroo-skull.obj",origin:"https://sketchfab.com/3d-models/kangaroowallaby-skull-62a3f3fc37064f8cb0eb839f7d03e70f"},{name:"Horse Skull",path:"./static/models/horse-skull.obj",origin:"https://sketchfab.com/openededinburgh"},{name:"Cow Skull",path:"./static/models/cow-skull.obj",origin:"https://sketchfab.com/bencva"},{name:"Sheep Skull",path:"./static/models/sheep-skull.obj",origin:"https://sketchfab.com/victorzug"},{name:"Mule Deer Skull",path:"./static/models/mule-deer-skull.obj",origin:"https://sketchfab.com/uviclib"},{name:"Elephant Skull",path:"./static/models/elephant-skull.obj",origin:"https://sketchfab.com/3d-models/african-forest-elephant-for-mobile-devices-320fd7ff1d7e450189333dc270cf12ae"},{name:"Pig Skull",path:"./static/models/pig-skull.obj",origin:"https://sketchfab.com/geoffreymarchal"},{name:"Rat Skull",path:"./static/models/rat-skull.obj",origin:"https://www.thingiverse.com/scienceminer/about"},{name:"Rabbit Skull",path:"./static/models/rabbit-skull.obj",origin:"https://sketchfab.com/agancz"},{name:"Bat Skull",path:"./static/models/bat-skull.obj",origin:"https://sketchfab.com/uod_museums"},{name:"Chicken Skull (for birds)",path:"./static/models/chicken-skull.obj",origin:"https://sketchfab.com/misterdevious"},{name:"Crocodile Skull",path:"./static/models/crocodile-skull.obj",origin:"https://cults3d.com/en/users/MadScientist3D/creations"},{name:"Alligator Skull",path:"./static/models/alligator-skull.obj",origin:"https://sketchfab.com/neometrixtech"},{name:"Iguana Skull (for lizards)",path:"./static/models/iguana-skull.obj",origin:"https://sketchfab.com/3d-models/green-iguana-skull-ouvc-10677-1427f887e0fd41eb9c9c97e07c3610e3"},{name:"Frog Skull",path:"./static/models/frog-skull.obj",origin:"https://sketchfab.com/3d-models/frog-skull-9c491d45c73e49df8cd4277d3dc44ade"},{name:"Python Skull",path:"./static/models/python-skull.obj",origin:"https://www.tinkercad.com/things/aTogRekErps-python-skull-for-dr-close"},{name:"Dolphin Skull",path:"./static/models/dolphin-skull.obj",origin:"https://sketchfab.com/geoffreymarchal"},{name:"Human Skull",path:"./static/models/human-skull.obj",origin:"https://sketchfab.com/martinjario"}]},459:function(t,e,i){"use strict";var a=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("a-spin",{staticClass:"model-viewer",style:{width:t.width+"px",height:t.height+"px"},attrs:{spinning:t.loading}},[i("canvas",{ref:"canvas",attrs:{width:t.width,height:t.height},on:{contextmenu:function(t){t.preventDefault()},mousedown:t.dragStart,mousemove:t.dragMove,mousewheel:t.mouseWheel,"&touchstart":function(e){return t.dragStart(e)},"&touchmove":function(e){return t.dragMove(e)}}}),t._v(" "),t._t("default")],2)};a._withStripped=!0;var s=i(11),o=i(453),l=i(460),r=function(t,e,i,a){return new(i||(i=Promise))((function(s,o){function l(t){try{n(a.next(t))}catch(t){o(t)}}function r(t){try{n(a.throw(t))}catch(t){o(t)}}function n(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(l,r)}n((a=a.apply(t,e||[])).next())}))};const n=1/180*Math.PI;class c extends(s.a.extend({props:{width:{type:Number,default:420},height:{type:Number,default:420},preferSize:{type:Number,default:6.5},zoom:{type:Number},rotateX:{type:Number},rotateY:{type:Number},rotateZ:{type:Number},clearColor:{type:Number,default:15921906},modelUrl:String},watch:{modelUrl(){this.loadModel()},rotateX(t){const e=this.model;e&&(e.rotation.x=t*n)},rotateY(t){const e=this.model;e&&(e.rotation.y=t*n)},rotateZ(t){const e=this.model;e&&(e.rotation.z=t*n)},zoom(t){const e=this.camera;e&&(e.position.z=20-t)}},data:()=>({loading:!1,dragging:!1,dragStartX:0,dragStartY:0}),mounted(){(this.renderer=new o.s({canvas:this.$refs.canvas})).setClearColor(this.clearColor);const t=this.scene=new o.q,e=this.camera=new o.n(45,this.width/this.height);e.position.set(0,0,20-this.zoom),e.lookAt(new o.r(0,0,0)),t.add(e);const i=new o.c(16777215);i.position.set(0,5,5),t.add(i);const a=setInterval(this.render,40);window.addEventListener("mouseup",this.dragStop),window.addEventListener("touchend",this.dragStop),this.$on("hook:beforeDestroy",()=>{clearInterval(a),window.removeEventListener("mouseup",this.dragStop),window.removeEventListener("touchend",this.dragStop)}),this.loader=new l.a,this.modelUrl&&this.loadModel()},methods:{loadOBJ(t){const e=this;return new Promise((i,a)=>{if(!e.loader)throw new Error("Not initialized");e.loader.load(t,i,void 0,a)})},loadModel(){return r(this,void 0,void 0,(function*(){try{this.loading=!0;const t=yield this.loadOBJ(this.modelUrl),e=this;e.model&&(e.scene.remove(e.model),e.model=void 0),t.traverse(t=>{if(t instanceof o.l){const e=t.material;e instanceof o.k?e.side=o.d:e.forEach(t=>{t.side=o.d})}});const i=t.children[0],a=(new o.a).setFromObject(t),s=new o.r;a.getCenter(s),i.position.set(-s.x,-s.y,-s.z);const l=new o.r;a.getSize(l);const r=this.preferSize/Math.max(l.x,l.y,l.z);i.scale.set(r,r,r),t.rotation.set(this.rotateX*n,this.rotateY*n,this.rotateZ*n),e.model=t,e.scene.add(t)}finally{this.loading=!1}}))},render(){this.renderer.render(this.scene,this.camera)},dragStart(t){this.dragging=!0,this.dragStartX=t.clientX||t.touches&&t.touches[0].clientX,this.dragStartY=t.clientY||t.touches&&t.touches[0].clientY},dragStop(){this.dragging=!1},dragMove(t){if(!this.dragging)return;const e=this.dragStartX,i=this.dragStartY,a=t.clientX||t.touches&&t.touches[0].clientX,s=t.clientY||t.touches&&t.touches[0].clientY,o=a-e,l=s-i;let r=this.rotateX,n=this.rotateY;this.dragStartX=a,this.dragStartY=s,r+=l,r<-180?r+=360:r>180&&(r-=360),n+=o,n<-180?n+=360:n>180&&(n-=360),this.$emit("update:rotateX",0|r),this.$emit("update:rotateY",0|n)},mouseWheel(t){const e=Math.max(-1,Math.min(1,-t.deltaY));this.$emit("update:zoom",Math.min(20,Math.max(0,this.zoom-e)))}}})){}var h=c,d=(i(454),i(104)),u=Object(d.a)(h,a,[],!1,null,"4ef7cf1b",null);u.options.__file="src/components/ModelViewer.vue";e.a=u.exports},472:function(t,e,i){var a=i(499);"string"==typeof a&&(a=[[t.i,a,""]]),a.locals&&(t.exports=a.locals);(0,i(450).default)("1d391c50",a,!1,{})},473:function(t,e,i){var a=i(501);"string"==typeof a&&(a=[[t.i,a,""]]),a.locals&&(t.exports=a.locals);(0,i(450).default)("ee6a3560",a,!1,{})},474:function(t,e,i){var a=i(534);"string"==typeof a&&(a=[[t.i,a,""]]),a.locals&&(t.exports=a.locals);(0,i(450).default)("b29f8f06",a,!1,{})},498:function(t,e,i){"use strict";i(472)},499:function(t,e,i){(e=i(21)(!1)).push([t.i,".image-clip[data-v-5c5ef5cb]{display:flex;align-items:flex-start}.image-clip .slider-wrapper[data-v-5c5ef5cb]{display:flex;line-height:36px}.image-clip .slider-wrapper .prefix[data-v-5c5ef5cb],.image-clip .slider-wrapper .postfix[data-v-5c5ef5cb]{display:inline-block;vertical-align:middle;min-width:2.5em;text-align:center}.image-clip .slider-wrapper .slider[data-v-5c5ef5cb]{flex:1;vertical-align:middle}.image-clip .side[data-v-5c5ef5cb]{flex:0 0 160px}.image-clip .side .small[data-v-5c5ef5cb]{position:relative;width:160px;height:160px;background-color:#f2f2f2;overflow:hidden}.image-clip .main[data-v-5c5ef5cb]{flex:1 1;display:flex;align-items:flex-start;flex-direction:column;height:100%;margin-left:10px;min-width:0}.image-clip .main .large[data-v-5c5ef5cb]{flex:1 0;position:relative;width:100%;height:100%;background-color:#f2f2f2;overflow:auto}.image-clip .main .large .image-clip[data-v-5c5ef5cb]{position:absolute;z-index:1;box-sizing:border-box;border:solid 1px #409EFF;background-color:rgba(64,158,255,0.25);cursor:move}.image-clip .main[data-v-5c5ef5cb] .ant-spin-nested-loading{width:100%;height:100%}\n",""]),t.exports=e},500:function(t,e,i){"use strict";i(473)},501:function(t,e,i){(e=i(21)(!1)).push([t.i,".thumb-list[data-v-2dd20994]{width:100%;box-sizing:border-box;padding-right:8px;overflow-y:scroll}.thumb-list .list[data-v-2dd20994]{width:100%;margin:0 auto}.thumb-list .list .thumb[data-v-2dd20994]{display:flex;align-items:center;justify-content:center;position:relative;width:100%;height:116px;box-sizing:border-box;margin-bottom:8px;background:#f2f2f2;cursor:pointer;transition:background-color .3s}.thumb-list .list .thumb.active[data-v-2dd20994]{background-color:#69b7ff}.thumb-list .list .thumb img[data-v-2dd20994]{max-width:100px;max-height:100px}.thumb-list .list .thumb .label[data-v-2dd20994]{position:absolute;z-index:2;left:4px;top:4px;pointer-events:none;user-select:none}.thumb-list .list .thumb .btn-remove[data-v-2dd20994]{position:absolute;z-index:2;top:4px;right:4px;border-color:transparent;opacity:0;transition:all .3s}.thumb-list .list .thumb:hover .btn-remove[data-v-2dd20994]{opacity:1}\n",""]),t.exports=e},533:function(t,e,i){"use strict";i(474)},534:function(t,e,i){(e=i(21)(!1)).push([t.i,".editor[data-v-7ef494b2]{display:flex;width:100%;height:100%;box-sizing:border-box;padding:10px}.editor>.column[data-v-7ef494b2]{display:flex;flex-direction:column}.editor>.column[data-v-7ef494b2]:not(:last-child){margin-right:10px}.editor>.column .row[data-v-7ef494b2]{display:flex;width:100%}.editor>.column .row[data-v-7ef494b2]:not(:last-child){margin-bottom:.5em}.editor>.column .row>*[data-v-7ef494b2]:not(:last-child){min-width:0;margin-right:.5em}.editor .model-viewer .model-position[data-v-7ef494b2]{position:absolute;left:8px;top:8px;user-select:none;pointer-events:none;font-size:12px}.editor .model-controls[data-v-7ef494b2]{display:flex;align-items:center}.editor .model-controls .slider[data-v-7ef494b2]{flex:1 1;min-width:0}.editor .image-clip[data-v-7ef494b2]{width:100%}\n",""]),t.exports=e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,