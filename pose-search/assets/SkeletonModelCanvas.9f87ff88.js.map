{"version":3,"file":"SkeletonModelCanvas.9f87ff88.js","sources":["../../node_modules/@vicons/antd/es/InfoCircleOutlined.js","../../node_modules/@vicons/antd/es/UndoOutlined.js","../../src/config.ts","../../src/components/SkeletonModelCanvas/model/BodyPart.ts","../../node_modules/gl-matrix/esm/common.js","../../node_modules/gl-matrix/esm/mat3.js","../../node_modules/gl-matrix/esm/mat4.js","../../node_modules/gl-matrix/esm/vec3.js","../../node_modules/gl-matrix/esm/vec4.js","../../node_modules/gl-matrix/esm/quat.js","../../src/utils/math/math.ts","../../src/components/SkeletonModelCanvas/ObjLoader.ts","../../src/utils/render/Geometry.ts","../../src/components/SkeletonModelCanvas/model/SkeletonModelNode.ts","../../src/components/SkeletonModelCanvas/model/SkeletonModel.ts","../../src/utils/math/raycast.ts","../../src/utils/input/mouse-drag.ts","../../src/utils/render/camera/OrthographicCamera.ts","../../src/utils/render/camera/PerspectiveCamera.ts","../../src/utils/DraggableCamera.ts","../../src/utils/input/MouseButton.ts","../../src/utils/input/Input.ts","../../src/utils/math/intersect.ts","../../src/utils/render/constants.ts","../../src/utils/render/FrameBuffer.ts","../../src/utils/render/Texture.ts","../../src/utils/render/get-uniform-setter.ts","../../src/utils/render/Shader.ts","../../src/utils/render/Renderer.ts","../../src/components/SkeletonModelCanvas/draw-shape.ts","../../src/components/SkeletonModelCanvas/landmarks-to-transforms.ts","../../src/components/SkeletonModelCanvas/SkeletonModelCanvas.ts?vue&type=script&src&lang.ts"],"sourcesContent":["import { createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, defineComponent } from 'vue'\nconst _hoisted_1 = {\n  xmlns: 'http://www.w3.org/2000/svg',\n  'xmlns:xlink': 'http://www.w3.org/1999/xlink',\n  viewBox: '0 0 1024 1024'\n}\nconst _hoisted_2 = /*#__PURE__*/ _createVNode(\n  'path',\n  {\n    d: 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448s448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372s372 166.6 372 372s-166.6 372-372 372z',\n    fill: 'currentColor'\n  },\n  null,\n  -1\n  /* HOISTED */\n)\nconst _hoisted_3 = /*#__PURE__*/ _createVNode(\n  'path',\n  {\n    d: 'M464 336a48 48 0 1 0 96 0a48 48 0 1 0-96 0zm72 112h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V456c0-4.4-3.6-8-8-8z',\n    fill: 'currentColor'\n  },\n  null,\n  -1\n  /* HOISTED */\n)\nexport default defineComponent({\n  name: 'InfoCircleOutlined',\n  render: function render(_ctx, _cache) {\n    return _openBlock(), _createBlock('svg', _hoisted_1, [_hoisted_2, _hoisted_3])\n  }\n})\n","import { createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, defineComponent } from 'vue'\nconst _hoisted_1 = {\n  xmlns: 'http://www.w3.org/2000/svg',\n  'xmlns:xlink': 'http://www.w3.org/1999/xlink',\n  viewBox: '0 0 1024 1024'\n}\nconst _hoisted_2 = /*#__PURE__*/ _createVNode(\n  'path',\n  {\n    d: 'M511.4 124C290.5 124.3 112 303 112 523.9c0 128 60.2 242 153.8 315.2l-37.5 48c-4.1 5.3-.3 13 6.3 12.9l167-.8c5.2 0 9-4.9 7.7-9.9L369.8 727a8 8 0 0 0-14.1-3L315 776.1c-10.2-8-20-16.7-29.3-26a318.64 318.64 0 0 1-68.6-101.7C200.4 609 192 567.1 192 523.9s8.4-85.1 25.1-124.5c16.1-38.1 39.2-72.3 68.6-101.7c29.4-29.4 63.6-52.5 101.7-68.6C426.9 212.4 468.8 204 512 204s85.1 8.4 124.5 25.1c38.1 16.1 72.3 39.2 101.7 68.6c29.4 29.4 52.5 63.6 68.6 101.7c16.7 39.4 25.1 81.3 25.1 124.5s-8.4 85.1-25.1 124.5a318.64 318.64 0 0 1-68.6 101.7c-7.5 7.5-15.3 14.5-23.4 21.2a7.93 7.93 0 0 0-1.2 11.1l39.4 50.5c2.8 3.5 7.9 4.1 11.4 1.3C854.5 760.8 912 649.1 912 523.9c0-221.1-179.4-400.2-400.6-399.9z',\n    fill: 'currentColor'\n  },\n  null,\n  -1\n  /* HOISTED */\n)\nexport default defineComponent({\n  name: 'UndoOutlined',\n  render: function render(_ctx, _cache) {\n    return _openBlock(), _createBlock('svg', _hoisted_1, [_hoisted_2])\n  }\n})\n","export const APP_NAME = 'pose-search';\r\nexport const LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD = 0.6;\r\nexport const MAX_NUM_OF_SEARCH_RESULTS = 100;","export enum BodyPart {\r\n    trunk = 'trunk',\r\n    head = 'head',\r\n    leftUpperArm = 'leftUpperArm',\r\n    leftLowerArm = 'leftLowerArm',\r\n    leftHand = 'leftHand',\r\n    leftThigh = 'leftThigh',\r\n    leftCalf = 'leftCalf',\r\n    leftFoot = 'leftFoot',\r\n    rightUpperArm = 'rightUpperArm',\r\n    rightLowerArm = 'rightLowerArm',\r\n    rightHand = 'rightHand',\r\n    rightThigh = 'rightThigh',\r\n    rightCalf = 'rightCalf',\r\n    rightFoot = 'rightFoot',\r\n}","/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\n * Returns a string representation of a quatenion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var clone = vec4.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var fromValues = vec4.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\n\nexport var copy = vec4.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\n\nexport var set = vec4.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\n\nexport var add = vec4.add;\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\n\nexport var scale = vec4.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = vec4.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\n\nexport var lerp = vec4.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport var length = vec4.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\n\nexport var normalize = vec4.normalize;\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat} a The first vector.\n * @param {ReadonlyQuat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var equals = vec4.equals;\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import {mat3, mat4, quat, ReadonlyMat4, ReadonlyVec3, vec3} from 'gl-matrix';\r\n\r\nexport function getVertical(out: vec3, vec: ReadonlyVec3) {\r\n    if (Math.abs(vec[0]) > Math.abs(vec[2])) {\r\n        out[0] = -vec[1];\r\n        out[1] = vec[0];\r\n        out[2] = 0;\r\n    } else {\r\n        out[0] = 0;\r\n        out[1] = -vec[2];\r\n        out[2] = vec[1];\r\n    }\r\n}\r\n\r\nexport const getVerticalInDir = (function () {\r\n    const tmp_vec = vec3.create();\r\n    const ZERO = vec3.fromValues(0, 0, 0);\r\n    return function (out: vec3, vec: ReadonlyVec3, dir: ReadonlyVec3) {\r\n        vec3.cross(tmp_vec, vec, dir);\r\n        vec3.normalize(tmp_vec, tmp_vec);\r\n        if (vec3.exactEquals(tmp_vec, ZERO)) {\r\n            getVertical(tmp_vec, vec);\r\n        }\r\n        vec3.cross(out, vec, dir);\r\n        if (vec3.dot(out, dir) < 0) {\r\n            vec3.negate(out, out);\r\n        }\r\n        vec3.normalize(out, out);\r\n        return out;\r\n    };\r\n})();\r\n\r\nexport const quatFromTwoUnitVec = (function () {\r\n    const tmp_vert = new Float32Array(3);\r\n    return function (out: quat, from: ReadonlyVec3, to: ReadonlyVec3) {\r\n        const r = vec3.dot(from, to) + 1;\r\n        if (r < 1e-8) {\r\n            if (Math.abs(from[0]) > Math.abs(from[2])) {\r\n                out[0] = -from[1];\r\n                out[1] = from[0];\r\n                out[2] = 0;\r\n                out[3] = 0;\r\n            } else {\r\n                out[0] = 0;\r\n                out[1] = -from[2];\r\n                out[2] = from[1];\r\n                out[3] = 0;\r\n            }\r\n        } else {\r\n            vec3.cross(tmp_vert, from, to);\r\n            out[0] = tmp_vert[0];\r\n            out[1] = tmp_vert[1];\r\n            out[2] = tmp_vert[2];\r\n            out[3] = r;\r\n        }\r\n        return quat.normalize(out, out);\r\n    };\r\n})();\r\n\r\nexport const quatFromTwoVec = (function () {\r\n    const tmp_a = new Float32Array(3);\r\n    const tmp_b = new Float32Array(3);\r\n    return function (out: quat, from: ReadonlyVec3, to: ReadonlyVec3) {\r\n        vec3.normalize(tmp_a, from);\r\n        vec3.normalize(tmp_b, to);\r\n        return quatFromTwoUnitVec(out, tmp_a, tmp_b);\r\n    };\r\n})();\r\n\r\nexport const quatLookRotation = (function () {\r\n    const tmp_a = new Float32Array(3);\r\n    const tmp_b = new Float32Array(3);\r\n    const tmp_mat3 = mat3.create();\r\n    return function (out: quat, forward: ReadonlyVec3, up: ReadonlyVec3) {\r\n        vec3.cross(tmp_a, up, forward);\r\n        vec3.normalize(tmp_a, tmp_a);\r\n        vec3.cross(tmp_b, forward, tmp_a);\r\n\r\n        tmp_mat3[0] = tmp_a[0];\r\n        tmp_mat3[1] = tmp_a[1];\r\n        tmp_mat3[2] = tmp_a[2];\r\n\r\n        tmp_mat3[3] = tmp_b[0];\r\n        tmp_mat3[4] = tmp_b[1];\r\n        tmp_mat3[5] = tmp_b[2];\r\n\r\n        tmp_mat3[6] = forward[0];\r\n        tmp_mat3[7] = forward[1];\r\n        tmp_mat3[8] = forward[2];\r\n\r\n        return quat.fromMat3(out, tmp_mat3);\r\n    };\r\n})();\r\n\r\nexport const transformInvMat4 = (function () {\r\n    const tmp_invMat = mat4.create();\r\n    return function (out: vec3, vec: ReadonlyVec3, mat: ReadonlyMat4) {\r\n        mat4.invert(tmp_invMat, mat);\r\n        return vec3.transformMat4(out, vec, tmp_invMat);\r\n    };\r\n})();\r\n\r\nexport function angleBetweenVec3(a: ReadonlyVec3, b: ReadonlyVec3) {\r\n    const dot = vec3.dot(a, b);\r\n    const sqrLen = vec3.sqrLen(a) * vec3.sqrLen(b);\r\n    const len = Math.sqrt(sqrLen);\r\n    const cos = dot / len;\r\n    if (!isFinite(cos)) {\r\n        return 0;\r\n    }\r\n    return Math.acos(cos);\r\n}","import Geometry from '../../utils/render/Geometry';\r\n\r\nexport default class ObjLoader {\r\n\r\n    private vertexArr: [number, number, number][] = [];\r\n    private normalArr: [number, number, number][] = [];\r\n    private indexArr: [number, number][][] = [];\r\n\r\n    private _lowerX: number = 0;\r\n    private _lowerY: number = 0;\r\n    private _lowerZ: number = 0;\r\n    private _upperX: number = 0;\r\n    private _upperY: number = 0;\r\n    private _upperZ: number = 0;\r\n    private _xRange: number = 0;\r\n    private _yRange: number = 0;\r\n    private _zRange: number = 0;\r\n\r\n    load(src: string) {\r\n        const vertexArr = this.vertexArr;\r\n        const normalArr = this.normalArr;\r\n        const indexArr = this.indexArr;\r\n        const lines = src.split('\\n');\r\n        let lowerX: number = Infinity;\r\n        let lowerY: number = Infinity;\r\n        let lowerZ: number = Infinity;\r\n        let upperX: number = -Infinity;\r\n        let upperY: number = -Infinity;\r\n        let upperZ: number = -Infinity;\r\n        for (let i = 0, len = lines.length; i < len; ++i) {\r\n            const line = lines[i].trim();\r\n            if (!line) {\r\n                continue;\r\n            }\r\n            const parts = line.split(' ');\r\n            switch (parts[0]) {\r\n                case 'v': {\r\n                    const x = Number(parts[1]) || 0;\r\n                    const y = Number(parts[2]) || 0;\r\n                    const z = Number(parts[3]) || 0;\r\n                    vertexArr.push([x, y, z]);\r\n                    lowerX = Math.min(lowerX, x);\r\n                    lowerY = Math.min(lowerY, y);\r\n                    lowerZ = Math.min(lowerZ, z);\r\n                    upperX = Math.max(upperX, x);\r\n                    upperY = Math.max(upperY, y);\r\n                    upperZ = Math.max(upperZ, z);\r\n                }\r\n                    break;\r\n                case 'vn': {\r\n                    const x = Number(parts[1]) || 0;\r\n                    const y = Number(parts[2]) || 0;\r\n                    const z = Number(parts[3]) || 0;\r\n                    normalArr.push([x, y, z]);\r\n                }\r\n                    break;\r\n                case 'f': {\r\n                    const face: [number, number][] = [];\r\n                    for (let j = 1, len = parts.length; j < len; ++j) {\r\n                        const vertexIndices = parts[j].split('/');\r\n                        face.push([\r\n                            Number(vertexIndices[0]) - 1,\r\n                            vertexIndices[2] ? Number(vertexIndices[2]) - 1 : -1\r\n                        ]);\r\n                    }\r\n                    indexArr.push(face);\r\n                }\r\n                    break;\r\n            }\r\n        }\r\n        this._lowerX = lowerX;\r\n        this._lowerY = lowerY;\r\n        this._lowerZ = lowerZ;\r\n        this._upperX = upperX;\r\n        this._upperY = upperY;\r\n        this._upperZ = upperZ;\r\n        this._xRange = upperX - lowerX;\r\n        this._yRange = upperY - lowerY;\r\n        this._zRange = upperZ - lowerZ;\r\n        return this;\r\n    }\r\n\r\n    translate(dx: number, dy: number, dz: number) {\r\n        const vertexArr = this.vertexArr;\r\n        for (let i = 0, len = vertexArr.length; i < len; ++i) {\r\n            const vertex = vertexArr[i];\r\n            vertex[0] += dx;\r\n            vertex[1] += dy;\r\n            vertex[2] += dz;\r\n        }\r\n        this._lowerX += dx;\r\n        this._upperX += dx;\r\n        this._lowerY += dy;\r\n        this._upperY += dy;\r\n        this._lowerZ += dz;\r\n        this._upperZ += dz;\r\n        return this;\r\n    }\r\n\r\n    setGeometryVertices(geometry: Geometry, color: number[] = [1, 1, 1, 1]) {\r\n        const vertices: { 'a_color': number[], 'a_position': number[], 'a_normal': number[] }[] = [];\r\n        const indices: number[] = [];\r\n\r\n        const vertexArr = this.vertexArr;\r\n        const normalArr = this.normalArr;\r\n        const indexArr = this.indexArr;\r\n        for (let i = 0, len = indexArr.length; i < len; ++i) {\r\n            const face = indexArr[i];\r\n            if (face.length !== 3 && face.length !== 4) {\r\n                throw new Error('Illegal face vertices num');\r\n            }\r\n            const index0 = vertices.length;\r\n            let needsCalculateNormal = false;\r\n            for (let j = 0, len = face.length; j < len; ++j) {\r\n                const vertexIndices = face[j];\r\n                const positionIndex = vertexIndices[0];\r\n                const normalIndex = vertexIndices[1];\r\n                const position = vertexArr[positionIndex];\r\n                if (normalIndex < 0) {\r\n                    needsCalculateNormal = true;\r\n                }\r\n                const normal = normalIndex < 0 ? [0, 0, 0] : normalArr[normalIndex];\r\n                vertices.push({'a_color': color, 'a_position': position, 'a_normal': normal});\r\n            }\r\n            if (needsCalculateNormal) {\r\n                // todo\r\n            }\r\n            if (face.length === 3) {\r\n                indices.push(index0, index0 + 1, index0 + 2);\r\n            } else {\r\n                indices.push(\r\n                    index0, index0 + 1, index0 + 2,\r\n                    index0, index0 + 2, index0 + 3,\r\n                );\r\n            }\r\n        }\r\n\r\n        geometry.setVertices(vertices);\r\n        geometry.indices = indices;\r\n    }\r\n\r\n    get lowerX(): number {\r\n        return this._lowerX;\r\n    }\r\n\r\n    get lowerY(): number {\r\n        return this._lowerY;\r\n    }\r\n\r\n    get lowerZ(): number {\r\n        return this._lowerZ;\r\n    }\r\n\r\n    get upperX(): number {\r\n        return this._upperX;\r\n    }\r\n\r\n    get upperY(): number {\r\n        return this._upperY;\r\n    }\r\n\r\n    get upperZ(): number {\r\n        return this._upperZ;\r\n    }\r\n\r\n    get xRange(): number {\r\n        return this._xRange;\r\n    }\r\n\r\n    get yRange(): number {\r\n        return this._yRange;\r\n    }\r\n\r\n    get zRange(): number {\r\n        return this._zRange;\r\n    }\r\n}","class Attribute {\r\n    name: string;\r\n    componentSize: number;\r\n    vertices: Float32Array;\r\n    vbo?: WebGLBuffer;\r\n\r\n    constructor(name: string, componentSize: number, vertices: Float32Array) {\r\n        this.name = name;\r\n        this.componentSize = componentSize;\r\n        this.vertices = vertices;\r\n    }\r\n}\r\n\r\nenum PrimitiveType {\r\n    TRIANGLES, LINES\r\n}\r\n\r\nexport default class Geometry {\r\n\r\n    static readonly TYPE_TRIANGLES = PrimitiveType.TRIANGLES;\r\n    static readonly TYPE_LINES = PrimitiveType.LINES;\r\n\r\n    type: PrimitiveType = PrimitiveType.TRIANGLES;\r\n    attributes: Attribute[] = [];\r\n    indices: number[] = [];\r\n    ibo?: WebGLBuffer;\r\n    vao?: WebGLVertexArrayObject;\r\n\r\n    constructor(type: PrimitiveType = PrimitiveType.TRIANGLES) {\r\n        this.type = type;\r\n    }\r\n\r\n    setVertices(vertices: { [name: string]: number[] }[]) {\r\n        const len = vertices.length;\r\n        const attributes: { [name: string]: Attribute } = {};\r\n        for (let attrName in vertices[0]) {\r\n            if (vertices[0].hasOwnProperty(attrName)) {\r\n                const size = vertices[0][attrName].length;\r\n                attributes[attrName] = new Attribute(\r\n                    attrName,\r\n                    size,\r\n                    new Float32Array(size * len)\r\n                );\r\n            }\r\n        }\r\n        for (let i = 0; i < len; ++i) {\r\n            const vertex = vertices[i];\r\n            for (let attrName in vertex) {\r\n                if (vertex.hasOwnProperty(attrName)) {\r\n                    const pointArr = vertex[attrName];\r\n                    attributes[attrName].vertices.set(pointArr, pointArr.length * i);\r\n                }\r\n            }\r\n        }\r\n        this.attributes = Object.values(attributes);\r\n    }\r\n\r\n}\r\n","import {mat4, quat, vec3} from 'gl-matrix';\r\nimport Geometry from '../../../utils/render/Geometry';\r\nimport Renderer from '../../../utils/render/Renderer';\r\n\r\nconst ACTIVE_COLOR = [1, 1, 1, 1];\r\nconst INACTIVE_COLOR = [1, 1, 1, 0.1];\r\n\r\nexport default class SkeletonModelNode {\r\n\r\n    translation: [number, number, number] = [0, 0, 0];\r\n    forward: [number, number, number] = [0, 0, 1];\r\n    up: [number, number, number] = [0, 1, 0];\r\n    controlPoint?: [number, number, number];\r\n    landmarks: [number, number, number][] = [];\r\n\r\n    parent?: SkeletonModelNode;\r\n    children: SkeletonModelNode[] = [];\r\n\r\n    active: boolean = true;\r\n\r\n    localRotation = quat.create();\r\n    localMatrix = mat4.create();\r\n    worldMatrix = mat4.create();\r\n\r\n    originWorldPosition = vec3.create();\r\n    originViewPosition = vec3.create();\r\n    controlPointWorldPosition = vec3.create();\r\n    controlPointViewPosition = vec3.create();\r\n    controlPointScreenPosition = vec3.create();\r\n    landmarksWorldPositions: [number, number, number][] = [];\r\n    landmarksViewPosition: [number, number, number][] = [];\r\n\r\n    geometry = new Geometry();\r\n\r\n    render(renderer: Renderer) {\r\n        renderer.uniform('u_mMatrix', this.worldMatrix);\r\n        renderer.uniform('u_color', this.active ? ACTIVE_COLOR : INACTIVE_COLOR);\r\n        renderer.drawGeometry(this.geometry);\r\n    }\r\n\r\n    dispose(renderer: Renderer) {\r\n        renderer.drawGeometry(this.geometry);\r\n    }\r\n\r\n}","import {mat4, ReadonlyVec3, vec3} from 'gl-matrix';\r\nimport {quatLookRotation} from '../../../utils/math/math';\r\nimport Camera3D from '../../../utils/render/camera/Camera3D';\r\nimport Renderer from '../../../utils/render/Renderer';\r\nimport ObjLoader from '../ObjLoader';\r\nimport {BodyPart} from './BodyPart';\r\nimport SkeletonModelNode from './SkeletonModelNode';\r\n\r\nconst ZERO: ReadonlyVec3 = [0, 0, 0];\r\n\r\nexport default class SkeletonModel {\r\n\r\n    root = new SkeletonModelNode();\r\n\r\n    [BodyPart.trunk] = this.root;\r\n    [BodyPart.head] = new SkeletonModelNode();\r\n    [BodyPart.leftUpperArm] = new SkeletonModelNode();\r\n    [BodyPart.leftLowerArm] = new SkeletonModelNode();\r\n    [BodyPart.leftHand] = new SkeletonModelNode();\r\n    [BodyPart.leftThigh] = new SkeletonModelNode();\r\n    [BodyPart.leftCalf] = new SkeletonModelNode();\r\n    [BodyPart.leftFoot] = new SkeletonModelNode();\r\n    [BodyPart.rightUpperArm] = new SkeletonModelNode();\r\n    [BodyPart.rightLowerArm] = new SkeletonModelNode();\r\n    [BodyPart.rightHand] = new SkeletonModelNode();\r\n    [BodyPart.rightThigh] = new SkeletonModelNode();\r\n    [BodyPart.rightCalf] = new SkeletonModelNode();\r\n    [BodyPart.rightFoot] = new SkeletonModelNode();\r\n\r\n    update(camera: Camera3D, node: SkeletonModelNode = this.root) {\r\n        const stack: SkeletonModelNode[] = [node];\r\n        for (; ;) {\r\n            const node = stack.pop();\r\n            if (!node) {\r\n                break;\r\n            }\r\n            stack.push(...node.children);\r\n\r\n            quatLookRotation(node.localRotation, node.forward, node.up);\r\n            mat4.fromRotationTranslation(node.localMatrix, node.localRotation, node.translation);\r\n            if (node.parent) {\r\n                mat4.mul(node.worldMatrix, node.parent.worldMatrix, node.localMatrix);\r\n            } else {\r\n                mat4.copy(node.worldMatrix, node.localMatrix);\r\n            }\r\n\r\n            vec3.transformMat4(node.originWorldPosition, ZERO, node.worldMatrix);\r\n            vec3.transformMat4(node.originViewPosition, node.originWorldPosition, camera.viewMatrix);\r\n            if (node.controlPoint) {\r\n                vec3.transformMat4(node.controlPointWorldPosition, node.controlPoint, node.worldMatrix);\r\n                vec3.transformMat4(node.controlPointViewPosition, node.controlPointWorldPosition, camera.viewMatrix);\r\n                vec3.transformMat4(node.controlPointScreenPosition, node.controlPointWorldPosition, camera.pvMatrix);\r\n            }\r\n\r\n            if (node.landmarks.length !== node.landmarksWorldPositions.length) {\r\n                node.landmarksWorldPositions = node.landmarks.map(_ => [0, 0, 0]);\r\n                node.landmarksViewPosition = node.landmarks.map(_ => [0, 0, 0]);\r\n            }\r\n            for (let i = 0, len = node.landmarks.length; i < len; ++i) {\r\n                vec3.transformMat4(node.landmarksWorldPositions[i], node.landmarks[i], node.worldMatrix);\r\n                vec3.transformMat4(node.landmarksViewPosition[i], node.landmarksWorldPositions[i], camera.viewMatrix);\r\n            }\r\n        }\r\n    }\r\n\r\n    render(renderer: Renderer) {\r\n        const stack: SkeletonModelNode[] = [this.root];\r\n        for (; ;) {\r\n            const node = stack.pop();\r\n            if (!node) {\r\n                break;\r\n            }\r\n            stack.push(...node.children);\r\n            node.render(renderer);\r\n        }\r\n    }\r\n\r\n    async init() {\r\n        // =============== load objs ===============\r\n        const headVertices = new ObjLoader().load((await import('./obj/head.obj')).default);\r\n        const trunkVertices = new ObjLoader().load((await import('./obj/trunk.obj')).default);\r\n        const leftUpperArmVertices = new ObjLoader().load((await import('./obj/left-upper-arm.obj')).default);\r\n        const leftLowerArmVertices = new ObjLoader().load((await import('./obj/left-lower-arm.obj')).default);\r\n        const leftHandVertices = new ObjLoader().load((await import('./obj/left-hand.obj')).default);\r\n        const rightUpperArmVertices = new ObjLoader().load((await import('./obj/right-upper-arm.obj')).default);\r\n        const rightLowerArmVertices = new ObjLoader().load((await import('./obj/right-lower-arm.obj')).default);\r\n        const rightHandVertices = new ObjLoader().load((await import('./obj/right-hand.obj')).default);\r\n        const leftThighVertices = new ObjLoader().load((await import('./obj/left-thigh.obj')).default);\r\n        const leftCalfVertices = new ObjLoader().load((await import('./obj/left-calf.obj')).default);\r\n        const leftFootVertices = new ObjLoader().load((await import('./obj/left-foot.obj')).default);\r\n        const rightThighVertices = new ObjLoader().load((await import('./obj/right-thigh.obj')).default);\r\n        const rightCalfVertices = new ObjLoader().load((await import('./obj/right-calf.obj')).default);\r\n        const rightFootVertices = new ObjLoader().load((await import('./obj/right-foot.obj')).default);\r\n\r\n        // =============== move rotation origins to joint connection points ===============\r\n        const headOffset: [number, number, number] = [\r\n            0,\r\n            headVertices.lowerY + headVertices.yRange * 0.35,\r\n            headVertices.zRange * -0.1,\r\n        ];\r\n        const leftUpperArmOffset: [number, number, number] = [\r\n            leftUpperArmVertices.lowerX + leftUpperArmVertices.xRange * 0.3,\r\n            leftUpperArmVertices.lowerY + leftUpperArmVertices.yRange * (1 - 0.075),\r\n            leftUpperArmVertices.zRange * -0.1,\r\n        ];\r\n        const leftLowerArmOffset: [number, number, number] = [\r\n            leftLowerArmVertices.lowerX - leftUpperArmOffset[0] + leftLowerArmVertices.xRange * 0.5,\r\n            leftLowerArmVertices.lowerY - leftUpperArmOffset[1] + leftLowerArmVertices.yRange * (1 - 0.05),\r\n            leftLowerArmVertices.lowerZ - leftUpperArmOffset[2] + leftLowerArmVertices.zRange * 0.3,\r\n        ];\r\n        const leftHandOffset: [number, number, number] = [\r\n            leftHandVertices.lowerX - leftLowerArmOffset[0] - leftUpperArmOffset[0] + leftHandVertices.xRange * 0.85,\r\n            leftHandVertices.lowerY - leftLowerArmOffset[1] - leftUpperArmOffset[1] + leftHandVertices.yRange * (1 - 0.05),\r\n            leftHandVertices.lowerZ - leftLowerArmOffset[2] - leftUpperArmOffset[2] + leftHandVertices.zRange * 0.65,\r\n        ];\r\n        const leftThighOffset: [number, number, number] = [\r\n            leftThighVertices.lowerX + leftThighVertices.xRange * 0.5,\r\n            leftThighVertices.lowerY + leftThighVertices.yRange * (1 - 0.05),\r\n            leftThighVertices.zRange * 0.05,\r\n        ];\r\n        const leftCalfOffset: [number, number, number] = [\r\n            leftCalfVertices.lowerX - leftThighOffset[0] + leftCalfVertices.xRange * 0.5,\r\n            leftCalfVertices.lowerY - leftThighOffset[1] + leftCalfVertices.yRange * (1 - 0.05),\r\n            leftCalfVertices.lowerZ - leftThighOffset[2] + leftCalfVertices.zRange * 0.65,\r\n        ];\r\n        const leftFootOffset: [number, number, number] = [\r\n            leftFootVertices.lowerX - leftThighOffset[0] - leftCalfOffset[0] + leftFootVertices.xRange * 0.3,\r\n            leftFootVertices.lowerY - leftThighOffset[1] - leftCalfOffset[1] + leftFootVertices.yRange * (1 - 0.25),\r\n            leftFootVertices.lowerZ - leftThighOffset[2] - leftCalfOffset[2] + leftFootVertices.zRange * 0.25,\r\n        ];\r\n\r\n        // =============== control points positions ===============\r\n        const trunkControlPoint: [number, number, number] = [0, trunkVertices.yRange * 0.75, 0];\r\n        const headControlPoint: [number, number, number] = [0, 0, headVertices.yRange * 0.5];\r\n        const leftUpperArmControlPoint: [number, number, number] = [\r\n            leftUpperArmVertices.xRange * 0.3,\r\n            leftUpperArmVertices.yRange * -0.85,\r\n            leftUpperArmVertices.zRange * -0.3,\r\n        ];\r\n        const leftLowerArmControlPoint: [number, number, number] = [\r\n            0,\r\n            leftLowerArmVertices.yRange * -0.9,\r\n            leftLowerArmVertices.zRange * 0.4,\r\n        ];\r\n        const leftHandControlPoint: [number, number, number] = [\r\n            leftHandVertices.xRange * -0.2,\r\n            leftHandVertices.yRange * -0.8,\r\n            leftHandVertices.zRange * -0.1,\r\n        ];\r\n        const leftThighControlPoint: [number, number, number] = [\r\n            leftThighVertices.xRange * -0.15,\r\n            leftThighVertices.yRange * -0.87,\r\n            leftThighVertices.zRange * -0.25,\r\n        ];\r\n        const leftCalfControlPoint: [number, number, number] = [\r\n            0,\r\n            leftCalfVertices.yRange * -0.85,\r\n            leftCalfVertices.zRange * -0.3,\r\n        ];\r\n        const leftFootControlPoint: [number, number, number] = [\r\n            leftFootVertices.xRange * 0.25,\r\n            leftFootVertices.yRange * -0.5,\r\n            leftFootVertices.zRange * 0.6,\r\n        ];\r\n\r\n        // =============== create nodes ===============\r\n        function mirror(vec: [number, number, number]): [number, number, number] {\r\n            return [-vec[0], vec[1], vec[2]];\r\n        }\r\n\r\n        const trunk = this.root;\r\n        trunkVertices.setGeometryVertices(trunk.geometry);\r\n        trunk.controlPoint = trunkControlPoint;\r\n\r\n        const head = this.addChild(this.root, this.head);\r\n        head.landmarks = [\r\n            // left ear\r\n            [-headVertices.lowerX, headVertices.yRange * .05, headVertices.zRange * .15],\r\n            // right ear\r\n            [-headVertices.upperX, headVertices.yRange * .05, headVertices.zRange * .15],\r\n        ];\r\n        headVertices.translate(-headOffset[0], -headOffset[1], -headOffset[2]);\r\n        headVertices.setGeometryVertices(head.geometry);\r\n        head.translation = headOffset;\r\n        head.controlPoint = headControlPoint;\r\n\r\n        const leftUpperArm = this.addChild(this.root, this.leftUpperArm);\r\n        leftUpperArmVertices.translate(-leftUpperArmOffset[0], -leftUpperArmOffset[1], -leftUpperArmOffset[2]);\r\n        leftUpperArmVertices.setGeometryVertices(leftUpperArm.geometry);\r\n        leftUpperArm.translation = leftUpperArmOffset;\r\n        leftUpperArm.controlPoint = leftUpperArmControlPoint;\r\n\r\n        const rightUpperArm = this.addChild(this.root, this.rightUpperArm);\r\n        rightUpperArmVertices.translate(+leftUpperArmOffset[0], -leftUpperArmOffset[1], -leftUpperArmOffset[2]);\r\n        rightUpperArmVertices.setGeometryVertices(rightUpperArm.geometry);\r\n        rightUpperArm.translation = mirror(leftUpperArmOffset);\r\n        rightUpperArm.controlPoint = mirror(leftUpperArmControlPoint);\r\n\r\n        const leftLowerArm = this.addChild(leftUpperArm, this.leftLowerArm);\r\n        leftLowerArmVertices.translate(\r\n            -leftLowerArmOffset[0] - leftUpperArmOffset[0],\r\n            -leftLowerArmOffset[1] - leftUpperArmOffset[1],\r\n            -leftLowerArmOffset[2] - leftUpperArmOffset[2],\r\n        );\r\n        leftLowerArmVertices.setGeometryVertices(leftLowerArm.geometry);\r\n        leftLowerArm.translation = leftLowerArmOffset;\r\n        leftLowerArm.controlPoint = leftLowerArmControlPoint;\r\n\r\n        const rightLowerArm = this.addChild(rightUpperArm, this.rightLowerArm);\r\n        rightLowerArmVertices.translate(\r\n            +leftLowerArmOffset[0] + leftUpperArmOffset[0],\r\n            -leftLowerArmOffset[1] - leftUpperArmOffset[1],\r\n            -leftLowerArmOffset[2] - leftUpperArmOffset[2],\r\n        );\r\n        rightLowerArmVertices.setGeometryVertices(rightLowerArm.geometry);\r\n        rightLowerArm.translation = mirror(leftLowerArmOffset);\r\n        rightLowerArm.controlPoint = mirror(leftLowerArmControlPoint);\r\n\r\n        const leftHand = this.addChild(leftLowerArm, this.leftHand);\r\n        leftHandVertices.translate(\r\n            -leftHandOffset[0] - leftLowerArmOffset[0] - leftUpperArmOffset[0],\r\n            -leftHandOffset[1] - leftLowerArmOffset[1] - leftUpperArmOffset[1],\r\n            -leftHandOffset[2] - leftLowerArmOffset[2] - leftUpperArmOffset[2],\r\n        );\r\n        leftHandVertices.setGeometryVertices(leftHand.geometry);\r\n        leftHand.translation = leftHandOffset;\r\n        leftHand.controlPoint = leftHandControlPoint;\r\n\r\n        const rightHand = this.addChild(rightLowerArm, this.rightHand);\r\n        rightHandVertices.translate(\r\n            +leftHandOffset[0] + leftLowerArmOffset[0] + leftUpperArmOffset[0],\r\n            -leftHandOffset[1] - leftLowerArmOffset[1] - leftUpperArmOffset[1],\r\n            -leftHandOffset[2] - leftLowerArmOffset[2] - leftUpperArmOffset[2],\r\n        );\r\n        rightHandVertices.setGeometryVertices(rightHand.geometry);\r\n        rightHand.translation = mirror(leftHandOffset);\r\n        rightHand.controlPoint = mirror(leftHandControlPoint);\r\n\r\n        const leftThigh = this.addChild(trunk, this.leftThigh);\r\n        leftThighVertices.translate(\r\n            -leftThighOffset[0],\r\n            -leftThighOffset[1],\r\n            -leftThighOffset[2],\r\n        );\r\n        leftThighVertices.setGeometryVertices(leftThigh.geometry);\r\n        leftThigh.translation = leftThighOffset;\r\n        leftThigh.controlPoint = leftThighControlPoint;\r\n\r\n        const rightThigh = this.addChild(trunk, this.rightThigh);\r\n        rightThighVertices.translate(\r\n            +leftThighOffset[0],\r\n            -leftThighOffset[1],\r\n            -leftThighOffset[2],\r\n        );\r\n        rightThighVertices.setGeometryVertices(rightThigh.geometry);\r\n        rightThigh.translation = mirror(leftThighOffset);\r\n        rightThigh.controlPoint = mirror(leftThighControlPoint);\r\n\r\n        const leftCalf = this.addChild(leftThigh, this.leftCalf);\r\n        leftCalfVertices.translate(\r\n            -leftCalfOffset[0] - leftThighOffset[0],\r\n            -leftCalfOffset[1] - leftThighOffset[1],\r\n            -leftCalfOffset[2] - leftThighOffset[2],\r\n        );\r\n        leftCalfVertices.setGeometryVertices(leftCalf.geometry);\r\n        leftCalf.translation = leftCalfOffset;\r\n        leftCalf.controlPoint = leftCalfControlPoint;\r\n\r\n        const rightCalf = this.addChild(rightThigh, this.rightCalf);\r\n        rightCalfVertices.translate(\r\n            +leftCalfOffset[0] + leftThighOffset[0],\r\n            -leftCalfOffset[1] - leftThighOffset[1],\r\n            -leftCalfOffset[2] - leftThighOffset[2],\r\n        );\r\n        rightCalfVertices.setGeometryVertices(rightCalf.geometry);\r\n        rightCalf.translation = mirror(leftCalfOffset);\r\n        rightCalf.controlPoint = mirror(leftCalfControlPoint);\r\n\r\n        const leftFoot = this.addChild(leftCalf, this.leftFoot);\r\n        leftFootVertices.translate(\r\n            -leftFootOffset[0] - leftCalfOffset[0] - leftThighOffset[0],\r\n            -leftFootOffset[1] - leftCalfOffset[1] - leftThighOffset[1],\r\n            -leftFootOffset[2] - leftCalfOffset[2] - leftThighOffset[2],\r\n        );\r\n        leftFootVertices.setGeometryVertices(leftFoot.geometry);\r\n        leftFoot.translation = leftFootOffset;\r\n        leftFoot.controlPoint = leftFootControlPoint;\r\n\r\n        const rightFoot = this.addChild(rightCalf, this.rightFoot);\r\n        rightFootVertices.translate(\r\n            +leftFootOffset[0] + leftCalfOffset[0] + leftThighOffset[0],\r\n            -leftFootOffset[1] - leftCalfOffset[1] - leftThighOffset[1],\r\n            -leftFootOffset[2] - leftCalfOffset[2] - leftThighOffset[2],\r\n        );\r\n        rightFootVertices.setGeometryVertices(rightFoot.geometry);\r\n        rightFoot.translation = mirror(leftFootOffset);\r\n        rightFoot.controlPoint = mirror(leftFootControlPoint);\r\n    }\r\n\r\n    private addChild(parent: SkeletonModelNode, node?: SkeletonModelNode) {\r\n        node = node || new SkeletonModelNode();\r\n        parent.children.push(node);\r\n        node.parent = parent;\r\n        return node;\r\n    }\r\n\r\n}","import {vec3} from 'gl-matrix';\r\n\r\nexport function raycastPlane(\r\n    out: vec3,\r\n    ray0x: number,\r\n    ray0y: number,\r\n    ray0z: number,\r\n    ray1x: number,\r\n    ray1y: number,\r\n    ray1z: number,\r\n    p0x: number,\r\n    p0y: number,\r\n    p0z: number,\r\n    nx: number,\r\n    ny: number,\r\n    nz: number,\r\n) {\r\n    const detX = ray1x - ray0x;\r\n    const detY = ray1y - ray0y;\r\n    const detZ = ray1z - ray0z;\r\n    const len = Math.sqrt(detX ** 2 + detY ** 2 + detZ ** 2);\r\n    if (len <= 1e-8) {\r\n        return false;\r\n    }\r\n    const lx = detX / len;\r\n    const ly = detY / len;\r\n    const lz = detZ / len;\r\n    const nLen = Math.sqrt(nx ** 2 + ny ** 2 + nz ** 2);\r\n    if (nLen <= 1e-8) {\r\n        return false;\r\n    }\r\n    const invNLen = 1 / nLen;\r\n    nx *= invNLen;\r\n    ny *= invNLen;\r\n    nz *= invNLen;\r\n    const ln = lx * nx + ly * ny + lz * nz;\r\n    if (Math.abs(ln) <= 1e-8) {\r\n        return false;\r\n    }\r\n    const p0r0x = -ray0x + p0x;\r\n    const p0r0y = -ray0y + p0y;\r\n    const p0r0z = -ray0z + p0z;\r\n    const t = (p0r0x * nx + p0r0y * ny + p0r0z * nz) / ln;\r\n    const px = ray0x + t * lx;\r\n    const py = ray0y + t * ly;\r\n    const pz = ray0z + t * lz;\r\n    vec3.set(out, px, py, pz);\r\n    return t >= 0;\r\n}\r\n\r\nexport function raycastSphere(\r\n    out: vec3,\r\n    ray0x: number,\r\n    ray0y: number,\r\n    ray0z: number,\r\n    ray1x: number,\r\n    ray1y: number,\r\n    ray1z: number,\r\n    cx: number,\r\n    cy: number,\r\n    cz: number,\r\n    r: number\r\n) {\r\n    let vx = ray1x - ray0x;\r\n    let vy = ray1y - ray0y;\r\n    let vz = ray1z - ray0z;\r\n    const dx = ray0x - cx;\r\n    const dy = ray0y - cy;\r\n    const dz = ray0z - cz;\r\n    const a = vx ** 2 + vy ** 2 + vz ** 2;\r\n    const b = 2 * (vx * dx + vy * dy + vz * dz);\r\n    const c = (dx ** 2 + dy ** 2 + dz ** 2) - r ** 2;\r\n    const delta = b ** 2 - 4 * a * c;\r\n    if (delta < 0) {\r\n        return false;\r\n    }\r\n    const sqrtDelta = Math.sqrt(delta);\r\n    const t1 = (-b + sqrtDelta) / (2 * a);\r\n    const t2 = (-b - sqrtDelta) / (2 * a);\r\n    const t = Math.min(t1, t2);\r\n    out[0] = ray0x + vx * t;\r\n    out[1] = ray0y + vy * t;\r\n    out[2] = ray0z + vz * t;\r\n    return true;\r\n}\r\n","import {vec3} from 'gl-matrix';\r\nimport {raycastPlane, raycastSphere} from '../math/raycast';\r\nimport Camera3D from '../render/camera/Camera3D';\r\n\r\nexport class MouseDragContext3D {\r\n    dragStartMousePosition = vec3.create();\r\n    dragStartOriginPosition = vec3.create();\r\n    dragStartTargetPosition = vec3.create();\r\n    mousePosition = vec3.create();\r\n    mouseRay0 = vec3.create();\r\n    mouseRay1 = vec3.create();\r\n    rayResult0 = vec3.create();\r\n    rayResult1 = vec3.create();\r\n    normal = vec3.create();\r\n    radius = 0;\r\n    offset = vec3.create();\r\n}\r\n\r\nexport function raycastViewPlaneDragStart(\r\n    context: MouseDragContext3D,\r\n    projectedMouseX: number, projectedMouseY: number,\r\n    targetX: number, targetY: number, targetZ: number,\r\n    camera: Camera3D\r\n) {\r\n    vec3.set(context.dragStartMousePosition, projectedMouseX, projectedMouseY, 0);\r\n    vec3.set(context.dragStartTargetPosition, targetX, targetY, targetZ);\r\n    vec3.sub(context.normal, camera.target, camera.position);\r\n}\r\n\r\nexport function raycastViewPlaneDragMove(\r\n    context: MouseDragContext3D,\r\n    projectedMouseX: number, projectedMouseY: number,\r\n    camera: Camera3D\r\n): boolean {\r\n    context.dragStartMousePosition[2] = -1;\r\n    camera.screenToView(context.mouseRay0, context.dragStartMousePosition);\r\n    context.dragStartMousePosition[2] = 1;\r\n    camera.screenToView(context.mouseRay1, context.dragStartMousePosition);\r\n    if (!raycastPlane(\r\n        context.rayResult0,\r\n        context.mouseRay0[0], context.mouseRay0[1], context.mouseRay0[2],\r\n        context.mouseRay1[0], context.mouseRay1[1], context.mouseRay1[2],\r\n        context.dragStartTargetPosition[0], context.dragStartTargetPosition[1], context.dragStartTargetPosition[2],\r\n        context.normal[0], context.normal[1], context.normal[2],\r\n    )) {\r\n        return false;\r\n    }\r\n    vec3.set(context.mousePosition, projectedMouseX, projectedMouseY, -1);\r\n    camera.screenToView(context.mouseRay0, context.mousePosition);\r\n    vec3.set(context.mousePosition, projectedMouseX, projectedMouseY, +1);\r\n    camera.screenToView(context.mouseRay1, context.mousePosition);\r\n    if (!raycastPlane(\r\n        context.rayResult1,\r\n        context.mouseRay0[0], context.mouseRay0[1], context.mouseRay0[2],\r\n        context.mouseRay1[0], context.mouseRay1[1], context.mouseRay1[2],\r\n        context.dragStartTargetPosition[0], context.dragStartTargetPosition[1], context.dragStartTargetPosition[2],\r\n        context.normal[0], context.normal[1], context.normal[2],\r\n    )) {\r\n        return false;\r\n    }\r\n    vec3.sub(context.offset, context.rayResult1, context.rayResult0);\r\n    return true;\r\n}\r\n\r\nexport function raycastSphereDragStart(\r\n    context: MouseDragContext3D,\r\n    projectedMouseX: number, projectedMouseY: number,\r\n    originX: number, originY: number, originZ: number,\r\n    targetX: number, targetY: number, targetZ: number,\r\n    camera: Camera3D\r\n) {\r\n    vec3.set(context.dragStartMousePosition, projectedMouseX, projectedMouseY, 0);\r\n    vec3.set(context.dragStartOriginPosition, originX, originY, originZ);\r\n    vec3.set(context.dragStartTargetPosition, targetX, targetY, targetZ);\r\n    vec3.sub(context.normal, context.dragStartTargetPosition, camera.position);\r\n    context.radius = vec3.distance(context.dragStartOriginPosition, context.dragStartTargetPosition);\r\n}\r\n\r\nexport function raycastSphereDragMove(\r\n    context: MouseDragContext3D,\r\n    projectedMouseX: number, projectedMouseY: number,\r\n    camera: Camera3D\r\n): boolean {\r\n    const zOrigin = vec3.dot(context.normal, context.dragStartOriginPosition);\r\n    const zTarget = vec3.dot(context.normal, context.dragStartTargetPosition);\r\n    if (zTarget - zOrigin <= 0) {\r\n        vec3.set(context.mousePosition, projectedMouseX, projectedMouseY, -1);\r\n        camera.screenToView(context.mouseRay0, context.mousePosition);\r\n        vec3.set(context.mousePosition, projectedMouseX, projectedMouseY, +1);\r\n        camera.screenToView(context.mouseRay1, context.mousePosition);\r\n        if (raycastSphere(\r\n            context.rayResult1,\r\n            context.mouseRay0[0], context.mouseRay0[1], context.mouseRay0[2],\r\n            context.mouseRay1[0], context.mouseRay1[1], context.mouseRay1[2],\r\n            context.dragStartOriginPosition[0], context.dragStartOriginPosition[1], context.dragStartOriginPosition[2],\r\n            context.radius,\r\n        )) {\r\n            return true;\r\n        }\r\n        return raycastPlane(\r\n            context.rayResult1,\r\n            context.mouseRay0[0], context.mouseRay0[1], context.mouseRay0[2],\r\n            context.mouseRay1[0], context.mouseRay1[1], context.mouseRay1[2],\r\n            context.dragStartOriginPosition[0], context.dragStartOriginPosition[1], context.dragStartOriginPosition[2],\r\n            context.normal[0], context.normal[1], context.normal[2],\r\n        );\r\n    }\r\n    return raycastViewPlaneDragMove(context, projectedMouseX, projectedMouseY, camera);\r\n}","import {mat4, ReadonlyMat4, ReadonlyVec3, vec3} from 'gl-matrix';\r\nimport Camera3D from './Camera3D';\r\n\r\nexport default class OrthographicCamera implements Camera3D {\r\n\r\n    readonly perspective = false;\r\n\r\n    private _pvMatrix: Float32Array = new Float32Array(16);\r\n    private _invPvMatrix: Float32Array = new Float32Array(16);\r\n    private _projectionMatrix: Float32Array = new Float32Array(16);\r\n    private _viewMatrix: Float32Array = new Float32Array(16);\r\n\r\n    private _position: Float32Array = new Float32Array(3);\r\n    private _target: Float32Array = new Float32Array(3);\r\n    private _up: Float32Array = new Float32Array([0, 1, 0]);\r\n\r\n    private _left: number;\r\n    private _right: number;\r\n    private _bottom: number;\r\n    private _top: number;\r\n    private _near: number;\r\n    private _far: number;\r\n\r\n    private matrixNeedsUpdate: boolean = true;\r\n\r\n    constructor(left: number, right: number, bottom: number, top: number, near: number, far: number) {\r\n        this._left = left;\r\n        this._right = right;\r\n        this._bottom = bottom;\r\n        this._top = top;\r\n        this._near = near;\r\n        this._far = far;\r\n    }\r\n\r\n    fitViewport(width: number, height: number) {\r\n        this.left = -width / 2;\r\n        this.right = width / 2;\r\n        this.bottom = -height / 2;\r\n        this.top = height / 2;\r\n    }\r\n\r\n    screenToView(out: vec3, point: ReadonlyVec3) {\r\n        vec3.transformMat4(out, point, this._invPvMatrix);\r\n    }\r\n\r\n    private updateMatrix() {\r\n        mat4.ortho(this._projectionMatrix, this._left, this._right, this._bottom, this._top, this._near, this._far);\r\n        mat4.lookAt(this._viewMatrix, this._position, this._target, this._up);\r\n        mat4.mul(this._pvMatrix, this._projectionMatrix, this._viewMatrix);\r\n        mat4.invert(this._invPvMatrix, this._pvMatrix);\r\n        this.matrixNeedsUpdate = false;\r\n    }\r\n\r\n    get pvMatrix(): ReadonlyMat4 {\r\n        if (this.matrixNeedsUpdate) {\r\n            this.updateMatrix();\r\n        }\r\n        return this._pvMatrix;\r\n    }\r\n\r\n    get invPvMatrix(): ReadonlyMat4 {\r\n        if (this.matrixNeedsUpdate) {\r\n            this.updateMatrix();\r\n        }\r\n        return this._invPvMatrix;\r\n    }\r\n\r\n    get projectionMatrix(): ReadonlyMat4 {\r\n        if (this.matrixNeedsUpdate) {\r\n            this.updateMatrix();\r\n        }\r\n        return this._projectionMatrix;\r\n    }\r\n\r\n    get viewMatrix(): ReadonlyMat4 {\r\n        if (this.matrixNeedsUpdate) {\r\n            this.updateMatrix();\r\n        }\r\n        return this._viewMatrix;\r\n    }\r\n\r\n    get position(): ReadonlyVec3 {\r\n        return this._position;\r\n    }\r\n\r\n    set position(value: ReadonlyVec3) {\r\n        if (vec3.exactEquals(value, this._position)) {\r\n            return;\r\n        }\r\n        this.matrixNeedsUpdate = true;\r\n        this._position.set(value);\r\n    }\r\n\r\n    get target(): ReadonlyVec3 {\r\n        return this._target;\r\n    }\r\n\r\n    set target(value: ReadonlyVec3) {\r\n        if (vec3.exactEquals(value, this._target)) {\r\n            return;\r\n        }\r\n        this.matrixNeedsUpdate = true;\r\n        this._target.set(value);\r\n    }\r\n\r\n    get up(): ReadonlyVec3 {\r\n        return this._up;\r\n    }\r\n\r\n    set up(value: ReadonlyVec3) {\r\n        if (vec3.exactEquals(value, this._up)) {\r\n            return;\r\n        }\r\n        this.matrixNeedsUpdate = true;\r\n        this._up.set(value);\r\n    }\r\n\r\n    get left(): number {\r\n        return this._left;\r\n    }\r\n\r\n    set left(value: number) {\r\n        if (value === this._left) {\r\n            return;\r\n        }\r\n        this.matrixNeedsUpdate = true;\r\n        this._left = value;\r\n    }\r\n\r\n    get right(): number {\r\n        return this._right;\r\n    }\r\n\r\n    set right(value: number) {\r\n        if (value === this._right) {\r\n            return;\r\n        }\r\n        this.matrixNeedsUpdate = true;\r\n        this._right = value;\r\n    }\r\n\r\n    get bottom(): number {\r\n        return this._bottom;\r\n    }\r\n\r\n    set bottom(value: number) {\r\n        if (value === this._bottom) {\r\n            return;\r\n        }\r\n        this.matrixNeedsUpdate = true;\r\n        this._bottom = value;\r\n    }\r\n\r\n    get top(): number {\r\n        return this._top;\r\n    }\r\n\r\n    set top(value: number) {\r\n        if (value === this._top) {\r\n            return;\r\n        }\r\n        this.matrixNeedsUpdate = true;\r\n        this._top = value;\r\n    }\r\n\r\n    get near(): number {\r\n        return this._near;\r\n    }\r\n\r\n    set near(value: number) {\r\n        if (value === this._near) {\r\n            return;\r\n        }\r\n        this.matrixNeedsUpdate = true;\r\n        this._near = value;\r\n    }\r\n\r\n    get far(): number {\r\n        return this._far;\r\n    }\r\n\r\n    set far(value: number) {\r\n        if (value === this._far) {\r\n            return;\r\n        }\r\n        this.matrixNeedsUpdate = true;\r\n        this._far = value;\r\n    }\r\n}\r\n","import {mat4, ReadonlyMat4, ReadonlyVec3, vec3} from 'gl-matrix';\r\nimport Camera3D from './Camera3D';\r\n\r\nexport default class PerspectiveCamera implements Camera3D {\r\n\r\n    readonly perspective = true;\r\n\r\n    private _pvMatrix: Float32Array = new Float32Array(16);\r\n    private _invPvMatrix: Float32Array = new Float32Array(16);\r\n    private _projectionMatrix: Float32Array = new Float32Array(16);\r\n    private _viewMatrix: Float32Array = new Float32Array(16);\r\n\r\n    private _position: Float32Array = new Float32Array(3);\r\n    private _target: Float32Array = new Float32Array(3);\r\n    private _up: Float32Array = new Float32Array([0, 1, 0]);\r\n\r\n    private _fovYRad: number;\r\n    private _aspect: number;\r\n    private _near: number;\r\n    private _far: number;\r\n\r\n    private matrixNeedsUpdate: boolean = true;\r\n\r\n    constructor(fovYRad: number, aspect: number, near: number, far: number) {\r\n        this._fovYRad = fovYRad;\r\n        this._aspect = aspect;\r\n        this._near = near;\r\n        this._far = far;\r\n    }\r\n\r\n    fitViewport(width: number, height: number) {\r\n        this.aspect = width / height;\r\n    }\r\n\r\n    screenToView(out: vec3, point: ReadonlyVec3) {\r\n        vec3.transformMat4(out, point, this._invPvMatrix);\r\n    }\r\n\r\n    private updateMatrix() {\r\n        mat4.perspective(this._projectionMatrix, this._fovYRad, this._aspect, this._near, this._far);\r\n        mat4.lookAt(this._viewMatrix, this._position, this._target, this._up);\r\n        mat4.mul(this._pvMatrix, this._projectionMatrix, this._viewMatrix);\r\n        mat4.invert(this._invPvMatrix, this._pvMatrix);\r\n        this.matrixNeedsUpdate = false;\r\n    }\r\n\r\n    get pvMatrix(): ReadonlyMat4 {\r\n        if (this.matrixNeedsUpdate) {\r\n            this.updateMatrix();\r\n        }\r\n        return this._pvMatrix;\r\n    }\r\n\r\n    get invPvMatrix(): ReadonlyMat4 {\r\n        if (this.matrixNeedsUpdate) {\r\n            this.updateMatrix();\r\n        }\r\n        return this._invPvMatrix;\r\n    }\r\n\r\n    get projectionMatrix(): ReadonlyMat4 {\r\n        if (this.matrixNeedsUpdate) {\r\n            this.updateMatrix();\r\n        }\r\n        return this._projectionMatrix;\r\n    }\r\n\r\n    get viewMatrix(): ReadonlyMat4 {\r\n        if (this.matrixNeedsUpdate) {\r\n            this.updateMatrix();\r\n        }\r\n        return this._viewMatrix;\r\n    }\r\n\r\n    get position(): ReadonlyVec3 {\r\n        return this._position;\r\n    }\r\n\r\n    set position(value: ReadonlyVec3) {\r\n        if (vec3.exactEquals(value, this._position)) {\r\n            return;\r\n        }\r\n        this.matrixNeedsUpdate = true;\r\n        this._position.set(value);\r\n    }\r\n\r\n    get target(): ReadonlyVec3 {\r\n        return this._target;\r\n    }\r\n\r\n    set target(value: ReadonlyVec3) {\r\n        if (vec3.exactEquals(value, this._target)) {\r\n            return;\r\n        }\r\n        this.matrixNeedsUpdate = true;\r\n        this._target.set(value);\r\n    }\r\n\r\n    get up(): ReadonlyVec3 {\r\n        return this._up;\r\n    }\r\n\r\n    set up(value: ReadonlyVec3) {\r\n        if (vec3.exactEquals(value, this._up)) {\r\n            return;\r\n        }\r\n        this.matrixNeedsUpdate = true;\r\n        this._up.set(value);\r\n    }\r\n\r\n    get fovYRad(): number {\r\n        return this._fovYRad;\r\n    }\r\n\r\n    set fovYRad(value: number) {\r\n        if (this._fovYRad === value) {\r\n            return;\r\n        }\r\n        this.matrixNeedsUpdate = true;\r\n        this._fovYRad = value;\r\n    }\r\n\r\n    get aspect(): number {\r\n        return this._aspect;\r\n    }\r\n\r\n    set aspect(value: number) {\r\n        if (this._aspect === value) {\r\n            return;\r\n        }\r\n        this.matrixNeedsUpdate = true;\r\n        this._aspect = value;\r\n    }\r\n\r\n    get near(): number {\r\n        return this._near;\r\n    }\r\n\r\n    set near(value: number) {\r\n        if (this._near === value) {\r\n            return;\r\n        }\r\n        this.matrixNeedsUpdate = true;\r\n        this._near = value;\r\n    }\r\n\r\n    get far(): number {\r\n        return this._far;\r\n    }\r\n\r\n    set far(value: number) {\r\n        if (this._far === value) {\r\n            return;\r\n        }\r\n        this.matrixNeedsUpdate = true;\r\n        this._far = value;\r\n    }\r\n\r\n}\r\n","import {quat, ReadonlyMat4, ReadonlyVec3, vec3} from 'gl-matrix';\r\nimport Input from './input/Input';\r\nimport {MouseDragContext3D, raycastViewPlaneDragMove, raycastViewPlaneDragStart} from './input/mouse-drag';\r\nimport Camera3D from './render/camera/Camera3D';\r\nimport OrthographicCamera from './render/camera/OrthographicCamera';\r\nimport PerspectiveCamera from './render/camera/PerspectiveCamera';\r\n\r\nconst CAMERA_ZOOM_IN_STEP = 0.9;\r\nconst CAMERA_ZOOM_MIN = -12;\r\nconst CAMERA_ZOOM_OUT_STEP = 1.2;\r\nconst CAMERA_ZOOM_MAX = 4;\r\n\r\nexport default class DraggableCamera {\r\n\r\n    private viewportWidth: number = 1;\r\n    private viewportHeight: number = 1;\r\n\r\n    private readonly perspectiveCamera: PerspectiveCamera;\r\n    private readonly orthographicCamera: OrthographicCamera;\r\n\r\n    perspective: boolean = true;\r\n    far: number = 2;\r\n    target: vec3 = vec3.fromValues(0, 0, 0);\r\n    rotateX: number = 0;\r\n    rotateY: number = 0;\r\n    zoom: number = 1;\r\n    private position: vec3 = vec3.fromValues(0, 0, 0);\r\n    private orthographicZoomRatio: number = 1.6;\r\n\r\n    private defaultPosition = vec3.fromValues(0, 0, 1);\r\n    private defaultUp = vec3.fromValues(0, 1, 0);\r\n    private up = vec3.fromValues(0, 0, 0);\r\n    private rotationQuat = quat.create();\r\n\r\n    private draggingRotation: boolean = false;\r\n    private draggingPosition: boolean = false;\r\n    private dragStartProjectedMouseX: number = 0;\r\n    private dragStartProjectedMouseY: number = 0;\r\n    private dragStartRotateX = 0;\r\n    private dragStartRotateY = 0;\r\n    private positionDragContext = new MouseDragContext3D();\r\n\r\n    constructor(fovYRad: number = 45 / 180 * Math.PI, near: number = 0.1, far: number = 1000) {\r\n        this.perspectiveCamera = new PerspectiveCamera(fovYRad, 1, near, far);\r\n        this.orthographicCamera = new OrthographicCamera(-1, 1, -1, 1, near, far);\r\n    }\r\n\r\n    screenToView(out: vec3, point: ReadonlyVec3) {\r\n        const camera = this.perspective ? this.perspectiveCamera : this.orthographicCamera;\r\n        camera.screenToView(out, point);\r\n        return out;\r\n    }\r\n\r\n    get pvMatrix(): ReadonlyMat4 {\r\n        const camera = this.perspective ? this.perspectiveCamera : this.orthographicCamera;\r\n        return camera.pvMatrix;\r\n    }\r\n\r\n    get viewMatrix(): ReadonlyMat4 {\r\n        const camera = this.perspective ? this.perspectiveCamera : this.orthographicCamera;\r\n        return camera.viewMatrix;\r\n    }\r\n\r\n    get camera(): Camera3D {\r\n        return this.perspective ? this.perspectiveCamera : this.orthographicCamera;\r\n    }\r\n\r\n    fitViewport(width: number, height: number) {\r\n        this.viewportWidth = width;\r\n        this.viewportHeight = height;\r\n        this.update();\r\n    }\r\n\r\n    update() {\r\n        const camera = this.camera;\r\n        const zoom = this.zoom <= 0 ? CAMERA_ZOOM_IN_STEP ** (-this.zoom) : CAMERA_ZOOM_OUT_STEP ** this.zoom;\r\n        const viewPortZoom = zoom / 25 * (this.perspective ? 1 : this.orthographicZoomRatio);\r\n        camera.fitViewport(this.viewportWidth * viewPortZoom, this.viewportHeight * viewPortZoom);\r\n        vec3.scale(this.position, this.defaultPosition, this.far * zoom * 2);\r\n        quat.fromEuler(this.rotationQuat, this.rotateX, this.rotateY, 0);\r\n        vec3.transformQuat(this.position, this.position, this.rotationQuat);\r\n        vec3.add(this.position, this.position, this.target);\r\n        camera.position = this.position;\r\n        if (this.rotateX === 90 || this.rotateX === -90) {\r\n            vec3.transformQuat(this.up, this.defaultUp, this.rotationQuat);\r\n            camera.up = this.up;\r\n        } else {\r\n            camera.up = this.defaultUp;\r\n        }\r\n        camera.target = this.target;\r\n    }\r\n\r\n    onInput(input: Input) {\r\n        const projectedMouseX = (-this.viewportWidth / 2 + input.mouseX) / this.viewportWidth * 2;\r\n        const projectedMouseY = (+this.viewportHeight / 2 - input.mouseY) / this.viewportHeight * 2;\r\n\r\n        // rotation\r\n        if (input.mouseMiddle) {\r\n            if (this.draggingRotation) {\r\n                const dx = projectedMouseX - this.dragStartProjectedMouseX;\r\n                const dy = projectedMouseY - this.dragStartProjectedMouseY;\r\n                this.rotateX = Math.max(-90, Math.min(90, this.dragStartRotateX + dy * 90));\r\n                this.rotateY = (this.dragStartRotateY - dx * 90) % 360;\r\n            } else {\r\n                this.draggingRotation = true;\r\n                this.dragStartProjectedMouseX = projectedMouseX;\r\n                this.dragStartProjectedMouseY = projectedMouseY;\r\n                this.dragStartRotateX = this.rotateX;\r\n                this.dragStartRotateY = this.rotateY;\r\n            }\r\n        } else {\r\n            this.draggingRotation = false;\r\n        }\r\n\r\n        // position\r\n        if (input.mouseRight) {\r\n            if (this.draggingPosition) {\r\n                if (raycastViewPlaneDragMove(\r\n                    this.positionDragContext,\r\n                    projectedMouseX, projectedMouseY,\r\n                    this.camera\r\n                )) {\r\n                    vec3.sub(this.target, this.positionDragContext.dragStartTargetPosition, this.positionDragContext.offset);\r\n                }\r\n            } else if (!this.draggingRotation) {\r\n                this.draggingPosition = true;\r\n                raycastViewPlaneDragStart(\r\n                    this.positionDragContext,\r\n                    projectedMouseX, projectedMouseY,\r\n                    this.target[0], this.target[1], this.target[2],\r\n                    this.camera\r\n                );\r\n            }\r\n        } else {\r\n            this.draggingPosition = false;\r\n        }\r\n\r\n        // zoom\r\n        if (input.wheelDetY) {\r\n            this.zoom = Math.max(CAMERA_ZOOM_MIN, Math.min(CAMERA_ZOOM_MAX, this.zoom + input.wheelDetY));\r\n        }\r\n\r\n        this.update();\r\n    }\r\n\r\n}","export const enum MouseButton {\r\n    LEFT, MIDDLE, RIGHT\r\n}","import {MouseButton} from './MouseButton';\r\n\r\nexport default class Input {\r\n\r\n    callback?: (input: Input) => void;\r\n    private needsUpdate: boolean = false;\r\n\r\n    mouseOver: boolean = false;\r\n    mouseX: number = 0;\r\n    mouseY: number = 0;\r\n    mouseLeft: boolean = false;\r\n    mouseLeftDownThisFrame: boolean = false;\r\n    mouseRight: boolean = false;\r\n    mouseRightDownThisFrame: boolean = false;\r\n    mouseMiddle: boolean = false;\r\n    mouseMiddleDownThisFrame: boolean = false;\r\n    wheelDetX: number = 0;\r\n    wheelDetY: number = 0;\r\n\r\n    private readonly onContextmenu: (e: MouseEvent) => void;\r\n    private readonly onMouseMove: (e: MouseEvent) => void;\r\n    private readonly onMouseDown: (e: MouseEvent) => void;\r\n    private readonly onMouseUp: (e: MouseEvent) => void;\r\n    private readonly onMouseLeave: () => void;\r\n    private readonly onMouseOut: (e: MouseEvent) => void;\r\n    private readonly onWheel: (e: WheelEvent) => void;\r\n    private readonly onKeyDown: (e: KeyboardEvent) => void;\r\n    private readonly onKeyUp: (e: KeyboardEvent) => void;\r\n    private readonly onBlur: () => void;\r\n\r\n    private readonly keyMap: Map<string, number> = new Map();\r\n\r\n    private timestamp: number = 0;\r\n\r\n    constructor() {\r\n        this.onContextmenu = (e: MouseEvent) => {\r\n            e.preventDefault();\r\n        };\r\n        this.onMouseMove = (e: MouseEvent) => {\r\n            this.mouseOver = true;\r\n            this.mouseX = e.offsetX;\r\n            this.mouseY = e.offsetY;\r\n            this.triggerCallback();\r\n        };\r\n        this.onMouseDown = (e: MouseEvent) => {\r\n            switch (e.button) {\r\n                case MouseButton.LEFT:\r\n                    this.mouseLeft = true;\r\n                    this.mouseLeftDownThisFrame = true;\r\n                    break;\r\n                case MouseButton.MIDDLE:\r\n                    this.mouseMiddle = true;\r\n                    this.mouseMiddleDownThisFrame = true;\r\n                    break;\r\n                case MouseButton.RIGHT:\r\n                    this.mouseRight = true;\r\n                    this.mouseRightDownThisFrame = true;\r\n                    break;\r\n            }\r\n            this.triggerCallback();\r\n        };\r\n        this.onMouseUp = (e: MouseEvent) => {\r\n            switch (e.button) {\r\n                case MouseButton.LEFT:\r\n                    this.mouseLeft = false;\r\n                    this.mouseLeftDownThisFrame = false;\r\n                    break;\r\n                case MouseButton.MIDDLE:\r\n                    this.mouseMiddle = false;\r\n                    this.mouseMiddleDownThisFrame = false;\r\n                    break;\r\n                case MouseButton.RIGHT:\r\n                    this.mouseRight = false;\r\n                    this.mouseLeftDownThisFrame = false;\r\n                    break;\r\n            }\r\n            this.triggerCallback();\r\n        };\r\n        this.onMouseLeave = () => {\r\n            this.mouseOver = false;\r\n            this.triggerCallback();\r\n        };\r\n        this.onMouseOut = (e) => {\r\n            if (e.clientY <= 0 || e.clientX <= 0 || (e.clientX >= window.innerWidth || e.clientY >= window.innerHeight)) {\r\n                this.mouseLeft = false;\r\n                this.mouseLeftDownThisFrame = false;\r\n                this.mouseRight = false;\r\n                this.mouseLeftDownThisFrame = false;\r\n            }\r\n            this.triggerCallback();\r\n        };\r\n        this.onWheel = (e: WheelEvent) => {\r\n            e.preventDefault();\r\n            this.wheelDetX += Math.round(e.deltaX / 100);\r\n            this.wheelDetY += Math.round(e.deltaY / 100);\r\n            this.triggerCallback();\r\n        };\r\n        this.onKeyDown = (e: KeyboardEvent) => {\r\n            const target = e.target;\r\n            if (target && 'tagName' in target && (target as HTMLElement).tagName === 'INPUT') {\r\n                return;\r\n            }\r\n            if (e.ctrlKey) {\r\n                e.preventDefault();\r\n            }\r\n            this.keyMap.set(e.key, this.timestamp);\r\n            this.triggerCallback();\r\n        };\r\n        this.onKeyUp = (e: KeyboardEvent) => {\r\n            const target = e.target;\r\n            if (target && 'tagName' in target && (target as HTMLElement).tagName === 'INPUT') {\r\n                return;\r\n            }\r\n            this.keyMap.delete(e.key);\r\n            this.triggerCallback();\r\n        };\r\n        this.onBlur = () => {\r\n            this.keyMap.clear();\r\n            this.triggerCallback();\r\n        };\r\n    }\r\n\r\n    setup(element: HTMLElement) {\r\n        element.addEventListener('contextmenu', this.onContextmenu);\r\n        element.addEventListener('mousemove', this.onMouseMove);\r\n        element.addEventListener('mousedown', this.onMouseDown);\r\n        element.addEventListener('mouseleave', this.onMouseLeave);\r\n        document.addEventListener('mouseup', this.onMouseUp);\r\n        document.addEventListener('mouseout', this.onMouseOut);\r\n        element.addEventListener('wheel', this.onWheel);\r\n        window.addEventListener('keydown', this.onKeyDown);\r\n        window.addEventListener('keyup', this.onKeyUp);\r\n        window.addEventListener('blur', this.onBlur);\r\n    }\r\n\r\n    unload(element: HTMLElement) {\r\n        element.removeEventListener('contextmenu', this.onContextmenu);\r\n        element.removeEventListener('mousemove', this.onMouseMove);\r\n        element.removeEventListener('mousedown', this.onMouseDown);\r\n        element.removeEventListener('mouseleave', this.onMouseLeave);\r\n        document.removeEventListener('mouseup', this.onMouseUp);\r\n        document.removeEventListener('mouseout', this.onMouseOut);\r\n        element.removeEventListener('wheel', this.onWheel);\r\n        window.removeEventListener('keydown', this.onKeyDown);\r\n        window.removeEventListener('keyup', this.onKeyUp);\r\n        window.removeEventListener('blur', this.onBlur);\r\n    }\r\n\r\n    update() {\r\n        this.mouseLeftDownThisFrame = false;\r\n        this.mouseRightDownThisFrame = false;\r\n        this.mouseMiddleDownThisFrame = false;\r\n        this.wheelDetX = 0;\r\n        this.wheelDetY = 0;\r\n        this.timestamp += 1;\r\n    }\r\n\r\n    isKeyPressed(key: string): boolean {\r\n        return this.keyMap.has(key);\r\n    }\r\n\r\n    isKeyPressedThisFrame(key: string): boolean {\r\n        return this.keyMap.get(key) === this.timestamp;\r\n    }\r\n\r\n    private triggerCallback() {\r\n        this.needsUpdate = true;\r\n        requestAnimationFrame(() => {\r\n            if (!this.needsUpdate) {\r\n                return;\r\n            }\r\n            this.needsUpdate = false;\r\n            this.callback && this.callback(this);\r\n            this.update();\r\n        });\r\n    }\r\n\r\n}\r\n","export function isPointInCircle(px: number, py: number, cx: number, cy: number, radius: number): boolean {\r\n    return (px - cx) ** 2 + (py - cy) ** 2 <= radius ** 2;\r\n}\r\n\r\nexport function isPointInTriangle(\r\n    x: number,\r\n    y: number,\r\n    ax: number,\r\n    ay: number,\r\n    bx: number,\r\n    by: number,\r\n    cx: number,\r\n    cy: number\r\n): boolean {\r\n    const v0x = cx - ax;\r\n    const v0y = cy - ay;\r\n    const v1x = cx - bx;\r\n    const v1y = cy - by;\r\n    const v2x = cx - x;\r\n    const v2y = cy - y;\r\n    const d00 = v0x * v0x + v0y * v0y;\r\n    const d01 = v0x * v1x + v0y * v1y;\r\n    const d02 = v0x * v2x + v0y * v2y;\r\n    const d11 = v1x * v1x + v1y * v1y;\r\n    const d12 = v1x * v2x + v1y * v2y;\r\n    const inv = 1 / (d00 * d11 - d01 * d01);\r\n    const u = (d11 * d02 - d01 * d12) * inv;\r\n    const v = (d00 * d12 - d01 * d02) * inv;\r\n    if (u < 0 || u > 1 || v < 0 || v > 1) {\r\n        return false;\r\n    }\r\n    return u + v <= 1;\r\n}\r\n\r\nexport function isCircleInRect(\r\n    cx: number,\r\n    cy: number,\r\n    radius: number,\r\n    x0: number,\r\n    y0: number,\r\n    x1: number,\r\n    y1: number\r\n): boolean {\r\n    if (x0 > x1) {\r\n        [x0, x1] = [x1, x0];\r\n    }\r\n    if (y0 > y1) {\r\n        [y0, y1] = [y1, y0];\r\n    }\r\n    return !(\r\n        cx + radius < x0\r\n        || cx - radius > x1\r\n        || cy + radius < y0\r\n        || cy - radius > y1\r\n    );\r\n}","export const A_POSITION = 'a_position';\r\nexport const A_TEX_COORD = 'a_texCoord';\r\nexport const A_COLOR = 'a_color';\r\n\r\nexport const U_TEXTURE = 'u_texture';\r\n","import Texture from './Texture';\r\n\r\nexport default class FrameBuffer {\r\n\r\n    glFrameBuffer?: WebGLFramebuffer;\r\n    textures: Texture[] = [];\r\n    depthTexture?: Texture;\r\n    stencilTexture?: Texture;\r\n\r\n    constructor(glFrameBuffer: WebGLFramebuffer) {\r\n        this.glFrameBuffer = glFrameBuffer;\r\n    }\r\n\r\n    get texture(): Texture | undefined {\r\n        return this.textures[0];\r\n    }\r\n\r\n}\r\n","export default class Texture {\r\n    glTexture?: WebGLTexture;\r\n\r\n    level: GLint;\r\n    internalFormat: GLint;\r\n    width: number;\r\n    height: number;\r\n    border: GLint;\r\n    format: GLenum;\r\n    type: GLenum;\r\n\r\n    flipY: boolean = false;\r\n    image?: HTMLImageElement;\r\n\r\n    constructor(glTexture: WebGLTexture,\r\n                level: number,\r\n                internalformat: number,\r\n                width: number,\r\n                height: number,\r\n                border: number,\r\n                format: number,\r\n                type: number\r\n    ) {\r\n        this.glTexture = glTexture;\r\n        this.level = level;\r\n        this.internalFormat = internalformat;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.border = border;\r\n        this.format = format;\r\n        this.type = type;\r\n    }\r\n\r\n}\r\n","import Texture from './Texture';\r\n\r\nexport default function getUniformSetter(\r\n    gl: WebGL2RenderingContext,\r\n    name: string,\r\n    size: GLint,\r\n    type: GLenum,\r\n    location: WebGLUniformLocation,\r\n    samplerCounter: { count: number }\r\n): (val: any) => void {\r\n    if (name.substr(-3) === '[0]') {\r\n        switch (type) {\r\n            case gl.FLOAT:\r\n                return function (val: Float32List) {\r\n                    gl.uniform1fv(location, val);\r\n                };\r\n            case gl.INT:\r\n                return function (val: Int32List) {\r\n                    gl.uniform1iv(location, val);\r\n                };\r\n            case gl.UNSIGNED_INT:\r\n                return function (val: Uint32List) {\r\n                    gl.uniform1uiv(location, val);\r\n                };\r\n            case gl.SAMPLER_2D:\r\n                const units = new Int32Array(size);\r\n                for (let ii = 0; ii < size; ++ii) {\r\n                    units[ii] = samplerCounter.count++;\r\n                }\r\n                return function (textures: (WebGLTexture | Texture | null | undefined)[]) {\r\n                    gl.uniform1iv(location, units);\r\n                    for (let ii = 0; ii < size; ++ii) {\r\n                        let texture = textures[ii];\r\n                        if (texture instanceof Texture) {\r\n                            texture = texture.glTexture;\r\n                        }\r\n                        gl.activeTexture(gl.TEXTURE0 + units[ii]);\r\n                        gl.bindTexture(gl.TEXTURE_2D, texture || null);\r\n                    }\r\n                };\r\n            default:\r\n                throw new Error(`Unimplemented setter type (uniform: ${name}, type: ${type})`);\r\n        }\r\n    }\r\n    switch (type) {\r\n        case gl.FLOAT:\r\n            return function (val: GLfloat) {\r\n                gl.uniform1f(location, val);\r\n            };\r\n        case gl.FLOAT_VEC2:\r\n            return function (val: Float32List) {\r\n                gl.uniform2fv(location, val);\r\n            };\r\n        case gl.FLOAT_VEC3:\r\n            return function (val: Float32List) {\r\n                gl.uniform3fv(location, val);\r\n            };\r\n        case gl.FLOAT_VEC4:\r\n            return function (val: Float32List) {\r\n                gl.uniform4fv(location, val);\r\n            };\r\n        case gl.BOOL:\r\n        case gl.INT:\r\n            return function (val: GLint) {\r\n                gl.uniform1i(location, val);\r\n            };\r\n        case gl.BOOL_VEC2:\r\n        case gl.INT_VEC2:\r\n            return function (val: Int32List) {\r\n                gl.uniform2iv(location, val);\r\n            };\r\n        case gl.BOOL_VEC3:\r\n        case gl.INT_VEC3:\r\n            return function (val: Int32List) {\r\n                gl.uniform3iv(location, val);\r\n            };\r\n        case gl.BOOL_VEC4:\r\n        case gl.INT_VEC4:\r\n            return function (val: Int32List) {\r\n                gl.uniform4iv(location, val);\r\n            };\r\n        case gl.FLOAT_MAT2:\r\n            return function (val: Float32List) {\r\n                gl.uniformMatrix2fv(location, false, val);\r\n            };\r\n        case gl.FLOAT_MAT3:\r\n            return function (val: Float32List) {\r\n                gl.uniformMatrix3fv(location, false, val);\r\n            };\r\n        case gl.FLOAT_MAT4:\r\n            return function (val: Float32List) {\r\n                gl.uniformMatrix4fv(location, false, val);\r\n            };\r\n        case gl.SAMPLER_2D:\r\n            const ii = samplerCounter.count++;\r\n            return function (val: WebGLTexture | Texture | null | undefined) {\r\n                if (val instanceof Texture) {\r\n                    val = val.glTexture;\r\n                }\r\n                gl.uniform1i(location, ii);\r\n                gl.activeTexture(gl.TEXTURE0 + ii);\r\n                gl.bindTexture(gl.TEXTURE_2D, val || null);\r\n            };\r\n        default:\r\n            throw new Error(`Unimplemented setter type (uniform: ${name}, type: ${type})`);\r\n    }\r\n}\r\n","class AttributeInfo {\r\n    name: string;\r\n    size: GLint;\r\n    type: GLenum;\r\n    location: GLint;\r\n\r\n    constructor(name: string, size: GLint, type: GLenum, location: GLint) {\r\n        this.name = name;\r\n        this.size = size;\r\n        this.type = type;\r\n        this.location = location;\r\n    }\r\n}\r\n\r\nclass UniformInfo {\r\n    name: string;\r\n    size: GLint;\r\n    type: GLenum;\r\n    location: WebGLUniformLocation;\r\n    setter: (val: any) => void;\r\n\r\n    constructor(name: string, size: GLint, type: GLenum, location: WebGLUniformLocation, setter: (val: any) => void) {\r\n        this.name = name;\r\n        this.size = size;\r\n        this.type = type;\r\n        this.location = location;\r\n        this.setter = setter;\r\n    }\r\n}\r\n\r\nexport default class Shader {\r\n    vertShader?: WebGLShader;\r\n    fragShader?: WebGLShader;\r\n    program?: WebGLProgram;\r\n\r\n    attributes: { [name: string]: AttributeInfo } = {};\r\n    uniforms: { [name: string]: UniformInfo } = {};\r\n\r\n    constructor(vertShader: WebGLShader, fragShader: WebGLShader, program: WebGLProgram) {\r\n        this.vertShader = vertShader;\r\n        this.fragShader = fragShader;\r\n        this.program = program;\r\n    }\r\n\r\n    registerAttribute(name: string, size: GLint, type: GLenum, location: GLint) {\r\n        this.attributes[name] = new AttributeInfo(name, size, type, location);\r\n    }\r\n\r\n    registerUniform(name: string, size: GLint, type: GLenum, location: WebGLUniformLocation, setter: (val: any) => void) {\r\n        if (name.endsWith('[0]')) {\r\n            name = name.substr(0, name.length - '[0]'.length);\r\n        }\r\n        this.uniforms[name] = new UniformInfo(name, size, type, location, setter);\r\n    }\r\n}\r\n","import {A_COLOR, A_POSITION, A_TEX_COORD, U_TEXTURE} from './constants';\r\nimport FrameBuffer from './FrameBuffer';\r\nimport Geometry from './Geometry';\r\nimport getUniformSetter from './get-uniform-setter';\r\nimport Label from './Label';\r\nimport Shader from './Shader';\r\nimport color2dFrag from './shaders/color-2d.frag';\r\nimport color2dVert from './shaders/color-2d.vert';\r\nimport image2dFrag from './shaders/image-2d.frag';\r\nimport image2dVert from './shaders/image-2d.vert';\r\nimport Texture from './Texture';\r\n\r\nenum Side {\r\n    NONE, FRONT, BACK\r\n}\r\n\r\nenum BatchType {\r\n    MESH, LINES\r\n}\r\n\r\nenum BlendMode {\r\n    OVERLAP, LIGHT, PIGMENT\r\n}\r\n\r\ninterface RendererState {\r\n    /** Viewport width. */\r\n    width: number;\r\n    /** Viewport height. */\r\n    height: number;\r\n    /** 2D draw color. */\r\n    color: { r: number, g: number, b: number, a: number };\r\n    /** 2D camera x. */\r\n    cameraX: number;\r\n    /** 2D camera y. */\r\n    cameraY: number;\r\n    /** 2D camera zoom. */\r\n    zoom: number;\r\n    blendMode: BlendMode;\r\n}\r\n\r\nexport default class Renderer {\r\n\r\n    private static _sharedInstance?: Renderer;\r\n\r\n    static sharedInstance(): Renderer {\r\n        if (!Renderer._sharedInstance) {\r\n            Renderer._sharedInstance = new Renderer();\r\n        }\r\n        return Renderer._sharedInstance;\r\n    }\r\n\r\n    readonly SIDE_NONE = Side.NONE;\r\n    readonly SIDE_FRONT = Side.FRONT;\r\n    readonly SIDE_BACK = Side.BACK;\r\n\r\n    readonly BLEND_MODE_OVERLAP = BlendMode.OVERLAP;\r\n    readonly BLEND_MODE_LIGHT = BlendMode.LIGHT;\r\n    readonly BLEND_MODE_PIGMENT = BlendMode.PIGMENT;\r\n\r\n    readonly canvas: HTMLCanvasElement;\r\n    readonly gl: WebGL2RenderingContext;\r\n    attribLocations?: { [name: string]: number };\r\n\r\n    /** An 1x1 0xfff pixel. */\r\n    readonly BLANK_WHITE: Texture;\r\n    readonly IMAGE_2D_SHADER: Shader;\r\n    readonly COLOR_2D_SHADER: Shader;\r\n\r\n    private currentShader?: Shader;\r\n    private readonly frameBufferStack: FrameBuffer[] = [];\r\n    private currentFrameBuffer?: FrameBuffer;\r\n\r\n    private readonly batchSize: number;\r\n    private readonly batchPositionVertices: Float32Array;\r\n    private readonly batchTexCoordVertices: Float32Array;\r\n    private readonly batchColorVertices: Float32Array;\r\n    private readonly batchPositionBuffer: WebGLBuffer;\r\n    private readonly batchTexCoordBuffer: WebGLBuffer;\r\n    private readonly batchColorBuffer: WebGLBuffer;\r\n    private batchType: BatchType = BatchType.MESH;\r\n    private batchTexture?: Texture;\r\n    private batchIndex: number = 0;\r\n    private drawing2D: boolean = false;\r\n\r\n    public state: RendererState = {\r\n        width: 0,\r\n        height: 0,\r\n        color: {r: 1, g: 1, b: 1, a: 1},\r\n        cameraX: 0,\r\n        cameraY: 0,\r\n        zoom: 1,\r\n        blendMode: BlendMode.OVERLAP\r\n    };\r\n    private stateStack: RendererState[] = [];\r\n\r\n    constructor(target?: HTMLCanvasElement | WebGL2RenderingContext, batchSize: number = 2000) {\r\n        let canvas: HTMLCanvasElement;\r\n        let gl: WebGL2RenderingContext | null = null;\r\n        if (!target) {\r\n            canvas = document.createElement('canvas');\r\n        } else {\r\n            if (target instanceof HTMLCanvasElement) {\r\n                canvas = target;\r\n            } else {\r\n                canvas = target.canvas as HTMLCanvasElement;\r\n                gl = target;\r\n            }\r\n        }\r\n        if (!gl) {\r\n            gl = canvas.getContext('webgl2',\r\n                {\r\n                    alpha: true,\r\n                    antialias: false,\r\n                    depth: true,\r\n                    premultipliedAlpha: false,\r\n                    preserveDrawingBuffer: false,\r\n                    stencil: false\r\n                }\r\n            );\r\n            if (!gl) {\r\n                throw new Error('Failed to create WebGL2 rendering context');\r\n            }\r\n        }\r\n        this.canvas = canvas;\r\n        this.gl = gl;\r\n        this.state.width = canvas.width;\r\n        this.state.height = canvas.height;\r\n        gl.viewport(0, 0, this.state.width, this.state.height);\r\n        gl.enable(gl.BLEND);\r\n\r\n        this.BLANK_WHITE = this.createTextureFromRgbaPixels(1, 1, new Uint8Array([0xff, 0xff, 0xff, 0xff]));\r\n\r\n        this.IMAGE_2D_SHADER = this.createShader(image2dVert, image2dFrag);\r\n        this.COLOR_2D_SHADER = this.createShader(color2dVert, color2dFrag);\r\n\r\n        this.batchSize = batchSize;\r\n        this.batchPositionVertices = new Float32Array(batchSize * 3 * 2 * 2);\r\n        this.batchPositionBuffer = this.createDynamicDrawBuffer(this.batchPositionVertices);\r\n        this.batchTexCoordVertices = new Float32Array(batchSize * 3 * 2 * 2);\r\n        this.batchTexCoordBuffer = this.createDynamicDrawBuffer(this.batchTexCoordVertices);\r\n        this.batchColorVertices = new Float32Array(batchSize * 3 * 2 * 4);\r\n        this.batchColorBuffer = this.createDynamicDrawBuffer(this.batchColorVertices);\r\n    }\r\n\r\n    copyTo(\r\n        ctx: CanvasRenderingContext2D,\r\n        dx: number = 0,\r\n        dy: number = 0,\r\n        dw: number = this.state.width,\r\n        dh: number = this.state.height,\r\n        sx: number = 0,\r\n        sy: number = 0,\r\n        sw: number = this.state.width,\r\n        sh: number = this.state.height\r\n    ) {\r\n        ctx.drawImage(this.canvas, sx, sy, sw, sh, dx, dy, dw, dh);\r\n    }\r\n\r\n    viewport(width: number, height: number) {\r\n        this.state.width = width;\r\n        this.state.height = height;\r\n        this.gl.viewport(0, 0, this.state.width, this.state.height);\r\n    }\r\n\r\n    resizeCanvas(width: number, height: number) {\r\n        if (this.canvas.width !== width || this.canvas.height !== height) {\r\n            this.canvas.width = width;\r\n            this.canvas.height = height;\r\n        }\r\n        this.viewport(width, height);\r\n    }\r\n\r\n    clearColor(r: number = 0, g: number = 0, b: number = 0, a: number = 0) {\r\n        const gl = this.gl;\r\n        gl.clearColor(r, g, b, a);\r\n    }\r\n\r\n    clear(color: boolean, depth: boolean, stencil: boolean) {\r\n        this.flush2D();\r\n        this.switchFrameBuffer();\r\n        const gl = this.gl;\r\n        let mask = 0;\r\n        if (color) {\r\n            mask |= gl.COLOR_BUFFER_BIT;\r\n        }\r\n        if (depth) {\r\n            mask |= gl.DEPTH_BUFFER_BIT;\r\n        }\r\n        if (stencil) {\r\n            mask |= gl.STENCIL_BUFFER_BIT;\r\n        }\r\n        gl.clear(mask);\r\n    }\r\n\r\n    depthTest(enabled: boolean) {\r\n        const gl = this.gl;\r\n        if (enabled) {\r\n            gl.enable(gl.DEPTH_TEST);\r\n            gl.depthFunc(gl.LEQUAL);\r\n        } else {\r\n            gl.disable(gl.DEPTH_TEST);\r\n        }\r\n    }\r\n\r\n    depthMask(enabled: boolean) {\r\n        this.gl.depthMask(enabled);\r\n    }\r\n\r\n    cullFace(side: Side) {\r\n        const gl = this.gl;\r\n        switch (side) {\r\n            case Side.NONE:\r\n                gl.disable(gl.CULL_FACE);\r\n                break;\r\n            case Side.FRONT:\r\n                gl.enable(gl.CULL_FACE);\r\n                gl.cullFace(gl.FRONT);\r\n                break;\r\n            case Side.BACK:\r\n                gl.enable(gl.CULL_FACE);\r\n                gl.cullFace(gl.BACK);\r\n                break;\r\n        }\r\n    }\r\n\r\n    blendMode(blendMode: BlendMode) {\r\n        if (blendMode === this.state.blendMode) {\r\n            return;\r\n        }\r\n        this.state.blendMode = blendMode;\r\n        this.flush2D();\r\n        const gl = this.gl;\r\n        switch (blendMode) {\r\n            case BlendMode.OVERLAP:\r\n                gl.blendEquation(gl.FUNC_ADD);\r\n                gl.blendFunc(gl.ONE, gl.ZERO);\r\n                break;\r\n            case BlendMode.LIGHT:\r\n                gl.blendEquation(gl.FUNC_ADD);\r\n                gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\r\n                break;\r\n            case BlendMode.PIGMENT: {\r\n                gl.blendEquationSeparate(gl.FUNC_ADD, gl.MAX);\r\n                gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n            }\r\n                break;\r\n        }\r\n    }\r\n\r\n    useShader(shader?: Shader) {\r\n        if (shader !== this.currentShader) {\r\n            this.flush2D();\r\n            this.currentShader = shader;\r\n            if (shader) {\r\n                const gl = this.gl;\r\n                gl.useProgram(shader.program!);\r\n            }\r\n        }\r\n    }\r\n\r\n    uniform(name: string, value: any) {\r\n        const shader = this.currentShader;\r\n        if (!shader) {\r\n            return;\r\n        }\r\n        this.flush2D();\r\n        const uniform = shader.uniforms[name];\r\n        uniform?.setter(value);\r\n    }\r\n\r\n    save() {\r\n        if (this.stateStack.length > 999) {\r\n            throw new Error('State stack has reach a max size of 999');\r\n        }\r\n        const state = this.state;\r\n        const color = state.color;\r\n        this.stateStack.push({\r\n            width: state.width,\r\n            height: state.height,\r\n            color: {r: color.r, g: color.g, b: color.b, a: color.a},\r\n            cameraX: state.cameraX,\r\n            cameraY: state.cameraY,\r\n            zoom: state.zoom,\r\n            blendMode: state.blendMode\r\n        });\r\n    }\r\n\r\n    restore() {\r\n        const state = this.stateStack.pop();\r\n        if (!state) {\r\n            throw new Error('State stack is empty');\r\n        }\r\n        this.state.color.r = state.color.r;\r\n        this.state.color.g = state.color.g;\r\n        this.state.color.b = state.color.b;\r\n        this.state.color.a = state.color.a;\r\n        this.state.cameraX = state.cameraX;\r\n        this.state.cameraY = state.cameraY;\r\n        this.state.zoom = state.zoom;\r\n        this.viewport(state.width, state.height);\r\n        this.blendMode(state.blendMode);\r\n    }\r\n\r\n    private createDynamicDrawBuffer(vertices: Float32Array) {\r\n        const gl = this.gl;\r\n        const buffer = gl.createBuffer();\r\n        if (!buffer) {\r\n            throw new Error('Failed to create WebGL buffer');\r\n        }\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.DYNAMIC_DRAW);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n        return buffer;\r\n    }\r\n\r\n    private createVBO(vertices: Float32Array) {\r\n        const gl = this.gl;\r\n        const vbo = gl.createBuffer();\r\n        if (!vbo) {\r\n            throw new Error('Failed to create WebGL buffer');\r\n        }\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, vbo);\r\n        gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n        return vbo;\r\n    }\r\n\r\n    private createIBO(indices: number[]) {\r\n        const gl = this.gl;\r\n        const ibo = gl.createBuffer();\r\n        if (!ibo) {\r\n            throw new Error('Failed to create WebGL buffer');\r\n        }\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibo);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n        return ibo;\r\n    }\r\n\r\n    private bindVertexArrayAttribute(\r\n        location: GLint,\r\n        buffer: WebGLBuffer,\r\n        componentSize: GLint = 4,\r\n        type: GLenum = this.gl.FLOAT,\r\n        normalized: GLboolean = false,\r\n        stride: GLsizei = 0,\r\n        offset: GLintptr = 0\r\n    ) {\r\n        const gl = this.gl;\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n        gl.enableVertexAttribArray(location);\r\n        gl.vertexAttribPointer(location, componentSize, type, normalized, stride, offset);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n    }\r\n\r\n    // ====================== texture ======================\r\n\r\n    createEmptyTexture(width: number = this.state.width, height: number = this.state.height, flipY: boolean = false): Texture {\r\n        if (width < 0 || height < 0) {\r\n            throw new Error('Negative width/height');\r\n        }\r\n        const gl = this.gl;\r\n        const texture = gl.createTexture();\r\n        if (!texture) {\r\n            throw new Error('Failed to create WebGL texture');\r\n        }\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n        const ret = new Texture(texture, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE);\r\n        ret.flipY = flipY;\r\n        return ret;\r\n    }\r\n\r\n    createTexture(image: TexImageSource): Texture {\r\n        const texture = this.createEmptyTexture(image.width, image.height);\r\n        const gl = this.gl;\r\n        gl.bindTexture(gl.TEXTURE_2D, texture.glTexture!);\r\n        gl.texImage2D(gl.TEXTURE_2D, texture.level, texture.internalFormat, texture.format, texture.type, image);\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n        return texture;\r\n    }\r\n\r\n    createTextureFromImageUrl(url: string): Promise<Texture> {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                const image = new Image();\r\n                image.onload = () => {\r\n                    try {\r\n                        const texture = this.createTexture(image);\r\n                        texture.image = image;\r\n                        resolve(texture);\r\n                    } catch (e) {\r\n                        reject(e);\r\n                    }\r\n                };\r\n                image.onabort = image.onerror = (e: string | Event) => {\r\n                    reject(e);\r\n                };\r\n                image.src = url;\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    createDepthTexture(width: number = this.state.width, height: number = this.state.height) {\r\n        if (width < 0 || height < 0) {\r\n            throw new Error('Negative width/height');\r\n        }\r\n        const gl = this.gl;\r\n        const texture = gl.createTexture();\r\n        if (!texture) {\r\n            throw new Error('Failed to create WebGL texture');\r\n        }\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.DEPTH_COMPONENT32F, width, height, 0, gl.DEPTH_COMPONENT, gl.FLOAT, null);\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n        return new Texture(texture, 0, gl.DEPTH_COMPONENT32F, width, height, 0, gl.DEPTH_COMPONENT, gl.FLOAT);\r\n    }\r\n\r\n    createTextureFromRgbaPixels(width: number, height: number, pixels: ArrayBufferView) {\r\n        const texture = this.createEmptyTexture(width, height);\r\n        const gl = this.gl;\r\n        gl.bindTexture(gl.TEXTURE_2D, texture.glTexture!);\r\n        gl.texImage2D(gl.TEXTURE_2D, texture.level, texture.internalFormat, width, height, texture.border, texture.format, texture.type, pixels);\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n        return texture;\r\n    }\r\n\r\n    setTextureFromPixels(texture: Texture, width: number, height: number, pixels: ArrayBufferView) {\r\n        const gl = this.gl;\r\n        if (!texture.glTexture) {\r\n            throw new Error('Texture has been deleted');\r\n        }\r\n        gl.bindTexture(gl.TEXTURE_2D, texture.glTexture);\r\n        gl.texImage2D(gl.TEXTURE_2D, texture.level, texture.internalFormat, width, height, texture.border, texture.format, texture.type, pixels);\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n        texture.width = width;\r\n        texture.height = height;\r\n    }\r\n\r\n    deleteTexture(texture: Texture) {\r\n        if (texture.glTexture) {\r\n            this.gl.deleteTexture(texture.glTexture);\r\n            texture.glTexture = undefined;\r\n        }\r\n        texture.width = 0;\r\n        texture.height = 0;\r\n    }\r\n\r\n    resizeTexture(texture: Texture,\r\n                  width: number = this.state.width,\r\n                  height: number = this.state.height,\r\n                  recreate: boolean = false\r\n    ) {\r\n        if (width < 0 || height < 0) {\r\n            throw new Error('Negative width/height');\r\n        }\r\n        if (texture.width === width && texture.height === height) {\r\n            return;\r\n        }\r\n        const gl = this.gl;\r\n        if (!texture.glTexture) {\r\n            throw new Error('Texture has been deleted');\r\n        }\r\n        gl.bindTexture(gl.TEXTURE_2D, texture.glTexture);\r\n        gl.texImage2D(gl.TEXTURE_2D, texture.level, texture.internalFormat, width, height, texture.border, texture.format, texture.type, null);\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n        texture.width = width;\r\n        texture.height = height;\r\n    }\r\n\r\n    // ====================== shader ======================\r\n\r\n    private createGlShader(src: string, type: GLenum): WebGLShader {\r\n        const gl = this.gl;\r\n        const shader = gl.createShader(type);\r\n        if (!shader) {\r\n            throw new Error('Failed to create WebGL shader');\r\n        }\r\n        gl.shaderSource(shader, src);\r\n        gl.compileShader(shader);\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            throw new Error('Failed to compile WebGL shader:\\n\\n' + gl.getShaderInfoLog(shader));\r\n        }\r\n        return shader;\r\n    }\r\n\r\n    createShader(vertSrc: string, fragSrc: string): Shader {\r\n        const gl = this.gl;\r\n        const vertShader = this.createGlShader(vertSrc, gl.VERTEX_SHADER);\r\n        const fragShader = this.createGlShader(fragSrc, gl.FRAGMENT_SHADER);\r\n        const program = gl.createProgram();\r\n        if (!program) {\r\n            throw new Error('Failed to create WebGL program');\r\n        }\r\n        gl.attachShader(program, vertShader);\r\n        gl.attachShader(program, fragShader);\r\n        const attribLocations = this.attribLocations;\r\n        if (attribLocations) {\r\n            for (let attrName in attribLocations) {\r\n                if (attribLocations.hasOwnProperty(attrName)) {\r\n                    gl.bindAttribLocation(program, attribLocations[attrName], attrName);\r\n                }\r\n            }\r\n        }\r\n        gl.linkProgram(program);\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            throw new Error('Failed to link WebGL program:\\n\\n' + gl.getProgramInfoLog(program));\r\n        }\r\n\r\n        const shader = new Shader(vertShader, fragShader, program);\r\n\r\n        const numOfAttrs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\r\n        for (let i = 0; i < numOfAttrs; ++i) {\r\n            const info = gl.getActiveAttrib(program, i);\r\n            if (!info) {\r\n                throw new Error('Failed to get WebGL attribute info');\r\n            }\r\n            const location = gl.getAttribLocation(program, info.name);\r\n            shader.registerAttribute(info.name, info.size, info.type, location);\r\n        }\r\n\r\n        const numOfUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\r\n        const samplerCounter = {count: 0};\r\n        for (let i = 0; i < numOfUniforms; ++i) {\r\n            const info = gl.getActiveUniform(program, i);\r\n            if (!info) {\r\n                throw new Error('Failed to get WebGL uniform info');\r\n            }\r\n            const location = gl.getUniformLocation(program, info.name);\r\n            if (location == null) {\r\n                throw new Error('Failed to get uniform location');\r\n            }\r\n            shader.registerUniform(\r\n                info.name,\r\n                info.size,\r\n                info.type,\r\n                location,\r\n                getUniformSetter(gl, info.name, info.size, info.type, location, samplerCounter)\r\n            );\r\n        }\r\n\r\n        return shader;\r\n    }\r\n\r\n    deleteShader(shader: Shader) {\r\n        const gl = this.gl;\r\n        if (shader.program) {\r\n            gl.deleteProgram(shader.program);\r\n            shader.program = undefined;\r\n        }\r\n        if (shader.vertShader) {\r\n            gl.deleteShader(shader.vertShader);\r\n            shader.vertShader = undefined;\r\n        }\r\n        if (shader.fragShader) {\r\n            gl.deleteShader(shader.fragShader);\r\n            shader.fragShader = undefined;\r\n        }\r\n        shader.uniforms = {};\r\n        shader.attributes = {};\r\n    }\r\n\r\n    // ====================== frame buffer ======================\r\n\r\n    createFrameBuffer(): FrameBuffer {\r\n        const gl = this.gl;\r\n        const frameBuffer = gl.createFramebuffer();\r\n        if (!frameBuffer) {\r\n            throw new Error('Failed to create WebGL frame buffer');\r\n        }\r\n        return new FrameBuffer(frameBuffer);\r\n    }\r\n\r\n    attachColorTexture(frameBuffer: FrameBuffer, texture: Texture | null) {\r\n        this.attachColorTextures(frameBuffer, texture ? [texture] : []);\r\n    }\r\n\r\n    attachColorTextures(frameBuffer: FrameBuffer, textures: Texture[]) {\r\n        const gl = this.gl;\r\n        if (!frameBuffer.glFrameBuffer) {\r\n            throw new Error('Frame buffer has been deleted');\r\n        }\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer.glFrameBuffer);\r\n        frameBuffer.textures.length = textures.length;\r\n        textures.forEach((texture, index) => {\r\n            if (!texture.glTexture) {\r\n                throw new Error('Texture has been deleted');\r\n            }\r\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + index, gl.TEXTURE_2D, texture.glTexture, texture.level);\r\n\r\n            frameBuffer.textures[index] = texture;\r\n        });\r\n        gl.drawBuffers(textures.map((texture, index) => (gl.COLOR_ATTACHMENT0 + index)));\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        this.currentFrameBuffer = undefined;\r\n    }\r\n\r\n    attachDepthTexture(frameBuffer: FrameBuffer, texture: Texture | null) {\r\n        const gl = this.gl;\r\n        if (!frameBuffer.glFrameBuffer) {\r\n            throw new Error('Frame buffer has been deleted');\r\n        }\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer.glFrameBuffer);\r\n        if (texture) {\r\n            if (!texture.glTexture) {\r\n                throw new Error('Texture has been deleted');\r\n            }\r\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, texture.glTexture, texture.level);\r\n            frameBuffer.depthTexture = texture;\r\n        } else {\r\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, null, 0);\r\n            frameBuffer.depthTexture = undefined;\r\n        }\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        this.currentFrameBuffer = undefined;\r\n    }\r\n\r\n    attachStencilTexture(frameBuffer: FrameBuffer, texture: Texture | null) {\r\n        const gl = this.gl;\r\n        if (!frameBuffer.glFrameBuffer) {\r\n            throw new Error('Frame buffer has been deleted');\r\n        }\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer.glFrameBuffer);\r\n        if (texture) {\r\n            if (!texture.glTexture) {\r\n                throw new Error('Texture has been deleted');\r\n            }\r\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.TEXTURE_2D, texture.glTexture, texture.level);\r\n            frameBuffer.stencilTexture = texture;\r\n        } else {\r\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.TEXTURE_2D, null, 0);\r\n            frameBuffer.stencilTexture = undefined;\r\n        }\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        this.currentFrameBuffer = undefined;\r\n    }\r\n\r\n    deleteFrameBuffer(frameBuffer: FrameBuffer, deleteTexture: boolean = false) {\r\n        if (frameBuffer.glFrameBuffer) {\r\n            this.gl.deleteFramebuffer(frameBuffer.glFrameBuffer);\r\n            frameBuffer.glFrameBuffer = undefined;\r\n        }\r\n        if (deleteTexture) {\r\n            frameBuffer.textures.forEach(texture => this.deleteTexture(texture));\r\n        }\r\n    }\r\n\r\n    resizeFrameBuffer(frameBuffer: FrameBuffer, width: number = this.state.width, height: number = this.state.height) {\r\n        frameBuffer.textures.forEach(texture => this.resizeTexture(texture, width, height));\r\n        frameBuffer.depthTexture && this.resizeTexture(frameBuffer.depthTexture, width, height);\r\n        frameBuffer.stencilTexture && this.resizeTexture(frameBuffer.stencilTexture, width, height);\r\n    }\r\n\r\n    startCapture(frameBuffer: FrameBuffer) {\r\n        this.flush2D();\r\n        this.frameBufferStack.push(frameBuffer);\r\n    }\r\n\r\n    endCapture() {\r\n        this.flush2D();\r\n        this.frameBufferStack.pop();\r\n    }\r\n\r\n    private switchFrameBuffer() {\r\n        const stack = this.frameBufferStack;\r\n        const frameBuffer = stack.length ? stack[stack.length - 1] : undefined;\r\n        if (frameBuffer !== this.currentFrameBuffer) {\r\n            this.currentFrameBuffer = frameBuffer || undefined;\r\n            const gl = this.gl;\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer?.glFrameBuffer || null);\r\n        }\r\n    }\r\n\r\n    // ====================== 3d - geometry ======================\r\n\r\n    disposeGeometry(geometry: Geometry) {\r\n        const gl = this.gl;\r\n        if (geometry.vao) {\r\n            gl.deleteVertexArray(geometry.vao);\r\n            geometry.vao = undefined;\r\n        }\r\n        if (geometry.ibo) {\r\n            gl.deleteBuffer(geometry.ibo);\r\n            geometry.ibo = undefined;\r\n        }\r\n        geometry.attributes.forEach(attr => {\r\n            if (attr.vbo) {\r\n                gl.deleteBuffer(attr.vbo);\r\n                attr.vbo = undefined;\r\n            }\r\n        });\r\n    }\r\n\r\n    drawGeometry(geometry: Geometry) {\r\n        if (this.drawing2D) {\r\n            throw new Error('Renderer.end2D must be call before draw geometry');\r\n        }\r\n\r\n        const gl = this.gl;\r\n\r\n        if (!geometry.vao) {\r\n            const vao = gl.createVertexArray();\r\n            if (!vao) {\r\n                throw new Error('Failed to create Vertex Array Object');\r\n            }\r\n            geometry.vao = vao;\r\n            gl.bindVertexArray(vao);\r\n            const shader = this.currentShader;\r\n            if (!shader) {\r\n                throw new Error('Shader not set');\r\n            }\r\n            const attribLocations = this.attribLocations;\r\n            geometry.attributes.forEach(geoAttr => {\r\n                if (!geoAttr.vbo) {\r\n                    geoAttr.vbo = this.createVBO(geoAttr.vertices);\r\n                }\r\n                if (attribLocations && attribLocations.hasOwnProperty(geoAttr.name)) {\r\n                    this.bindVertexArrayAttribute(\r\n                        attribLocations[geoAttr.name],\r\n                        geoAttr.vbo,\r\n                        geoAttr.componentSize\r\n                    );\r\n                } else {\r\n                    const attribute = shader.attributes[geoAttr.name];\r\n                    if (attribute) {\r\n                        this.bindVertexArrayAttribute(\r\n                            attribute.location,\r\n                            geoAttr.vbo,\r\n                            geoAttr.componentSize\r\n                        );\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        gl.bindVertexArray(geometry.vao);\r\n\r\n        if (!geometry.ibo) {\r\n            geometry.ibo = this.createIBO(geometry.indices);\r\n        }\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, geometry.ibo);\r\n\r\n        this.switchFrameBuffer();\r\n        switch (geometry.type) {\r\n            case Geometry.TYPE_TRIANGLES:\r\n                gl.drawElements(gl.TRIANGLES, geometry.indices.length, gl.UNSIGNED_SHORT, 0);\r\n                break;\r\n            case Geometry.TYPE_LINES:\r\n                gl.drawElements(gl.LINES, geometry.indices.length, gl.UNSIGNED_SHORT, 0);\r\n                break;\r\n        }\r\n\r\n        gl.bindVertexArray(null);\r\n    }\r\n\r\n    // ====================== 2D - instanced drawing ======================\r\n\r\n    begin2D() {\r\n        if (this.drawing2D) {\r\n            throw new Error('Renderer.end2D must be call before begin');\r\n        }\r\n        this.drawing2D = true;\r\n    }\r\n\r\n    end2D() {\r\n        if (!this.drawing2D) {\r\n            throw new Error('Renderer.begin2D must be call before end');\r\n        }\r\n        this.flush2D();\r\n        this.drawing2D = false;\r\n    }\r\n\r\n    setCameraPosition(x: number, y: number) {\r\n        this.state.cameraX = x;\r\n        this.state.cameraY = y;\r\n    }\r\n\r\n    centerCamera() {\r\n        this.setCameraPosition(this.state.width / 2, this.state.height / 2);\r\n    }\r\n\r\n    setZoom(zoom: number) {\r\n        this.state.zoom = zoom;\r\n    }\r\n\r\n    setColor(r: number, g: number, b: number, a: number = 1) {\r\n        this.state.color.r = r;\r\n        this.state.color.g = g;\r\n        this.state.color.b = b;\r\n        this.state.color.a = a;\r\n    }\r\n\r\n    private flush2D() {\r\n        if (!this.drawing2D) {\r\n            return;\r\n        }\r\n        if (this.batchIndex === 0) {\r\n            return;\r\n        }\r\n        switch (this.batchType) {\r\n            case BatchType.MESH:\r\n                this.flushMesh();\r\n                break;\r\n            case BatchType.LINES:\r\n                this.flushLines();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private flushMesh() {\r\n        const texture = this.batchTexture;\r\n\r\n        const len = this.batchIndex;\r\n        this.batchIndex = 0;\r\n\r\n        const gl = this.gl;\r\n        let shader = this.currentShader;\r\n        if (!shader) {\r\n            shader = this.IMAGE_2D_SHADER;\r\n        }\r\n        if (!shader.program) {\r\n            throw new Error('Shader has been deleted');\r\n        }\r\n        gl.useProgram(shader.program);\r\n\r\n        // position\r\n        const aPosition = shader.attributes[A_POSITION];\r\n        if (aPosition) {\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.batchPositionBuffer);\r\n            gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.batchPositionVertices);\r\n            const location = aPosition.location;\r\n            gl.enableVertexAttribArray(location);\r\n            gl.vertexAttribPointer(location, 2, gl.FLOAT, false, 0, 0);\r\n        }\r\n\r\n        // tex-coord\r\n        const aTexCoord = shader.attributes[A_TEX_COORD];\r\n        if (aTexCoord) {\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.batchTexCoordBuffer);\r\n            gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.batchTexCoordVertices);\r\n            const location = aTexCoord.location;\r\n            gl.enableVertexAttribArray(location);\r\n            gl.vertexAttribPointer(location, 2, gl.FLOAT, false, 0, 0);\r\n        }\r\n\r\n        // color\r\n        const aColor = shader.attributes[A_COLOR];\r\n        if (aColor) {\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.batchColorBuffer);\r\n            gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.batchColorVertices);\r\n            const location = aColor.location;\r\n            gl.enableVertexAttribArray(location);\r\n            gl.vertexAttribPointer(location, 4, gl.FLOAT, false, 0, 0);\r\n        }\r\n\r\n        // texture\r\n        shader.uniforms[U_TEXTURE]?.setter(texture?.glTexture);\r\n\r\n        // draw\r\n        this.switchFrameBuffer();\r\n        gl.drawArrays(gl.TRIANGLES, 0, len * 6);\r\n    }\r\n\r\n    private flushLines() {\r\n        const len = this.batchIndex;\r\n        this.batchIndex = 0;\r\n\r\n        const gl = this.gl;\r\n        let shader = this.currentShader;\r\n        if (!shader) {\r\n            shader = this.COLOR_2D_SHADER;\r\n        }\r\n        if (!shader.program) {\r\n            throw new Error('Shader has been deleted');\r\n        }\r\n        gl.useProgram(shader.program);\r\n\r\n        // position\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.batchPositionBuffer);\r\n        gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.batchPositionVertices);\r\n        const positionLocation = shader.attributes[A_POSITION].location;\r\n        gl.enableVertexAttribArray(positionLocation);\r\n        gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\r\n\r\n        // color\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.batchColorBuffer);\r\n        gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.batchColorVertices);\r\n        const colorLocation = shader.attributes[A_COLOR].location;\r\n        gl.enableVertexAttribArray(colorLocation);\r\n        gl.vertexAttribPointer(colorLocation, 4, gl.FLOAT, false, 0, 0);\r\n\r\n        // draw\r\n        this.switchFrameBuffer();\r\n        gl.drawArrays(gl.LINES, 0, len * 2);\r\n    }\r\n\r\n    drawLine(x0: number, y0: number, x1: number, y1: number) {\r\n        if (!this.drawing2D) {\r\n            throw new Error('Renderer.begin2D must be call before draw');\r\n        }\r\n        if (\r\n            this.batchIndex >= this.batchSize * 3\r\n            || this.batchType !== BatchType.LINES\r\n        ) {\r\n            this.flush2D();\r\n        }\r\n        this.batchType = BatchType.LINES;\r\n\r\n        const zoom = this.state.zoom;\r\n        const invW = 2 / this.state.width * zoom;\r\n        const invH = 2 / this.state.height * zoom;\r\n        const cameraX = this.state.cameraX;\r\n        const cameraY = this.state.cameraY;\r\n\r\n        const positionVertices = this.batchPositionVertices;\r\n        const index = this.batchIndex * 2 * 2;\r\n        positionVertices[index] = (x0 - cameraX) * invW;\r\n        positionVertices[index + 1] = (y0 - cameraY) * invH;\r\n        positionVertices[index + 2] = (x1 - cameraX) * invW;\r\n        positionVertices[index + 3] = (y1 - cameraY) * invH;\r\n\r\n        const colorIndex = this.batchIndex * 2 * 4;\r\n        const vertexColors = this.batchColorVertices;\r\n        const color = this.state.color;\r\n        for (let i = 0; i < 2; ++i) {\r\n            const offset = i * 4;\r\n            vertexColors[colorIndex + offset] = color.r;\r\n            vertexColors[colorIndex + 1 + offset] = color.g;\r\n            vertexColors[colorIndex + 2 + offset] = color.b;\r\n            vertexColors[colorIndex + 3 + offset] = color.a;\r\n        }\r\n\r\n        this.batchIndex += 1;\r\n    }\r\n\r\n    private pushCwQuadVertices(\r\n        texture: Texture,\r\n        x0: number,\r\n        y0: number,\r\n        x1: number,\r\n        y1: number,\r\n        x2: number,\r\n        y2: number,\r\n        x3: number,\r\n        y3: number,\r\n        texX0: number,\r\n        texY0: number,\r\n        texX1: number,\r\n        texY1: number,\r\n        texX2: number,\r\n        texY2: number,\r\n        texX3: number,\r\n        texY3: number\r\n    ) {\r\n        if (!this.drawing2D) {\r\n            throw new Error('Renderer.begin2D must be call before draw');\r\n        }\r\n        if (\r\n            this.batchIndex >= this.batchSize\r\n            || texture !== this.batchTexture\r\n            || this.batchType !== BatchType.MESH\r\n        ) {\r\n            this.flush2D();\r\n        }\r\n        this.batchType = BatchType.MESH;\r\n\r\n        this.batchTexture = texture;\r\n        const index = this.batchIndex * 3 * 2 * 2;\r\n        const positionVertices = this.batchPositionVertices;\r\n        const texCoordVertices = this.batchTexCoordVertices;\r\n\r\n        positionVertices[index] = x0;\r\n        positionVertices[index + 1] = y0;\r\n        positionVertices[index + 2] = x1;\r\n        positionVertices[index + 3] = y1;\r\n        positionVertices[index + 4] = x3;\r\n        positionVertices[index + 5] = y3;\r\n\r\n        positionVertices[index + 6] = x1;\r\n        positionVertices[index + 7] = y1;\r\n        positionVertices[index + 8] = x2;\r\n        positionVertices[index + 9] = y2;\r\n        positionVertices[index + 10] = x3;\r\n        positionVertices[index + 11] = y3;\r\n\r\n        if (texture.flipY) {\r\n            [texX0, texY0, texX3, texY3] = [texX3, texY3, texX0, texY0];\r\n            [texX1, texY1, texX2, texY2] = [texX2, texY2, texX1, texY1];\r\n        }\r\n\r\n        texCoordVertices[index] = texX0;\r\n        texCoordVertices[index + 1] = texY0;\r\n        texCoordVertices[index + 2] = texX1;\r\n        texCoordVertices[index + 3] = texY1;\r\n        texCoordVertices[index + 4] = texX3;\r\n        texCoordVertices[index + 5] = texY3;\r\n\r\n        texCoordVertices[index + 6] = texX1;\r\n        texCoordVertices[index + 7] = texY1;\r\n        texCoordVertices[index + 8] = texX2;\r\n        texCoordVertices[index + 9] = texY2;\r\n        texCoordVertices[index + 10] = texX3;\r\n        texCoordVertices[index + 11] = texY3;\r\n\r\n        const colorIndex = this.batchIndex * 3 * 2 * 4;\r\n        const vertexColors = this.batchColorVertices;\r\n        const color = this.state.color;\r\n        for (let i = 0; i < 2 * 3; ++i) {\r\n            const offset = i * 4;\r\n            vertexColors[colorIndex + offset] = color.r;\r\n            vertexColors[colorIndex + 1 + offset] = color.g;\r\n            vertexColors[colorIndex + 2 + offset] = color.b;\r\n            vertexColors[colorIndex + 3 + offset] = color.a;\r\n        }\r\n        this.batchIndex += 1;\r\n    }\r\n\r\n    drawCwQuad(\r\n        texture: Texture,\r\n        x0: number,\r\n        y0: number,\r\n        x1: number,\r\n        y1: number,\r\n        x2: number,\r\n        y2: number,\r\n        x3: number,\r\n        y3: number,\r\n        texX0: number = 0,\r\n        texY0: number = texture.height,\r\n        texX1: number = texture.width,\r\n        texY1: number = texture.height,\r\n        texX2: number = texture.width,\r\n        texY2: number = 0,\r\n        texX3: number = 0,\r\n        texY3: number = 0\r\n    ) {\r\n        const zoom = this.state.zoom;\r\n        const invW = 2 / this.state.width * zoom;\r\n        const invH = 2 / this.state.height * zoom;\r\n        const invSW = 1 / texture.width;\r\n        const invSH = 1 / texture.height;\r\n        const cameraX = this.state.cameraX;\r\n        const cameraY = this.state.cameraY;\r\n        this.pushCwQuadVertices(\r\n            texture,\r\n            (x0 - cameraX) * invW,\r\n            (y0 - cameraY) * invH,\r\n            (x1 - cameraX) * invW,\r\n            (y1 - cameraY) * invH,\r\n            (x2 - cameraX) * invW,\r\n            (y2 - cameraY) * invH,\r\n            (x3 - cameraX) * invW,\r\n            (y3 - cameraY) * invH,\r\n            texX0 * invSW,\r\n            texY0 * invSH,\r\n            texX1 * invSW,\r\n            texY1 * invSH,\r\n            texX2 * invSW,\r\n            texY2 * invSH,\r\n            texX3 * invSW,\r\n            texY3 * invSH\r\n        );\r\n    }\r\n\r\n    drawRect(\r\n        texture: Texture,\r\n        dx: number = 0,\r\n        dy: number = 0,\r\n        dw: number = texture.width,\r\n        dh: number = texture.height,\r\n        flipX: boolean = false,\r\n        flipY: boolean = false,\r\n        sx: number = 0,\r\n        sy: number = 0,\r\n        sw: number = texture.width,\r\n        sh: number = texture.height\r\n    ) {\r\n        const dstLeft = dx;\r\n        const dstRight = dx + dw;\r\n        const dstTop = dy + dh;\r\n        const dstBottom = dy;\r\n        let texLeft = sx;\r\n        let texRight = sx + sw;\r\n        let texTop = sy;\r\n        let texBottom = sy + sh;\r\n        if (flipX) {\r\n            [texLeft, texRight] = [texRight, texLeft];\r\n        }\r\n        if (flipY) {\r\n            [texTop, texBottom] = [texBottom, texTop];\r\n        }\r\n        this.drawCwQuad(\r\n            texture,\r\n            dstLeft,\r\n            dstBottom,\r\n            dstRight,\r\n            dstBottom,\r\n            dstRight,\r\n            dstTop,\r\n            dstLeft,\r\n            dstTop,\r\n            texLeft,\r\n            texBottom,\r\n            texRight,\r\n            texBottom,\r\n            texRight,\r\n            texTop,\r\n            texLeft,\r\n            texTop\r\n        );\r\n    }\r\n\r\n    draw(\r\n        texture: Texture,\r\n        dstX: number = 0,\r\n        dstY: number = 0,\r\n        dstW: number = texture.width,\r\n        dstH: number = texture.height,\r\n        flipX: boolean = false,\r\n        flipY: boolean = false,\r\n        srcX: number = 0,\r\n        srcY: number = 0,\r\n        srcW: number = texture.width,\r\n        srcH: number = texture.height,\r\n        dx: number = 0,\r\n        dy: number = 0,\r\n        ox: number = 0,\r\n        oy: number = 0,\r\n        rotation: number = 0,\r\n        sx: number = 1,\r\n        sy: number = 1\r\n    ) {\r\n        const left = dstX;\r\n        const right = dstX + dstW;\r\n        const top = dstY + dstH;\r\n        const bottom = dstY;\r\n\r\n        const cosR = Math.cos(rotation);\r\n        const sinR = Math.sin(rotation);\r\n\r\n        const m11 = cosR * sx;\r\n        const m12 = -sinR * sy;\r\n        const m13 = -cosR * ox * sx + dx + ox + oy * sinR * sy;\r\n        const m21 = sinR * sx;\r\n        const m22 = cosR * sy;\r\n        const m23 = -cosR * oy * sy + dy - ox * sinR * sx + oy;\r\n\r\n        const v0x = left;\r\n        const v0y = bottom;\r\n        const v1x = right;\r\n        const v1y = bottom;\r\n        const v2x = right;\r\n        const v2y = top;\r\n        const v3x = left;\r\n        const v3y = top;\r\n\r\n        let texLeft = srcX;\r\n        let texRight = srcX + srcW;\r\n        let texTop = srcY;\r\n        let texBottom = srcY + srcH;\r\n        if (flipX) {\r\n            [texLeft, texRight] = [texRight, texLeft];\r\n        }\r\n        if (flipY) {\r\n            [texTop, texBottom] = [texBottom, texTop];\r\n        }\r\n\r\n        this.drawCwQuad(\r\n            texture,\r\n            m11 * v0x + m12 * v0y + m13,\r\n            m21 * v0x + m22 * v0y + m23,\r\n            m11 * v1x + m12 * v1y + m13,\r\n            m21 * v1x + m22 * v1y + m23,\r\n            m11 * v2x + m12 * v2y + m13,\r\n            m21 * v2x + m22 * v2y + m23,\r\n            m11 * v3x + m12 * v3y + m13,\r\n            m21 * v3x + m22 * v3y + m23,\r\n            texLeft,\r\n            texBottom,\r\n            texRight,\r\n            texBottom,\r\n            texRight,\r\n            texTop,\r\n            texLeft,\r\n            texTop\r\n        );\r\n    }\r\n\r\n    drawLabel(\r\n        label: Label,\r\n        dstX: number = 0,\r\n        dstY: number = 0,\r\n        dstW: number = label.width,\r\n        dstH: number = label.height,\r\n        flipX: boolean = false,\r\n        flipY: boolean = false,\r\n        srcX: number = 0,\r\n        srcY: number = 0,\r\n        srcW: number = label.width,\r\n        srcH: number = label.height,\r\n        dx: number = 0,\r\n        dy: number = 0,\r\n        ox: number = 0,\r\n        oy: number = 0,\r\n        rotation: number = 0,\r\n        sx: number = 1,\r\n        sy: number = 1\r\n    ) {\r\n        this.draw(\r\n            label.texture(this),\r\n            dstX,\r\n            dstY,\r\n            dstW,\r\n            dstH,\r\n            flipX,\r\n            flipY,\r\n            srcX,\r\n            srcY,\r\n            srcW,\r\n            srcH,\r\n            dx,\r\n            dy,\r\n            ox,\r\n            oy,\r\n            rotation,\r\n            sx,\r\n            sy\r\n        );\r\n    }\r\n\r\n}\r\n","import Renderer from '../../utils/render/Renderer';\r\n\r\nexport function drawCircle(\r\n    renderer: Renderer,\r\n    radius: number,\r\n    cx: number,\r\n    cy: number,\r\n    precision: number = Math.min(8, radius / 2)\r\n) {\r\n    let x0 = 0;\r\n    let y0 = radius;\r\n    const num = Math.ceil(2 * Math.PI * radius / (precision / renderer.state.zoom));\r\n    const detAngle = Math.PI * 2 / num;\r\n    const cos = Math.cos(detAngle);\r\n    const sin = Math.sin(detAngle);\r\n    const px = cx;\r\n    const py = cy;\r\n    for (let i = 0; i < num; ++i) {\r\n        const x1 = x0 * cos - y0 * sin;\r\n        const y1 = x0 * sin + y0 * cos;\r\n        renderer.drawLine(\r\n            x0 + px,\r\n            y0 + py,\r\n            x1 + px,\r\n            y1 + py\r\n        );\r\n        x0 = x1;\r\n        y0 = y1;\r\n    }\r\n}","import {quat, vec3} from 'gl-matrix';\r\nimport {getVerticalInDir, quatLookRotation} from '../../utils/math/math';\r\nimport {BodyPart} from './model/BodyPart';\r\n\r\ntype Vec = [number, number, number];\r\n\r\ntype Quat = [number, number, number, number];\r\n\r\nfunction mid(p1: Vec, p2: Vec): Vec {\r\n    return [(p1[0] + p2[0]) / 2, (p1[1] + p2[1]) / 2, (p1[2] + p2[2]) / 2];\r\n}\r\n\r\nfunction sub(p1: Vec, p2: Vec): Vec {\r\n    return [p1[0] - p2[0], p1[1] - p2[1], p1[2] - p2[2]];\r\n}\r\n\r\nfunction normalize(vec: Vec): Vec {\r\n    const invLen = 1 / Math.sqrt(vec[0] ** 2 + vec[1] ** 2 + vec[2] ** 2);\r\n    return [vec[0] * invLen, vec[1] * invLen, vec[2] * invLen];\r\n}\r\n\r\nfunction vert(right: Vec, up: Vec): Vec {\r\n    let forward: Vec = [0, 0, 0];\r\n    vec3.cross(forward, right, up);\r\n    return normalize(forward);\r\n}\r\n\r\nfunction vertInDir(v: Vec, dir: Vec): Vec {\r\n    return getVerticalInDir([0, 0, 0], v, dir) as Vec;\r\n}\r\n\r\nfunction quatLook(forward: Vec, up: Vec): Quat {\r\n    return quatLookRotation([0, 0, 0, 1], forward, up) as Quat;\r\n}\r\n\r\nfunction invQuat(q: Quat): Quat {\r\n    return quat.invert([0, 0, 0, 1], q) as Quat;\r\n}\r\n\r\nfunction invQuatLook(forward: Vec, up: Vec): Quat {\r\n    return invQuat(quatLook(forward, up));\r\n}\r\n\r\nexport function landmarksToTransforms(landmarks: { point: [number, number, number], visibility: number }[]): {\r\n    [name in BodyPart]: {\r\n        up: [number, number, number],\r\n        forward: [number, number, number],\r\n        visibility: number\r\n    }\r\n} {\r\n    const points: Vec[] = landmarks.map(item => item.point);\r\n\r\n    function avgVisibility(...indices: number[]) {\r\n        return indices.reduce((visibility, index) => visibility + landmarks[index].visibility, 0) / indices.length;\r\n    }\r\n\r\n    // =============== trunk ===============\r\n    const trunkUp = normalize(\r\n        sub(\r\n            mid(points[11], points[12]),\r\n            mid(points[24], points[23])\r\n        )\r\n    );\r\n    const trunkRight = normalize(sub(\r\n        mid(points[11], points[23]),\r\n        mid(points[12], points[24])\r\n    ));\r\n    const trunkForward = vert(trunkRight, trunkUp);\r\n    const invTrunkQuat = invQuatLook(trunkForward, trunkUp);\r\n    const trunkVisibility = avgVisibility(11, 12, 23, 24);\r\n\r\n    // =============== head ===============\r\n    const headUp = sub(\r\n        mid(points[3], points[6]),\r\n        mid(points[9], points[10])\r\n    );\r\n    const headForward = vert(\r\n        sub(points[7], points[8]),\r\n        headUp\r\n    );\r\n    vec3.transformQuat(headUp, headUp, invTrunkQuat);\r\n    vec3.transformQuat(headForward, headForward, invTrunkQuat);\r\n    const headVisibility = avgVisibility(8, 6, 5, 4, 1, 2, 3, 7, 0, 9, 10);\r\n\r\n    // =============== upper arms ===============\r\n    const leftUpperArmUp = normalize(sub(points[11], points[13]));\r\n    const leftUpperArmForward = vert(trunkRight, leftUpperArmUp);\r\n    const invLeftUpperArmQuat = invQuatLook(leftUpperArmForward, leftUpperArmUp);\r\n    vec3.transformQuat(leftUpperArmUp, leftUpperArmUp, invTrunkQuat);\r\n    vec3.transformQuat(leftUpperArmForward, leftUpperArmForward, invTrunkQuat);\r\n    const leftUpperArmVisibility = avgVisibility(11, 13);\r\n\r\n    const rightUpperArmUp = normalize(sub(points[12], points[14]));\r\n    const rightUpperArmForward = vert(trunkRight, rightUpperArmUp);\r\n    const invRightUpperArmQuat = invQuatLook(rightUpperArmForward, rightUpperArmUp);\r\n    vec3.transformQuat(rightUpperArmUp, rightUpperArmUp, invTrunkQuat);\r\n    vec3.transformQuat(rightUpperArmForward, rightUpperArmForward, invTrunkQuat);\r\n    const rightUpperArmVisibility = avgVisibility(12, 14);\r\n\r\n    // =============== lower arms ===============\r\n    const leftLowerArmUp = normalize(sub(points[13], points[15]));\r\n    const leftLowerArmForward = vert(trunkRight, leftLowerArmUp);\r\n    const invLeftLowerArmQuat = invQuatLook(leftLowerArmForward, leftLowerArmUp);\r\n    vec3.transformQuat(leftLowerArmUp, leftLowerArmUp, invLeftUpperArmQuat);\r\n    vec3.transformQuat(leftLowerArmForward, leftLowerArmForward, invLeftUpperArmQuat);\r\n    const leftLowerArmVisibility = avgVisibility(13, 15);\r\n\r\n    const rightLowerArmUp = normalize(sub(points[14], points[16]));\r\n    const rightLowerArmForward = vert(trunkRight, rightLowerArmUp);\r\n    const invRightLowerArmQuat = invQuatLook(rightLowerArmForward, rightLowerArmUp);\r\n    vec3.transformQuat(rightLowerArmUp, rightLowerArmUp, invRightUpperArmQuat);\r\n    vec3.transformQuat(rightLowerArmForward, rightLowerArmForward, invRightUpperArmQuat);\r\n    const rightLowerArmVisibility = avgVisibility(14, 16);\r\n\r\n    // =============== hands ===============\r\n    const leftHandUp = normalize(sub(\r\n        points[15],\r\n        mid(points[17], points[19])\r\n    ));\r\n    const leftHandForward = vertInDir(leftHandUp, sub(points[21], points[15]));\r\n    vec3.transformQuat(leftHandUp, leftHandUp, invLeftLowerArmQuat);\r\n    vec3.transformQuat(leftHandForward, leftHandForward, invLeftLowerArmQuat);\r\n    const leftHandVisibility = avgVisibility(15, 17, 19, 21);\r\n\r\n    const rightHandUp = normalize(sub(\r\n        points[16],\r\n        mid(points[18], points[20])\r\n    ));\r\n    const rightHandForward = vertInDir(rightHandUp, sub(points[22], points[16]));\r\n    vec3.transformQuat(rightHandUp, rightHandUp, invRightLowerArmQuat);\r\n    vec3.transformQuat(rightHandForward, rightHandForward, invRightLowerArmQuat);\r\n    const rightHandVisibility = avgVisibility(16, 18, 20, 22);\r\n\r\n    // =============== thighs ===============\r\n    const leftThighUp = normalize(sub(points[23], points[25]));\r\n    const leftThighForward = vert(trunkRight, leftThighUp);\r\n    const invLeftThighQuat = invQuatLook(leftThighForward, leftThighUp);\r\n    vec3.transformQuat(leftThighUp, leftThighUp, invTrunkQuat);\r\n    vec3.transformQuat(leftThighForward, leftThighForward, invTrunkQuat);\r\n    const leftThighVisibility = avgVisibility(23, 25);\r\n\r\n    const rightThighUp = normalize(sub(points[24], points[26]));\r\n    const rightThighForward = vert(trunkRight, rightThighUp);\r\n    const invRightThighQuat = invQuatLook(rightThighForward, rightThighUp);\r\n    vec3.transformQuat(rightThighUp, rightThighUp, invTrunkQuat);\r\n    vec3.transformQuat(rightThighForward, rightThighForward, invTrunkQuat);\r\n    const rightThighVisibility = avgVisibility(24, 26);\r\n\r\n    // =============== calves ===============\r\n    const leftCalfUp = normalize(sub(points[25], points[27]));\r\n    const leftCalfForward = vert(trunkRight, leftCalfUp);\r\n    const invLeftCalfQuat = invQuatLook(leftCalfForward, leftCalfUp);\r\n    vec3.transformQuat(leftCalfUp, leftCalfUp, invLeftThighQuat);\r\n    vec3.transformQuat(leftCalfForward, leftCalfForward, invLeftThighQuat);\r\n    const leftCalfVisibility = avgVisibility(25, 27);\r\n\r\n    const rightCalfUp = normalize(sub(points[26], points[28]));\r\n    const rightCalfForward = vert(trunkRight, rightCalfUp);\r\n    const invRightCalfQuat = invQuatLook(rightCalfForward, rightCalfUp);\r\n    vec3.transformQuat(rightCalfUp, rightCalfUp, invRightThighQuat);\r\n    vec3.transformQuat(rightCalfForward, rightCalfForward, invRightThighQuat);\r\n    const rightCalfVisibility = avgVisibility(26, 28);\r\n\r\n    // =============== feet ===============\r\n    const leftFootForward = normalize(sub(points[31], points[29]));\r\n    const leftFootUp = vertInDir(leftFootForward, sub(points[27], points[31]));\r\n    vec3.transformQuat(leftFootForward, leftFootForward, invLeftCalfQuat);\r\n    vec3.transformQuat(leftFootUp, leftFootUp, invLeftCalfQuat);\r\n    const leftFootVisibility = avgVisibility(27, 29, 31);\r\n\r\n    const rightFootForward = normalize(sub(points[32], points[30]));\r\n    const rightFootUp = vertInDir(rightFootForward, sub(points[28], points[32]));\r\n    vec3.transformQuat(rightFootForward, rightFootForward, invRightCalfQuat);\r\n    vec3.transformQuat(rightFootUp, rightFootUp, invRightCalfQuat);\r\n    const rightFootVisibility = avgVisibility(28, 30, 32);\r\n\r\n    return {\r\n        trunk: {\r\n            up: trunkUp,\r\n            forward: trunkForward,\r\n            visibility: trunkVisibility,\r\n        },\r\n        head: {\r\n            up: headUp,\r\n            forward: headForward,\r\n            visibility: headVisibility,\r\n        },\r\n        leftUpperArm: {\r\n            up: leftUpperArmUp,\r\n            forward: leftUpperArmForward,\r\n            visibility: leftUpperArmVisibility,\r\n        },\r\n        leftLowerArm: {\r\n            up: leftLowerArmUp,\r\n            forward: leftLowerArmForward,\r\n            visibility: leftLowerArmVisibility,\r\n        },\r\n        leftHand: {\r\n            up: leftHandUp,\r\n            forward: leftHandForward,\r\n            visibility: leftHandVisibility,\r\n        },\r\n        leftThigh: {\r\n            up: leftThighUp,\r\n            forward: leftThighForward,\r\n            visibility: leftThighVisibility,\r\n        },\r\n        leftCalf: {\r\n            up: leftCalfUp,\r\n            forward: leftCalfForward,\r\n            visibility: leftCalfVisibility,\r\n        },\r\n        leftFoot: {\r\n            up: leftFootUp,\r\n            forward: leftFootForward,\r\n            visibility: leftFootVisibility,\r\n        },\r\n        rightUpperArm: {\r\n            up: rightUpperArmUp,\r\n            forward: rightUpperArmForward,\r\n            visibility: rightUpperArmVisibility,\r\n        },\r\n        rightLowerArm: {\r\n            up: rightLowerArmUp,\r\n            forward: rightLowerArmForward,\r\n            visibility: rightLowerArmVisibility,\r\n        },\r\n        rightHand: {\r\n            up: rightHandUp,\r\n            forward: rightHandForward,\r\n            visibility: rightHandVisibility,\r\n        },\r\n        rightThigh: {\r\n            up: rightThighUp,\r\n            forward: rightThighForward,\r\n            visibility: rightThighVisibility,\r\n        },\r\n        rightCalf: {\r\n            up: rightCalfUp,\r\n            forward: rightCalfForward,\r\n            visibility: rightCalfVisibility,\r\n        },\r\n        rightFoot: {\r\n            up: rightFootUp,\r\n            forward: rightFootForward,\r\n            visibility: rightFootVisibility,\r\n        },\r\n    };\r\n}","import {InfoCircleOutlined, UndoOutlined} from '@vicons/antd';\r\nimport {quat, vec3} from 'gl-matrix';\r\nimport {NIcon, NPopconfirm, NSpin} from 'naive-ui';\r\nimport {defineComponent, onBeforeUnmount, onMounted, PropType, ref, watch} from 'vue';\r\nimport {LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD} from '../../config';\r\nimport DraggableCamera from '../../utils/DraggableCamera';\r\nimport Input from '../../utils/input/Input';\r\nimport {MouseDragContext3D, raycastSphereDragMove, raycastSphereDragStart} from '../../utils/input/mouse-drag';\r\nimport {isPointInCircle} from '../../utils/math/intersect';\r\nimport {quatFromTwoVec, transformInvMat4} from '../../utils/math/math';\r\nimport FrameBuffer from '../../utils/render/FrameBuffer';\r\nimport Renderer from '../../utils/render/Renderer';\r\nimport Shader from '../../utils/render/Shader';\r\nimport image2dVert from '../../utils/render/shaders/image-2d.vert';\r\nimport Texture from '../../utils/render/Texture';\r\nimport {drawCircle} from './draw-shape';\r\nimport {landmarksToTransforms} from './landmarks-to-transforms';\r\nimport {BodyPart} from './model/BodyPart';\r\nimport SkeletonModel from './model/SkeletonModel';\r\nimport SkeletonModelNode from './model/SkeletonModelNode';\r\nimport lightFrag from './shaders/light.frag';\r\nimport lightVert from './shaders/light.vert';\r\nimport outlineFrag from './shaders/outline.frag';\r\n\r\nconst CONTROL_POINT_RADIUS = 8;\r\n\r\nexport default defineComponent({\r\n    components: {\r\n        NSpin,\r\n        NIcon,\r\n        NPopconfirm,\r\n        InfoCircleOutlined,\r\n        UndoOutlined,\r\n    },\r\n    props: {\r\n        model: SkeletonModel,\r\n        camera: DraggableCamera,\r\n        landmarks: Array as PropType<{ point: [number, number, number], visibility: number }[]>,\r\n        readonly: Boolean,\r\n        highlights: Array as PropType<BodyPart[]>,\r\n    },\r\n    setup(props) {\r\n        const container = ref<HTMLDivElement>();\r\n        const canvas = ref<HTMLCanvasElement>();\r\n        const loading = ref(false);\r\n\r\n        let width = 0;\r\n        let height = 0;\r\n\r\n        let renderer: Renderer;\r\n        let lightShader: Shader;\r\n        let outlineShader: Shader;\r\n        let modelTexture: Texture;\r\n        let deepTexture: Texture;\r\n        let modelFrameBuffer: FrameBuffer;\r\n\r\n        const lightDirection = [0, -1, 0];\r\n        const camera = props.camera || new DraggableCamera();\r\n        camera.far = 5;\r\n        const input = new Input();\r\n        input.callback = onInput;\r\n\r\n        const model = props.model || new SkeletonModel();\r\n        let hoveredControlPointNode: SkeletonModelNode | null = null;\r\n        let dragging = false;\r\n        let shiftPressedLastFrame = false;\r\n        const dragContext = new MouseDragContext3D();\r\n        const dragOrigin = vec3.create();\r\n        const dragStartVec = vec3.create();\r\n        const dragEndVec = vec3.create();\r\n        const dragRotation = quat.create();\r\n        const dragStartForward = vec3.create();\r\n        const dragStartUp = vec3.create();\r\n\r\n        onMounted(async function () {\r\n            try {\r\n                loading.value = true;\r\n                await model.init();\r\n            } finally {\r\n                loading.value = false;\r\n            }\r\n\r\n            renderer = new Renderer(canvas.value!);\r\n\r\n            lightShader = renderer.createShader(lightVert, lightFrag);\r\n            outlineShader = renderer.createShader(image2dVert, outlineFrag);\r\n\r\n            modelTexture = renderer.createEmptyTexture();\r\n            modelTexture.flipY = true;\r\n            deepTexture = renderer.createDepthTexture();\r\n            deepTexture.flipY = true;\r\n            modelFrameBuffer = renderer.createFrameBuffer();\r\n            renderer.attachColorTexture(modelFrameBuffer, modelTexture);\r\n            renderer.attachDepthTexture(modelFrameBuffer, deepTexture);\r\n\r\n            resizeCanvas();\r\n            input.setup(canvas.value!);\r\n\r\n            setLandmarks(props.landmarks);\r\n        });\r\n\r\n        onBeforeUnmount(function () {\r\n            renderer.deleteShader(lightShader);\r\n            renderer.deleteShader(outlineShader);\r\n\r\n            renderer.deleteFrameBuffer(modelFrameBuffer, true);\r\n\r\n            input.unload(canvas.value!);\r\n        });\r\n\r\n        watch(() => props.landmarks, setLandmarks);\r\n\r\n        watch(() => props.highlights, function (highlights) {\r\n            Object.keys(BodyPart).forEach(name => {\r\n                const node = model[name as BodyPart];\r\n                if (highlights?.length) {\r\n                    node.active = !!highlights.includes(name as BodyPart);\r\n                } else {\r\n                    node.active = true;\r\n                }\r\n            });\r\n            render();\r\n        });\r\n\r\n        function reset() {\r\n            Object.keys(BodyPart).forEach(name => {\r\n                const node = model[name as BodyPart];\r\n                node.forward = [0, 0, 1];\r\n                node.up = [0, 1, 0];\r\n            });\r\n            camera.zoom = 1;\r\n            camera.rotateX = 0;\r\n            camera.rotateY = 0;\r\n            vec3.set(camera.target, 0, 0, 0);\r\n            camera.update();\r\n            model.update(camera.camera);\r\n            render();\r\n        }\r\n\r\n        function setLandmarks(landmarks?: { point: [number, number, number], visibility: number }[]) {\r\n            if (landmarks?.length) {\r\n                const transforms = landmarksToTransforms(landmarks);\r\n                Object.keys(BodyPart).forEach(name => {\r\n                    const node = model[name as BodyPart];\r\n                    const transform = transforms[name as keyof typeof transforms];\r\n                    node.forward = transform.forward;\r\n                    node.up = transform.up;\r\n                    node.active = transform.visibility > LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD;\r\n                });\r\n            } else {\r\n                Object.keys(BodyPart).forEach(name => {\r\n                    const node = model[name as BodyPart];\r\n                    node.forward = [0, 0, 1];\r\n                    node.up = [0, 1, 0];\r\n                    node.active = true;\r\n                });\r\n            }\r\n            camera.zoom = 1;\r\n            camera.rotateX = 0;\r\n            camera.rotateY = 0;\r\n            vec3.set(camera.target, 0, 0, 0);\r\n            camera.update();\r\n            model.update(camera.camera);\r\n            render();\r\n        }\r\n\r\n        function resizeCanvas() {\r\n            const rect = container.value!.getBoundingClientRect();\r\n            width = rect.width;\r\n            height = rect.height;\r\n\r\n            renderer.resizeCanvas(width, height);\r\n            renderer.resizeFrameBuffer(modelFrameBuffer);\r\n\r\n            camera.fitViewport(width, height);\r\n        }\r\n\r\n        function onInput(input: Input) {\r\n            camera.onInput(input);\r\n            model.update(camera.camera);\r\n\r\n            if (!props.readonly) {\r\n                if (!input.mouseLeft) {\r\n                    dragging = false;\r\n                }\r\n                if (shiftPressedLastFrame && !input.isKeyPressed('Shift')) {\r\n                    shiftPressedLastFrame = false;\r\n                    dragging = false;\r\n                }\r\n\r\n                // find hovered\r\n                if (!dragging) {\r\n                    hoveredControlPointNode = null;\r\n                    let hoveredControlPointZ = Infinity;\r\n                    if (model.root) {\r\n                        const stack: SkeletonModelNode[] = [model.root];\r\n                        for (; ;) {\r\n                            const node = stack.pop();\r\n                            if (!node) {\r\n                                break;\r\n                            }\r\n                            stack.push(...node.children);\r\n                            if (!node.controlPoint) {\r\n                                continue;\r\n                            }\r\n                            const cx = (node.controlPointScreenPosition[0] + 1) / 2 * width;\r\n                            const cy = (node.controlPointScreenPosition[1] + 1) / 2 * height;\r\n                            if (isPointInCircle(input.mouseX, height - input.mouseY, cx, cy, CONTROL_POINT_RADIUS)\r\n                                && node.controlPointScreenPosition[2] < hoveredControlPointZ\r\n                            ) {\r\n                                hoveredControlPointNode = node;\r\n                                hoveredControlPointZ = node.controlPointScreenPosition[2];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                const projectedMX = (input.mouseX / width - 0.5) * 2;\r\n                const projectedMY = (-input.mouseY / height + 0.5) * 2;\r\n\r\n                if (\r\n                    (input.mouseLeft && !dragging\r\n                        || input.isKeyPressedThisFrame('Shift') && dragging)\r\n                    && hoveredControlPointNode\r\n                ) {\r\n                    // drag start\r\n                    dragging = true;\r\n                    const node = hoveredControlPointNode;\r\n                    raycastSphereDragStart(\r\n                        dragContext,\r\n                        projectedMX, projectedMY,\r\n                        node.originWorldPosition[0], node.originWorldPosition[1], node.originWorldPosition[2],\r\n                        node.controlPointWorldPosition[0], node.controlPointWorldPosition[1], node.controlPointWorldPosition[2],\r\n                        camera.camera\r\n                    );\r\n                    vec3.copy(dragOrigin, node.originWorldPosition);\r\n                    vec3.copy(dragStartVec, node.controlPointWorldPosition);\r\n                    if (node.parent) {\r\n                        transformInvMat4(dragStartVec, dragStartVec, node.parent.worldMatrix);\r\n                        transformInvMat4(dragOrigin, dragOrigin, node.parent.worldMatrix);\r\n                    }\r\n                    vec3.sub(dragStartVec, dragStartVec, dragOrigin);\r\n                    vec3.normalize(dragStartVec, dragStartVec);\r\n                    vec3.copy(dragStartForward, node.forward);\r\n                    vec3.copy(dragStartUp, node.up);\r\n                } else if (input.mouseLeft && dragging && hoveredControlPointNode) {\r\n                    // drag move\r\n                    if (input.isKeyPressed('Shift')) {\r\n                        shiftPressedLastFrame = true;\r\n                        const dx = projectedMX - dragContext.dragStartMousePosition[0];\r\n                        const dy = projectedMY - dragContext.dragStartMousePosition[1];\r\n                        const offset = dx + dy;\r\n                        quat.setAxisAngle(dragRotation, dragStartVec, offset * Math.PI * 2);\r\n                        const node = hoveredControlPointNode;\r\n                        vec3.transformQuat(node.forward, dragStartForward, dragRotation);\r\n                        vec3.normalize(node.forward, node.forward);\r\n                        vec3.transformQuat(node.up, dragStartUp, dragRotation);\r\n                        vec3.normalize(node.up, node.up);\r\n                        model.update(camera.camera, node);\r\n                    } else {\r\n                        if (raycastSphereDragMove(dragContext, projectedMX, projectedMY, camera.camera)) {\r\n                            const node = hoveredControlPointNode;\r\n                            vec3.copy(dragEndVec, dragContext.rayResult1);\r\n                            if (node.parent) {\r\n                                transformInvMat4(dragEndVec, dragEndVec, node.parent.worldMatrix);\r\n                            }\r\n                            vec3.sub(dragEndVec, dragEndVec, dragOrigin);\r\n                            quatFromTwoVec(dragRotation, dragStartVec, dragEndVec);\r\n                            vec3.transformQuat(node.forward, dragStartForward, dragRotation);\r\n                            vec3.normalize(node.forward, node.forward);\r\n                            vec3.transformQuat(node.up, dragStartUp, dragRotation);\r\n                            vec3.normalize(node.up, node.up);\r\n                            model.update(camera.camera, node);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            render();\r\n        }\r\n\r\n        function render() {\r\n            renderer.blendMode(renderer.BLEND_MODE_PIGMENT);\r\n\r\n            // model\r\n            renderer.depthTest(true);\r\n            renderer.cullFace(renderer.SIDE_BACK);\r\n            renderer.startCapture(modelFrameBuffer);\r\n            renderer.clearColor(0, 0, 0, 0);\r\n            renderer.clear(true, true, false);\r\n            renderer.useShader(lightShader);\r\n            renderer.uniform('u_directionalLightDirection', lightDirection);\r\n            renderer.uniform('u_pvMatrix', camera.pvMatrix);\r\n            model.render(renderer);\r\n            renderer.endCapture();\r\n\r\n            renderer.save();\r\n            renderer.depthTest(false);\r\n            renderer.clearColor(0xf2 / 0xff, 0xf2 / 0xff, 0xf2 / 0xff, 1.0);\r\n            renderer.clear(true, false, false);\r\n            renderer.centerCamera();\r\n            // begin\r\n            renderer.begin2D();\r\n            // model\r\n            renderer.setColor(1, 1, 1, 1);\r\n            renderer.useShader();\r\n            renderer.draw(modelTexture);\r\n            // outline\r\n            renderer.setColor(0, 0, 0, 0.5);\r\n            renderer.useShader(outlineShader);\r\n            renderer.uniform('u_threshold', 1 / 1000 / (camera.far / 2));\r\n            renderer.uniform('u_deep', deepTexture);\r\n            renderer.draw(modelTexture);\r\n            // end\r\n            renderer.end2D();\r\n            renderer.restore();\r\n\r\n            // control points\r\n            if (!props.readonly) {\r\n                renderer.depthTest(false);\r\n                renderer.useShader();\r\n                renderer.begin2D();\r\n                const stack: SkeletonModelNode[] = [model.root];\r\n                for (; ;) {\r\n                    const node = stack.pop();\r\n                    if (!node) {\r\n                        break;\r\n                    }\r\n                    stack.push(...node.children);\r\n\r\n                    if (node.controlPoint) {\r\n                        if (node.active) {\r\n                            renderer.setColor(1, 0, 0, node === hoveredControlPointNode ? 1 : 0.25);\r\n                        } else {\r\n                            renderer.setColor(0, 0, 0, node === hoveredControlPointNode ? 1 : 0.25);\r\n                        }\r\n                        const position = node.controlPointScreenPosition;\r\n                        drawCircle(renderer,\r\n                            CONTROL_POINT_RADIUS,\r\n                            position[0] * width / 2,\r\n                            position[1] * height / 2,\r\n                        );\r\n                        drawCircle(renderer,\r\n                            CONTROL_POINT_RADIUS - 2,\r\n                            position[0] * width / 2,\r\n                            position[1] * height / 2,\r\n                        );\r\n                    }\r\n                }\r\n                renderer.end2D();\r\n            }\r\n        }\r\n\r\n        return {\r\n            container,\r\n            canvas,\r\n            loading,\r\n            reset,\r\n        };\r\n    }\r\n});"],"names":["_hoisted_1","_hoisted_2","_createVNode","_hoisted_3","_openBlock","_createBlock","glMatrix.ARRAY_TYPE","glMatrix.EPSILON","sub","create","normalize","vec4.normalize","vec4.exactEquals","vec3.create","vec3.fromValues","dot","vec3.dot","vec3.cross","vec3.len","vec3.normalize","mat3.create","vec3.exactEquals","quat.normalize","quat.fromMat3","mat4.create","vec3.transformMat4","sqrLen","vec3.sqrLen","quat.create","vec3.distance","quat.invert"],"mappings":"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"}