{"version":3,"file":"Search.4a5f5d87.js","sources":["../../node_modules/@vicons/antd/es/CloseCircleOutlined.js","../../node_modules/@vicons/antd/es/WarningOutlined.js","../../src/utils/dom.ts","../../src/components/ImageClip/ImageClip.ts?vue&type=script&src&lang.ts","../../src/components/ImageViewer/ImageViewer.ts?vue&type=script&src&lang.ts","../../src/utils/browser-support.ts","../../src/Search/impl/math.ts","../../src/Search/impl/MatchChest.ts","../../src/Search/impl/MatchCrotch.ts","../../src/Search/impl/MatchElbow.ts","../../src/Search/impl/MatchElbowCameraUnrelated.ts","../../src/Search/impl/MatchHip.ts","../../src/Search/impl/MatchHipCameraUnrelated.ts","../../src/Search/impl/MatchKnee.ts","../../src/Search/impl/MatchKneeCameraUnrelated.ts","../../src/Search/impl/MatchShoulder.ts","../../src/Search/impl/MatchShoulderCameraUnrelated.ts","../../src/Search/impl/search.ts","../../src/Search/Search.ts?vue&type=script&src&lang.ts"],"sourcesContent":["import { createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, defineComponent } from 'vue'\nconst _hoisted_1 = {\n  xmlns: 'http://www.w3.org/2000/svg',\n  'xmlns:xlink': 'http://www.w3.org/1999/xlink',\n  viewBox: '0 0 1024 1024'\n}\nconst _hoisted_2 = /*#__PURE__*/ _createVNode(\n  'path',\n  {\n    d: 'M685.4 354.8c0-4.4-3.6-8-8-8l-66 .3L512 465.6l-99.3-118.4l-66.1-.3c-4.4 0-8 3.5-8 8c0 1.9.7 3.7 1.9 5.2l130.1 155L340.5 670a8.32 8.32 0 0 0-1.9 5.2c0 4.4 3.6 8 8 8l66.1-.3L512 564.4l99.3 118.4l66 .3c4.4 0 8-3.5 8-8c0-1.9-.7-3.7-1.9-5.2L553.5 515l130.1-155c1.2-1.4 1.8-3.3 1.8-5.2z',\n    fill: 'currentColor'\n  },\n  null,\n  -1\n  /* HOISTED */\n)\nconst _hoisted_3 = /*#__PURE__*/ _createVNode(\n  'path',\n  {\n    d: 'M512 65C264.6 65 64 265.6 64 513s200.6 448 448 448s448-200.6 448-448S759.4 65 512 65zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372s372 166.6 372 372s-166.6 372-372 372z',\n    fill: 'currentColor'\n  },\n  null,\n  -1\n  /* HOISTED */\n)\nexport default defineComponent({\n  name: 'CloseCircleOutlined',\n  render: function render(_ctx, _cache) {\n    return _openBlock(), _createBlock('svg', _hoisted_1, [_hoisted_2, _hoisted_3])\n  }\n})\n","import { createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, defineComponent } from 'vue'\nconst _hoisted_1 = {\n  xmlns: 'http://www.w3.org/2000/svg',\n  'xmlns:xlink': 'http://www.w3.org/1999/xlink',\n  viewBox: '0 0 1024 1024'\n}\nconst _hoisted_2 = /*#__PURE__*/ _createVNode(\n  'path',\n  {\n    d: 'M464 720a48 48 0 1 0 96 0a48 48 0 1 0-96 0zm16-304v184c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V416c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8zm475.7 440l-416-720c-6.2-10.7-16.9-16-27.7-16s-21.6 5.3-27.7 16l-416 720C56 877.4 71.4 904 96 904h832c24.6 0 40-26.6 27.7-48zm-783.5-27.9L512 239.9l339.8 588.2H172.2z',\n    fill: 'currentColor'\n  },\n  null,\n  -1\n  /* HOISTED */\n)\nexport default defineComponent({\n  name: 'WarningOutlined',\n  render: function render(_ctx, _cache) {\n    return _openBlock(), _createBlock('svg', _hoisted_1, [_hoisted_2])\n  }\n})\n","export function isElementInViewport(el: Element) {\r\n    const rect = el.getBoundingClientRect(),\r\n        width = rect.right - rect.left,\r\n        height = rect.bottom - rect.top;\r\n    return (\r\n        rect.top > -height &&\r\n        rect.left > -width &&\r\n        rect.bottom < (window.innerHeight || document.documentElement.clientHeight) + height &&\r\n        rect.right < (window.innerWidth || document.documentElement.clientWidth) + width\r\n    );\r\n}\r\n\r\n/**\r\n * Allow mouse dragging outside the dragged element.\r\n * @param immediatelyTriggerEvent If not null, immediately trigger drag move event when called\r\n * @param onDragMove\r\n * @param onDragEnd\r\n */\r\nexport function addGlobalDragListener(\r\n    immediatelyTriggerEvent: MouseEvent | null,\r\n    onDragMove: (e: MouseEvent) => void,\r\n    onDragEnd?: (e: MouseEvent) => void\r\n) {\r\n    let onMouseUp: (e: MouseEvent) => void;\r\n    let onMouseOutOfWindow: (e: MouseEvent) => void;\r\n    let _onDragMove = (e: MouseEvent) => {\r\n        return onDragMove(e);\r\n    };\r\n    let _onDragEnd = (e: MouseEvent) => {\r\n        document.removeEventListener('mousemove', _onDragMove);\r\n        document.removeEventListener('mouseup', onMouseUp);\r\n        document.removeEventListener('mouseout', onMouseOutOfWindow);\r\n        return onDragEnd && onDragEnd(e);\r\n    };\r\n    onMouseUp = _onDragEnd;\r\n    onMouseOutOfWindow = (e: MouseEvent) => {\r\n        if (!e.relatedTarget || ((e.relatedTarget as HTMLElement).nodeName === 'HTML')) {\r\n            _onDragEnd(e);\r\n        }\r\n    };\r\n\r\n    document.addEventListener('mousemove', _onDragMove);\r\n    document.addEventListener('mouseup', onMouseUp);\r\n    document.addEventListener('mouseout', onMouseOutOfWindow);\r\n\r\n    if (immediatelyTriggerEvent) {\r\n        _onDragMove(immediatelyTriggerEvent);\r\n    }\r\n}\r\n","import {computed, defineComponent, onBeforeUnmount, onMounted, PropType, ref} from 'vue';\r\nimport {isElementInViewport} from '../../utils/dom';\r\n\r\nexport default defineComponent({\r\n    props: {\r\n        src: {type: String, required: true},\r\n        width: {type: Number, required: true},\r\n        height: {type: Number, required: true},\r\n        imgWidth: {type: Number, required: true},\r\n        imgHeight: {type: Number, required: true},\r\n        center: {type: Object as PropType<[number, number, number]>, required: true},\r\n        related: {type: Array as PropType<[number, number, number][]>, required: true},\r\n        landmarks: {type: Array as PropType<{ point: [number, number, number], visibility: number }[]>, required: true},\r\n        flip: Boolean,\r\n    },\r\n    setup(props) {\r\n        const dom = ref<Element>();\r\n        const visible = ref(false);\r\n\r\n        const imgStyle = computed(function () {\r\n            const cx = props.flip ? 1 - props.center[0] : props.center[0];\r\n            let xl = cx;\r\n            let xh = cx;\r\n            for (let point of props.related) {\r\n                const x = props.flip ? 1 - point[0] : point[0];\r\n                xl = Math.min(xl, x);\r\n                xh = Math.max(xh, x);\r\n            }\r\n            xl = Math.max(0, xl);\r\n            xh = Math.min(1, xh);\r\n            const xr = Math.max(Math.abs(cx - xl), Math.abs(xh - cx));\r\n\r\n            const cy = props.center[1];\r\n            let yl = cy;\r\n            let yh = cy;\r\n            for (let point of props.related) {\r\n                yl = Math.min(yl, point[1]);\r\n                yh = Math.max(yh, point[1]);\r\n            }\r\n            yl = Math.max(0, yl);\r\n            yh = Math.min(1, yh);\r\n            const yr = Math.max(Math.abs(cy - yl), Math.abs(yh - cy));\r\n\r\n            const r = (xr + yr) / 2 + Math.min(xr, yr) / 4;\r\n\r\n            const preferWidth = r * 2 * props.imgWidth;\r\n            const preferHeight = r * 2 * props.imgHeight;\r\n            const scale = Math.min(props.width / preferWidth, props.height / preferHeight);\r\n            const width = props.imgWidth * scale;\r\n            const height = props.imgHeight * scale;\r\n            const left = -cx * width + props.width / 2;\r\n            const top = -cy * height + props.height / 2;\r\n            return {\r\n                left: Math.round(left) + 'px',\r\n                top: Math.round(top) + 'px',\r\n                width: Math.floor(width) + 'px',\r\n                height: Math.floor(height) + 'px',\r\n                transform: props.flip ? 'scaleX(-1)' : '',\r\n            };\r\n        });\r\n\r\n        let checkVisibilityTid: NodeJS.Timer | null = null;\r\n\r\n        onMounted(function () {\r\n            checkVisibilityTid = setInterval(checkVisibility, 100);\r\n            checkVisibility();\r\n        });\r\n\r\n        onBeforeUnmount(function () {\r\n            if (checkVisibilityTid != null) {\r\n                clearInterval(checkVisibilityTid);\r\n            }\r\n        });\r\n\r\n        function checkVisibility() {\r\n            if (dom.value && isElementInViewport(dom.value)) {\r\n                visible.value = true;\r\n                if (checkVisibilityTid != null) {\r\n                    clearInterval(checkVisibilityTid);\r\n                    checkVisibilityTid = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            dom,\r\n            imgStyle,\r\n            visible,\r\n        };\r\n    }\r\n});","import {CloseCircleOutlined} from '@vicons/antd';\r\nimport {NIcon, NSpin} from 'naive-ui';\r\nimport {computed, defineComponent, ref, watch} from 'vue';\r\nimport {APP_NAME} from '../../config';\r\nimport {addGlobalDragListener} from '../../utils/dom';\r\nimport {loadImage} from '../../utils/image';\r\n\r\nconst MAX_ZOOM = 14;\r\nconst MIN_ZOOM = -10;\r\n\r\nexport default defineComponent({\r\n    components: {\r\n        NIcon,\r\n        NSpin,\r\n\r\n        CloseCircleOutlined,\r\n    },\r\n    props: {\r\n        show: Boolean,\r\n        id: {type: String, required: true},\r\n        regular: {type: String, required: true},\r\n        full: {type: String, required: true},\r\n        authorName: {type: String, required: true},\r\n        authorUsername: {type: String, required: true},\r\n        flip: Boolean,\r\n    },\r\n    emits: ['update:show'],\r\n    setup(props, ctx) {\r\n        const fullLoading = ref(false);\r\n        const zoom = ref(0);\r\n        const dx = ref(0);\r\n        const dy = ref(0);\r\n\r\n        const authorUrl = computed(function () {\r\n            return `https://unsplash.com/@${props.authorUsername}?utm_source=${APP_NAME}&utm_medium=referral`;\r\n        });\r\n        const unsplashUrl = computed(function () {\r\n            return `https://unsplash.com/?utm_source=${APP_NAME}&utm_medium=referral`;\r\n        });\r\n        const imgStyle = computed(function () {\r\n            const scale = 1.1 ** zoom.value;\r\n            const translateX = -dx.value / scale * (props.flip ? -1 : 1);\r\n            const translateY = dy.value / scale;\r\n            return {\r\n                transform: `scaleX(${(props.flip ? -1 : 1) * scale}) scaleY(${scale}) translateX(${translateX}px) translateY(${translateY}px)`\r\n            };\r\n        });\r\n\r\n        watch(() => props.full, async function () {\r\n            resetTransform();\r\n            if (!props.full) {\r\n                return;\r\n            }\r\n            try {\r\n                fullLoading.value = true;\r\n                await loadImage(props.full);\r\n            } finally {\r\n                fullLoading.value = false;\r\n            }\r\n        });\r\n\r\n        function close() {\r\n            resetTransform();\r\n            ctx.emit('update:show', false);\r\n        }\r\n\r\n        function resetTransform() {\r\n            zoom.value = 0;\r\n            dx.value = 0;\r\n            dy.value = 0;\r\n        }\r\n\r\n        function onWheel(e: WheelEvent) {\r\n            zoom.value -= Math.round(e.deltaY / 100);\r\n            zoom.value = Math.max(MIN_ZOOM, Math.min(MAX_ZOOM, zoom.value));\r\n        }\r\n\r\n        function onMouseDown(e: MouseEvent) {\r\n            if (e.button === 0) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                const dragStartX = dx.value;\r\n                const dragStartY = dy.value;\r\n                const x0 = e.clientX;\r\n                const y0 = e.clientY;\r\n                addGlobalDragListener(\r\n                    e,\r\n                    function (e: MouseEvent) {\r\n                        dx.value = dragStartX - (e.clientX - x0);\r\n                        dy.value = dragStartY + e.clientY - y0;\r\n                    }\r\n                );\r\n            }\r\n        }\r\n\r\n        return {\r\n            fullLoading,\r\n            authorUrl,\r\n            unsplashUrl,\r\n            imgStyle,\r\n\r\n            close,\r\n            onWheel,\r\n            onMouseDown,\r\n        };\r\n    }\r\n});","export function isWebGL2Supported() {\r\n    return !!document.createElement('canvas')?.getContext('webgl2');\r\n}\r\n\r\nexport function isMouseSupported() {\r\n    return 'PointerEvent' in window;\r\n}","import {quat, ReadonlyVec3, vec3} from 'gl-matrix';\r\nimport {angleBetweenVec3, quatLookRotation} from '../../utils/math/math';\r\n\r\nexport function mid(...points: ReadonlyVec3[]) {\r\n    const ret: [number, number, number] = [0, 0, 0];\r\n    for (let point of points) {\r\n        vec3.add(ret, ret, point);\r\n    }\r\n    if (points.length) {\r\n        vec3.scale(ret, ret, 1 / points.length);\r\n    }\r\n    return ret;\r\n}\r\n\r\nexport function simplifyAngle(rad: number) {\r\n    rad = rad % (Math.PI * 2);\r\n    if (rad < 0) {\r\n        rad += Math.PI * 2;\r\n    }\r\n    return rad;\r\n}\r\n\r\nexport function getAngle2D(a0: ReadonlyVec3, a1: ReadonlyVec3, b0: ReadonlyVec3, b1: ReadonlyVec3) {\r\n    return Math.atan2(b1[1] - b0[1], b1[0] - b0[0]) - Math.atan2(a1[1] - a0[1], a1[0] - a0[0]);\r\n}\r\n\r\nexport function getAngle(a0: ReadonlyVec3, a1: ReadonlyVec3, b0: ReadonlyVec3, b1: ReadonlyVec3) {\r\n    const a: ReadonlyVec3 = [\r\n        a1[0] - a0[0],\r\n        a1[1] - a0[1],\r\n        a1[2] - a0[2],\r\n    ];\r\n    const b: ReadonlyVec3 = [\r\n        b1[0] - b0[0],\r\n        b1[1] - b0[1],\r\n        b1[2] - b0[2],\r\n    ];\r\n    return angleBetweenVec3(a, b);\r\n}\r\n\r\nexport function avg(...nums: number[]) {\r\n    return nums.reduce((sum, curr) => sum + curr, 0) / nums.length;\r\n}\r\n\r\nexport const getNormalInLocalSpace = (function () {\r\n    const up = vec3.create();\r\n    const right = vec3.create();\r\n    const forward = vec3.create();\r\n    const v = vec3.create();\r\n    const q = quat.create();\r\n    return function (\r\n        right0: ReadonlyVec3,\r\n        right1: ReadonlyVec3,\r\n        up0: ReadonlyVec3,\r\n        up1: ReadonlyVec3,\r\n        v0: ReadonlyVec3,\r\n        v1: ReadonlyVec3,\r\n        flipX: boolean = false,\r\n    ) {\r\n        vec3.sub(up, up1, up0);\r\n        if (flipX) {\r\n            up[0] = -up[0];\r\n        }\r\n        vec3.normalize(up, up);\r\n        vec3.sub(right, right1, right0);\r\n        if (flipX) {\r\n            right[0] = -right[0];\r\n        }\r\n        vec3.cross(forward, right, up);\r\n        vec3.normalize(forward, forward);\r\n        quatLookRotation(q, forward, up);\r\n        quat.invert(q, q);\r\n        vec3.sub(v, v1, v0);\r\n        if (flipX) {\r\n            v[0] = -v[0];\r\n        }\r\n        vec3.normalize(v, v);\r\n        return vec3.transformQuat([0, 0, 0], v, q) as [number, number, number];\r\n    };\r\n})();\r\n\r\nexport function getNormal(\r\n    v0: ReadonlyVec3,\r\n    v1: ReadonlyVec3,\r\n) {\r\n    const v = vec3.sub([0, 0, 0], v1, v0) as [number, number, number];\r\n    vec3.normalize(v, v);\r\n    return v;\r\n}\r\n\r\nexport function normalizedLandmarkToViewSpace(point: ReadonlyVec3, aspect: number) {\r\n    return [\r\n        (point[0] * 2 - 1) * aspect,\r\n        -point[1] * 2 + 1,\r\n        point[2] * aspect\r\n    ] as [number, number, number];\r\n}\r\n\r\nexport function flipX(point: ReadonlyVec3) {\r\n    return [-point[0], point[1], point[2]] as [number, number, number];\r\n}\r\n\r\nexport function cross(a: ReadonlyVec3, b: ReadonlyVec3) {\r\n    const ret: [number, number, number] = [0, 0, 0];\r\n    vec3.cross(ret, a, b);\r\n    return ret;\r\n}","import SkeletonModel from '../../components/SkeletonModelCanvas/model/SkeletonModel';\r\nimport {LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD} from '../../config';\r\nimport {angleBetweenVec3} from '../../utils/math/math';\r\nimport Photo from '../../utils/Photo';\r\nimport {flipX, getNormal, mid, normalizedLandmarkToViewSpace} from './math';\r\nimport {MatchResult, PoseMatcher} from './search';\r\n\r\nconst MAX_VIEW_SPACE_ANGLE_ERROR = Math.PI / 180 * 45;\r\n\r\nexport default class MatchChest implements PoseMatcher {\r\n\r\n    private targetUp: [number, number, number] = [0, 0, 0];\r\n    private targetRight: [number, number, number] = [0, 0, 0];\r\n    private targetUpMirror: [number, number, number] = [0, 0, 0];\r\n    private targetRightMirror: [number, number, number] = [0, 0, 0];\r\n\r\n    prepare(model: SkeletonModel) {\r\n        this.targetUp = getNormal(\r\n            mid(model.leftThigh.originViewPosition, model.rightThigh.originViewPosition),\r\n            mid(model.leftUpperArm.originViewPosition, model.rightUpperArm.originViewPosition)\r\n        );\r\n        this.targetRight = getNormal(model.rightUpperArm.originViewPosition, model.leftUpperArm.originViewPosition);\r\n        this.targetUpMirror = getNormal(\r\n            flipX(mid(model.leftThigh.originViewPosition, model.rightThigh.originViewPosition)),\r\n            flipX(mid(model.leftUpperArm.originViewPosition, model.rightUpperArm.originViewPosition))\r\n        );\r\n        this.targetRightMirror = getNormal(flipX(model.leftUpperArm.originViewPosition), flipX(model.rightUpperArm.originViewPosition));\r\n    }\r\n\r\n    match(photo: Photo): MatchResult | null {\r\n        const landmarks = photo.normalizedLandmarks;\r\n\r\n        const conf = Math.min(\r\n            landmarks[12].visibility,\r\n            landmarks[11].visibility,\r\n            landmarks[24].visibility,\r\n            landmarks[23].visibility\r\n        );\r\n        if (conf < LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD) {\r\n            return null;\r\n        }\r\n\r\n        const aspect = photo.width / photo.height;\r\n\r\n        const leftShoulder = normalizedLandmarkToViewSpace(landmarks[11].point, aspect);\r\n        const rightShoulder = normalizedLandmarkToViewSpace(landmarks[12].point, aspect);\r\n        const leftHip = normalizedLandmarkToViewSpace(landmarks[23].point, aspect);\r\n        const rightHip = normalizedLandmarkToViewSpace(landmarks[24].point, aspect);\r\n        const trunkUp = getNormal(mid(leftHip, rightHip), mid(leftShoulder, rightShoulder));\r\n        const trunkRight = getNormal(rightShoulder, leftShoulder);\r\n\r\n        const angleError1 = angleBetweenVec3(this.targetUp, trunkUp);\r\n        const angleError2 = angleBetweenVec3(this.targetRight, trunkRight);\r\n        const score = (Math.PI - angleError1) * (Math.PI - angleError2);\r\n\r\n        const angleError1F = angleBetweenVec3(this.targetUpMirror, trunkUp);\r\n        const angleError2F = angleBetweenVec3(this.targetRightMirror, trunkRight);\r\n        const scoreF = (Math.PI - angleError1F) * (Math.PI - angleError2F);\r\n\r\n        let bestScore = 0;\r\n        let flip = false;\r\n\r\n        if (angleError1 <= MAX_VIEW_SPACE_ANGLE_ERROR && angleError2 <= MAX_VIEW_SPACE_ANGLE_ERROR && score > scoreF) {\r\n            bestScore = score;\r\n        } else if (angleError1F <= MAX_VIEW_SPACE_ANGLE_ERROR && angleError2F <= MAX_VIEW_SPACE_ANGLE_ERROR) {\r\n            bestScore = scoreF;\r\n            flip = true;\r\n        } else {\r\n            return null;\r\n        }\r\n\r\n        return {\r\n            score: bestScore,\r\n            center: mid(landmarks[11].point, landmarks[12].point),\r\n            related: [\r\n                landmarks[11].point,\r\n                landmarks[12].point,\r\n                landmarks[13].point,\r\n                landmarks[14].point,\r\n                mid(\r\n                    landmarks[24].point,\r\n                    landmarks[23].point,\r\n                    landmarks[12].point,\r\n                    landmarks[11].point\r\n                )\r\n            ],\r\n            flip\r\n        };\r\n    }\r\n\r\n}","import SkeletonModel from '../../components/SkeletonModelCanvas/model/SkeletonModel';\r\nimport {LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD} from '../../config';\r\nimport {angleBetweenVec3} from '../../utils/math/math';\r\nimport Photo from '../../utils/Photo';\r\nimport {flipX, getNormal, mid, normalizedLandmarkToViewSpace} from './math';\r\nimport {MatchResult, PoseMatcher} from './search';\r\n\r\nconst MAX_VIEW_SPACE_ANGLE_ERROR = Math.PI / 180 * 45;\r\n\r\nexport default class MatchCrotch implements PoseMatcher {\r\n\r\n    private targetUp: [number, number, number] = [0, 0, 0];\r\n    private targetRight: [number, number, number] = [0, 0, 0];\r\n    private targetUpMirror: [number, number, number] = [0, 0, 0];\r\n    private targetRightMirror: [number, number, number] = [0, 0, 0];\r\n\r\n    prepare(model: SkeletonModel) {\r\n        this.targetUp = getNormal(\r\n            mid(model.leftThigh.originViewPosition, model.rightThigh.originViewPosition),\r\n            mid(model.leftUpperArm.originViewPosition, model.rightUpperArm.originViewPosition)\r\n        );\r\n        this.targetRight = getNormal(model.rightThigh.originViewPosition, model.leftThigh.originViewPosition);\r\n        this.targetUpMirror = getNormal(\r\n            flipX(mid(model.leftThigh.originViewPosition, model.rightThigh.originViewPosition)),\r\n            flipX(mid(model.leftUpperArm.originViewPosition, model.rightUpperArm.originViewPosition))\r\n        );\r\n        this.targetRightMirror = getNormal(flipX(model.leftThigh.originViewPosition), flipX(model.rightThigh.originViewPosition));\r\n    }\r\n\r\n    match(photo: Photo): MatchResult | null {\r\n        const landmarks = photo.normalizedLandmarks;\r\n\r\n        const conf = Math.min(\r\n            landmarks[12].visibility,\r\n            landmarks[11].visibility,\r\n            landmarks[24].visibility,\r\n            landmarks[23].visibility\r\n        );\r\n        if (conf < LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD) {\r\n            return null;\r\n        }\r\n\r\n        const aspect = photo.width / photo.height;\r\n\r\n        const leftShoulder = normalizedLandmarkToViewSpace(landmarks[11].point, aspect);\r\n        const rightShoulder = normalizedLandmarkToViewSpace(landmarks[12].point, aspect);\r\n        const leftHip = normalizedLandmarkToViewSpace(landmarks[23].point, aspect);\r\n        const rightHip = normalizedLandmarkToViewSpace(landmarks[24].point, aspect);\r\n        const trunkUp = getNormal(mid(leftHip, rightHip), mid(leftShoulder, rightShoulder));\r\n        const trunkRight = getNormal(rightHip, leftHip);\r\n\r\n        const angleError1 = angleBetweenVec3(this.targetUp, trunkUp);\r\n        const angleError2 = angleBetweenVec3(this.targetRight, trunkRight);\r\n        const score = (Math.PI - angleError1) * (Math.PI - angleError2);\r\n\r\n        const angleError1F = angleBetweenVec3(this.targetUpMirror, trunkUp);\r\n        const angleError2F = angleBetweenVec3(this.targetRightMirror, trunkRight);\r\n        const scoreF = (Math.PI - angleError1F) * (Math.PI - angleError2F);\r\n\r\n        let bestScore = 0;\r\n        let flip = false;\r\n\r\n        if (angleError1 <= MAX_VIEW_SPACE_ANGLE_ERROR && angleError2 <= MAX_VIEW_SPACE_ANGLE_ERROR && score > scoreF) {\r\n            bestScore = score;\r\n        } else if (angleError1F <= MAX_VIEW_SPACE_ANGLE_ERROR && angleError2F <= MAX_VIEW_SPACE_ANGLE_ERROR) {\r\n            bestScore = scoreF;\r\n            flip = true;\r\n        } else {\r\n            return null;\r\n        }\r\n\r\n        return {\r\n            score: bestScore,\r\n            center: mid(landmarks[23].point, landmarks[24].point),\r\n            related: [\r\n                landmarks[23].point,\r\n                landmarks[24].point,\r\n                landmarks[25].point,\r\n                landmarks[26].point,\r\n                mid(\r\n                    landmarks[24].point,\r\n                    landmarks[23].point,\r\n                    landmarks[12].point,\r\n                    landmarks[11].point\r\n                )\r\n            ],\r\n            flip\r\n        };\r\n    }\r\n\r\n}","import SkeletonModel from '../../components/SkeletonModelCanvas/model/SkeletonModel';\r\nimport {LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD} from '../../config';\r\nimport {angleBetweenVec3} from '../../utils/math/math';\r\nimport Photo from '../../utils/Photo';\r\nimport {\r\n    avg,\r\n    cross,\r\n    flipX,\r\n    getAngle,\r\n    getAngle2D,\r\n    getNormal,\r\n    getNormalInLocalSpace,\r\n    mid,\r\n    normalizedLandmarkToViewSpace,\r\n    simplifyAngle\r\n} from './math';\r\nimport {MatchResult, PoseMatcher} from './search';\r\n\r\nconst MAX_VIEW_ANGLE_ERROR = Math.PI / 180 * 45;\r\nconst MAX_WORLD_SPACE_ANGLE_ERROR = Math.PI / 180 * 45;\r\n\r\nconst Z_AXIS: [number, number, number] = [0, 0, 1];\r\n\r\nexport default class MatchElbow implements PoseMatcher {\r\n\r\n    private isLeft: boolean;\r\n\r\n    private upperArmZAxisAngle: number = 0;\r\n    private lowerArmZAxisAngle: number = 0;\r\n    private elbowAngle: number = 0;\r\n    private elbowViewAngle: number = 0;\r\n\r\n    private upperArmLocalDir: [number, number, number] = [0, 0, 0];\r\n    private upperArmLocalDirMirror: [number, number, number] = [0, 0, 0];\r\n    private trunkForward: [number, number, number] = [0, 0, 0];\r\n    private trunkForwardMirror: [number, number, number] = [0, 0, 0];\r\n\r\n    constructor(isLeft: boolean) {\r\n        this.isLeft = isLeft;\r\n    }\r\n\r\n    prepare(model: SkeletonModel): void {\r\n        let shoulder = model.rightUpperArm.originViewPosition;\r\n        let elbow = model.rightUpperArm.controlPointViewPosition;\r\n        let wrist = model.rightLowerArm.controlPointViewPosition;\r\n        if (this.isLeft) {\r\n            shoulder = model.leftUpperArm.originViewPosition;\r\n            elbow = model.leftUpperArm.controlPointViewPosition;\r\n            wrist = model.leftLowerArm.controlPointViewPosition;\r\n        }\r\n        const upperArmNormal = getNormal(shoulder, elbow);\r\n        const lowerArmNormal = getNormal(elbow, wrist);\r\n        this.upperArmZAxisAngle = angleBetweenVec3(Z_AXIS, upperArmNormal);\r\n        this.lowerArmZAxisAngle = angleBetweenVec3(Z_AXIS, lowerArmNormal);\r\n        this.elbowAngle = angleBetweenVec3(upperArmNormal, lowerArmNormal);\r\n        this.elbowViewAngle = simplifyAngle(getAngle2D(elbow, shoulder, elbow, wrist)) - Math.PI;\r\n\r\n        if (this.isLeft) {\r\n            this.upperArmLocalDir = getNormalInLocalSpace(\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.leftUpperArm.controlPointWorldPosition,\r\n            );\r\n            this.upperArmLocalDirMirror = getNormalInLocalSpace(\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.leftUpperArm.controlPointWorldPosition,\r\n                true,\r\n            );\r\n        } else {\r\n            this.upperArmLocalDir = getNormalInLocalSpace(\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.rightUpperArm.controlPointWorldPosition,\r\n            );\r\n            this.upperArmLocalDirMirror = getNormalInLocalSpace(\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.rightUpperArm.controlPointWorldPosition,\r\n                true,\r\n            );\r\n        }\r\n\r\n        const trunkViewUp = getNormal(\r\n            mid(model.leftThigh.originViewPosition, model.rightThigh.originViewPosition),\r\n            mid(model.leftUpperArm.originViewPosition, model.rightUpperArm.originViewPosition)\r\n        );\r\n        const trunkViewUpMirror = getNormal(\r\n            flipX(mid(model.leftThigh.originViewPosition, model.rightThigh.originViewPosition)),\r\n            flipX(mid(model.leftUpperArm.originViewPosition, model.rightUpperArm.originViewPosition))\r\n        );\r\n        const trunkViewRight = getNormal(model.rightUpperArm.originViewPosition, model.leftUpperArm.originViewPosition);\r\n        const trunkViewRightMirror = getNormal(flipX(model.leftUpperArm.originViewPosition), flipX(model.rightUpperArm.originViewPosition));\r\n        this.trunkForward = cross(trunkViewRight, trunkViewUp);\r\n        this.trunkForwardMirror = cross(trunkViewRightMirror, trunkViewUpMirror);\r\n    }\r\n\r\n    match(photo: Photo): MatchResult | null {\r\n        const aspect = photo.width / photo.height;\r\n        const normalized = photo.normalizedLandmarks;\r\n        const world = photo.worldLandmarks;\r\n\r\n        const leftShoulderView = normalizedLandmarkToViewSpace(normalized[11].point, aspect);\r\n        const rightShoulderView = normalizedLandmarkToViewSpace(normalized[12].point, aspect);\r\n        const leftHipView = normalizedLandmarkToViewSpace(normalized[23].point, aspect);\r\n        const rightHipView = normalizedLandmarkToViewSpace(normalized[24].point, aspect);\r\n        const trunkUpView = getNormal(mid(leftHipView, rightHipView), mid(leftShoulderView, rightShoulderView));\r\n        const trunkRightView = getNormal(rightShoulderView, leftShoulderView);\r\n        const trunkForwardView = cross(trunkRightView, trunkUpView);\r\n\r\n        const confL = Math.min(\r\n            avg(normalized[11].visibility, normalized[13].visibility),\r\n            avg(normalized[13].visibility, normalized[15].visibility)\r\n        );\r\n        let upperArmZAngleErrorL = Infinity;\r\n        let lowerArmZAngleErrorL = Infinity;\r\n        let elbowAngleErrorL = Infinity;\r\n        let elbowViewAngleErrorL = Infinity;\r\n        let upperArmLocalAngleErrorL = Infinity;\r\n        let forwardErrorL = Infinity;\r\n        if (confL >= LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD) {\r\n            const shoulderView = leftShoulderView;\r\n            const elbowView = normalizedLandmarkToViewSpace(normalized[13].point, aspect);\r\n            const wristView = normalizedLandmarkToViewSpace(normalized[15].point, aspect);\r\n            const upperArmViewNormal = getNormal(shoulderView, elbowView);\r\n            const lowerArmViewNormal = getNormal(elbowView, wristView);\r\n            const upperArmZAxisAngle = angleBetweenVec3(Z_AXIS, upperArmViewNormal);\r\n            const lowerArmZAxisAngle = angleBetweenVec3(Z_AXIS, lowerArmViewNormal);\r\n            upperArmZAngleErrorL = Math.abs(this.upperArmZAxisAngle - upperArmZAxisAngle);\r\n            lowerArmZAngleErrorL = Math.abs(this.lowerArmZAxisAngle - lowerArmZAxisAngle);\r\n\r\n            const shoulder = world[11].point;\r\n            const elbow = world[13].point;\r\n            const wrist = world[15].point;\r\n            const elbowAngle = getAngle(shoulder, elbow, elbow, wrist);\r\n            elbowAngleErrorL = Math.abs(this.elbowAngle - elbowAngle);\r\n\r\n            const elbowViewAngle = simplifyAngle(getAngle2D(elbowView, shoulderView, elbowView, wristView)) - Math.PI;\r\n            elbowViewAngleErrorL = Math.abs(this.elbowViewAngle - elbowViewAngle * (this.isLeft ? 1 : -1));\r\n\r\n            const upperArmLocalDir = getNormalInLocalSpace(\r\n                world[12].point,\r\n                world[11].point,\r\n                world[23].point,\r\n                world[11].point,\r\n                world[11].point,\r\n                world[13].point,\r\n            );\r\n            upperArmLocalAngleErrorL = angleBetweenVec3(upperArmLocalDir, this.isLeft ? this.upperArmLocalDir : this.upperArmLocalDirMirror);\r\n\r\n            forwardErrorL = angleBetweenVec3(trunkForwardView, this.isLeft ? this.trunkForward : this.trunkForwardMirror);\r\n        }\r\n        const scoreL = (Math.PI - upperArmZAngleErrorL)\r\n            * (Math.PI - lowerArmZAngleErrorL)\r\n            * (Math.PI - elbowAngleErrorL)\r\n            * (Math.PI * 2 - elbowViewAngleErrorL)\r\n            * (Math.PI - upperArmLocalAngleErrorL)\r\n            * (Math.PI - forwardErrorL)\r\n        ;\r\n\r\n        const confR = Math.min(\r\n            avg(normalized[12].visibility, normalized[14].visibility),\r\n            avg(normalized[14].visibility, normalized[16].visibility)\r\n        );\r\n        let upperArmZAngleErrorR = Infinity;\r\n        let lowerArmZAngleErrorR = Infinity;\r\n        let elbowAngleErrorR = Infinity;\r\n        let elbowViewAngleErrorR = Infinity;\r\n        let upperArmLocalAngleErrorR = Infinity;\r\n        let forwardErrorR = Infinity;\r\n        if (confR >= LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD) {\r\n            const shoulderView = rightShoulderView;\r\n            const elbowView = normalizedLandmarkToViewSpace(normalized[14].point, aspect);\r\n            const wristView = normalizedLandmarkToViewSpace(normalized[16].point, aspect);\r\n            const upperArmViewNormal = getNormal(shoulderView, elbowView);\r\n            const lowerArmViewNormal = getNormal(elbowView, wristView);\r\n            const upperArmZAxisAngle = angleBetweenVec3(Z_AXIS, upperArmViewNormal);\r\n            const lowerArmZAxisAngle = angleBetweenVec3(Z_AXIS, lowerArmViewNormal);\r\n            upperArmZAngleErrorR = Math.abs(this.upperArmZAxisAngle - upperArmZAxisAngle);\r\n            lowerArmZAngleErrorR = Math.abs(this.lowerArmZAxisAngle - lowerArmZAxisAngle);\r\n\r\n            const shoulder = world[12].point;\r\n            const elbow = world[14].point;\r\n            const wrist = world[16].point;\r\n            const elbowAngle = getAngle(shoulder, elbow, elbow, wrist);\r\n            elbowAngleErrorR = Math.abs(this.elbowAngle - elbowAngle);\r\n\r\n            const elbowViewAngle = simplifyAngle(getAngle2D(elbowView, shoulderView, elbowView, wristView)) - Math.PI;\r\n            elbowViewAngleErrorR = Math.abs(this.elbowViewAngle - elbowViewAngle * (this.isLeft ? -1 : 1));\r\n\r\n            const upperArmLocalDir = getNormalInLocalSpace(\r\n                world[11].point,\r\n                world[12].point,\r\n                world[24].point,\r\n                world[12].point,\r\n                world[12].point,\r\n                world[14].point,\r\n            );\r\n            upperArmLocalAngleErrorR = angleBetweenVec3(upperArmLocalDir, !this.isLeft ? this.upperArmLocalDir : this.upperArmLocalDirMirror);\r\n\r\n            forwardErrorR = angleBetweenVec3(trunkForwardView, this.isLeft ? this.trunkForwardMirror : this.trunkForward);\r\n        }\r\n        const scoreR = (Math.PI - upperArmZAngleErrorR)\r\n            * (Math.PI - lowerArmZAngleErrorR)\r\n            * (Math.PI - elbowAngleErrorR)\r\n            * (Math.PI * 2 - elbowViewAngleErrorR)\r\n            * (Math.PI - upperArmLocalAngleErrorR)\r\n            * (Math.PI - forwardErrorR)\r\n        ;\r\n\r\n        if (scoreL >= scoreR\r\n            && upperArmZAngleErrorL <= MAX_VIEW_ANGLE_ERROR\r\n            && lowerArmZAngleErrorL <= MAX_VIEW_ANGLE_ERROR\r\n            && elbowAngleErrorL <= MAX_WORLD_SPACE_ANGLE_ERROR\r\n            && elbowViewAngleErrorL <= MAX_VIEW_ANGLE_ERROR\r\n            && upperArmLocalAngleErrorL <= MAX_WORLD_SPACE_ANGLE_ERROR\r\n        ) {\r\n            return {\r\n                score: scoreL,\r\n                center: normalized[13].point,\r\n                related: [normalized[11].point, normalized[15].point],\r\n                flip: !this.isLeft\r\n            };\r\n        } else if (\r\n            upperArmZAngleErrorR <= MAX_VIEW_ANGLE_ERROR\r\n            && lowerArmZAngleErrorR <= MAX_VIEW_ANGLE_ERROR\r\n            && elbowAngleErrorR <= MAX_WORLD_SPACE_ANGLE_ERROR\r\n            && elbowViewAngleErrorR <= MAX_VIEW_ANGLE_ERROR\r\n            && upperArmLocalAngleErrorR <= MAX_WORLD_SPACE_ANGLE_ERROR\r\n        ) {\r\n            return {\r\n                score: scoreR,\r\n                center: normalized[14].point,\r\n                related: [normalized[12].point, normalized[16].point],\r\n                flip: this.isLeft\r\n            };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n}","import SkeletonModel from '../../components/SkeletonModelCanvas/model/SkeletonModel';\r\nimport {LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD} from '../../config';\r\nimport {angleBetweenVec3} from '../../utils/math/math';\r\nimport Photo from '../../utils/Photo';\r\nimport {avg, getAngle, getNormal, getNormalInLocalSpace} from './math';\r\nimport {MatchResult, PoseMatcher} from './search';\r\n\r\nconst MAX_WORLD_SPACE_ANGLE_ERROR = Math.PI / 180 * 45;\r\n\r\nexport default class MatchElbowCameraUnrelated implements PoseMatcher {\r\n\r\n    private isLeft: boolean;\r\n\r\n    private elbowAngle: number = 0;\r\n    private upperArmLocalDir: [number, number, number] = [0, 0, 0];\r\n    private upperArmLocalDirMirror: [number, number, number] = [0, 0, 0];\r\n    private lowerArmLocalDir: [number, number, number] = [0, 0, 0];\r\n    private lowerArmLocalDirMirror: [number, number, number] = [0, 0, 0];\r\n\r\n    constructor(isLeft: boolean) {\r\n        this.isLeft = isLeft;\r\n    }\r\n\r\n    prepare(model: SkeletonModel): void {\r\n        let shoulder = model.rightUpperArm.originWorldPosition;\r\n        let elbow = model.rightUpperArm.controlPointWorldPosition;\r\n        let wrist = model.rightLowerArm.controlPointWorldPosition;\r\n        if (this.isLeft) {\r\n            shoulder = model.leftUpperArm.originWorldPosition;\r\n            elbow = model.leftUpperArm.controlPointWorldPosition;\r\n            wrist = model.leftLowerArm.controlPointWorldPosition;\r\n        }\r\n        const upperArmNormal = getNormal(shoulder, elbow);\r\n        const lowerArmNormal = getNormal(elbow, wrist);\r\n        this.elbowAngle = angleBetweenVec3(upperArmNormal, lowerArmNormal);\r\n\r\n        if (this.isLeft) {\r\n            this.upperArmLocalDir = getNormalInLocalSpace(\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.leftUpperArm.controlPointWorldPosition,\r\n            );\r\n            this.upperArmLocalDirMirror = getNormalInLocalSpace(\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.leftUpperArm.controlPointWorldPosition,\r\n                true,\r\n            );\r\n\r\n            this.lowerArmLocalDir = getNormalInLocalSpace(\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.leftUpperArm.controlPointWorldPosition,\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.leftLowerArm.originWorldPosition,\r\n                model.leftLowerArm.controlPointWorldPosition,\r\n            );\r\n            this.lowerArmLocalDirMirror = getNormalInLocalSpace(\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.leftUpperArm.controlPointWorldPosition,\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.leftLowerArm.originWorldPosition,\r\n                model.leftLowerArm.controlPointWorldPosition,\r\n                true\r\n            );\r\n        } else {\r\n            this.upperArmLocalDir = getNormalInLocalSpace(\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.rightUpperArm.controlPointWorldPosition,\r\n            );\r\n            this.upperArmLocalDirMirror = getNormalInLocalSpace(\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.rightUpperArm.controlPointWorldPosition,\r\n                true,\r\n            );\r\n\r\n            this.lowerArmLocalDir = getNormalInLocalSpace(\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.rightUpperArm.controlPointWorldPosition,\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.rightLowerArm.originWorldPosition,\r\n                model.rightLowerArm.controlPointWorldPosition,\r\n            );\r\n            this.lowerArmLocalDirMirror = getNormalInLocalSpace(\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.rightUpperArm.controlPointWorldPosition,\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.rightLowerArm.originWorldPosition,\r\n                model.rightLowerArm.controlPointWorldPosition,\r\n                true\r\n            );\r\n        }\r\n    }\r\n\r\n    match(photo: Photo): MatchResult | null {\r\n        const world = photo.worldLandmarks;\r\n        const normalized = photo.normalizedLandmarks;\r\n\r\n        const confL = Math.min(\r\n            avg(world[11].visibility, world[13].visibility),\r\n            avg(world[13].visibility, world[15].visibility)\r\n        );\r\n        let elbowAngleErrorL = Infinity;\r\n        let upperArmLocalAngleErrorL = Infinity;\r\n        let lowerArmLocalAngleErrorL = Infinity;\r\n        if (confL >= LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD) {\r\n            const shoulder = world[11].point;\r\n            const elbow = world[13].point;\r\n            const wrist = world[15].point;\r\n            const elbowAngle = getAngle(shoulder, elbow, elbow, wrist);\r\n            elbowAngleErrorL = Math.abs(this.elbowAngle - elbowAngle);\r\n\r\n            const upperArmLocalDir = getNormalInLocalSpace(\r\n                world[12].point,\r\n                world[11].point,\r\n                world[23].point,\r\n                world[11].point,\r\n                world[11].point,\r\n                world[13].point,\r\n            );\r\n            upperArmLocalAngleErrorL = angleBetweenVec3(upperArmLocalDir, this.isLeft ? this.upperArmLocalDir : this.upperArmLocalDirMirror);\r\n\r\n            const lowerArmLocalDir = getNormalInLocalSpace(\r\n                world[12].point,\r\n                world[11].point,\r\n                world[13].point,\r\n                world[11].point,\r\n                world[13].point,\r\n                world[15].point,\r\n            );\r\n            lowerArmLocalAngleErrorL = angleBetweenVec3(lowerArmLocalDir, this.isLeft ? this.lowerArmLocalDir : this.lowerArmLocalDirMirror);\r\n        }\r\n        const scoreL = (Math.PI - elbowAngleErrorL) * (Math.PI - upperArmLocalAngleErrorL) * (Math.PI - lowerArmLocalAngleErrorL);\r\n\r\n        const confR = Math.min(\r\n            avg(world[12].visibility, world[14].visibility),\r\n            avg(world[14].visibility, world[16].visibility)\r\n        );\r\n        let elbowAngleErrorR = Infinity;\r\n        let upperArmLocalAngleErrorR = Infinity;\r\n        let lowerArmLocalAngleErrorR = Infinity;\r\n        if (confR >= LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD) {\r\n            const shoulder = world[12].point;\r\n            const elbow = world[14].point;\r\n            const wrist = world[16].point;\r\n            const elbowAngle = getAngle(shoulder, elbow, elbow, wrist);\r\n            elbowAngleErrorR = Math.abs(this.elbowAngle - elbowAngle);\r\n\r\n            const upperArmLocalDir = getNormalInLocalSpace(\r\n                world[11].point,\r\n                world[12].point,\r\n                world[24].point,\r\n                world[12].point,\r\n                world[12].point,\r\n                world[14].point,\r\n            );\r\n            upperArmLocalAngleErrorR = angleBetweenVec3(upperArmLocalDir, !this.isLeft ? this.upperArmLocalDir : this.upperArmLocalDirMirror);\r\n\r\n            const lowerArmLocalDir = getNormalInLocalSpace(\r\n                world[11].point,\r\n                world[12].point,\r\n                world[14].point,\r\n                world[12].point,\r\n                world[14].point,\r\n                world[16].point,\r\n            );\r\n            lowerArmLocalAngleErrorR = angleBetweenVec3(lowerArmLocalDir, !this.isLeft ? this.lowerArmLocalDir : this.lowerArmLocalDirMirror);\r\n        }\r\n        const scoreR = (Math.PI - elbowAngleErrorR) * (Math.PI - upperArmLocalAngleErrorR) * (Math.PI - lowerArmLocalAngleErrorR);\r\n\r\n        if (scoreL >= scoreR\r\n            && elbowAngleErrorL <= MAX_WORLD_SPACE_ANGLE_ERROR\r\n            && upperArmLocalAngleErrorL <= MAX_WORLD_SPACE_ANGLE_ERROR\r\n            && lowerArmLocalAngleErrorL <= MAX_WORLD_SPACE_ANGLE_ERROR\r\n        ) {\r\n            return {\r\n                score: scoreL,\r\n                center: normalized[13].point,\r\n                related: [normalized[11].point, normalized[15].point],\r\n                flip: !this.isLeft\r\n            };\r\n        } else if (\r\n            elbowAngleErrorR <= MAX_WORLD_SPACE_ANGLE_ERROR\r\n            && upperArmLocalAngleErrorR <= MAX_WORLD_SPACE_ANGLE_ERROR\r\n            && lowerArmLocalAngleErrorR <= MAX_WORLD_SPACE_ANGLE_ERROR\r\n        ) {\r\n            return {\r\n                score: scoreR,\r\n                center: normalized[14].point,\r\n                related: [normalized[12].point, normalized[16].point],\r\n                flip: this.isLeft\r\n            };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n}","import SkeletonModel from '../../components/SkeletonModelCanvas/model/SkeletonModel';\r\nimport {LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD} from '../../config';\r\nimport {angleBetweenVec3} from '../../utils/math/math';\r\nimport Photo from '../../utils/Photo';\r\nimport {avg, flipX, getNormal, getNormalInLocalSpace, mid, normalizedLandmarkToViewSpace} from './math';\r\nimport {MatchResult, PoseMatcher} from './search';\r\n\r\nconst MAX_WORLD_SPACE_ANGLE_ERROR = Math.PI / 180 * 30;\r\nconst MAX_VIEW_SPACE_ANGLE_ERROR = Math.PI / 180 * 45;\r\n\r\nexport default class MatchHip implements PoseMatcher {\r\n\r\n    private isLeft: boolean;\r\n\r\n    private thighLocalDir: [number, number, number] = [0, 0, 0];\r\n    private thighLocalDirMirror: [number, number, number] = [0, 0, 0];\r\n\r\n    private trunkViewUp: [number, number, number] = [0, 0, 0];\r\n    private trunkViewRight: [number, number, number] = [0, 0, 0];\r\n    private trunkViewUpMirror: [number, number, number] = [0, 0, 0];\r\n    private trunkViewRightMirror: [number, number, number] = [0, 0, 0];\r\n\r\n    constructor(isLeft: boolean) {\r\n        this.isLeft = isLeft;\r\n    }\r\n\r\n    prepare(model: SkeletonModel): void {\r\n        this.trunkViewUp = getNormal(\r\n            mid(model.leftThigh.originViewPosition, model.rightThigh.originViewPosition),\r\n            mid(model.leftUpperArm.originViewPosition, model.rightUpperArm.originViewPosition)\r\n        );\r\n        this.trunkViewUpMirror = getNormal(\r\n            flipX(mid(model.leftThigh.originViewPosition, model.rightThigh.originViewPosition)),\r\n            flipX(mid(model.leftUpperArm.originViewPosition, model.rightUpperArm.originViewPosition))\r\n        );\r\n        this.trunkViewRight = getNormal(model.rightThigh.originViewPosition, model.leftThigh.originViewPosition);\r\n        this.trunkViewRightMirror = getNormal(flipX(model.leftThigh.originViewPosition), flipX(model.rightThigh.originViewPosition));\r\n        if (this.isLeft) {\r\n            this.thighLocalDir = getNormalInLocalSpace(\r\n                model.rightThigh.originWorldPosition,\r\n                model.leftThigh.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.leftThigh.originWorldPosition,\r\n                model.leftThigh.controlPointWorldPosition,\r\n            );\r\n            this.thighLocalDirMirror = getNormalInLocalSpace(\r\n                model.rightThigh.originWorldPosition,\r\n                model.leftThigh.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.leftThigh.originWorldPosition,\r\n                model.leftThigh.controlPointWorldPosition,\r\n                true,\r\n            );\r\n        } else {\r\n            this.thighLocalDir = getNormalInLocalSpace(\r\n                model.leftThigh.originWorldPosition,\r\n                model.rightThigh.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.rightThigh.originWorldPosition,\r\n                model.rightThigh.controlPointWorldPosition,\r\n            );\r\n            this.thighLocalDirMirror = getNormalInLocalSpace(\r\n                model.leftThigh.originWorldPosition,\r\n                model.rightThigh.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.rightThigh.originWorldPosition,\r\n                model.rightThigh.controlPointWorldPosition,\r\n                true,\r\n            );\r\n        }\r\n    }\r\n\r\n    match(photo: Photo): MatchResult | null {\r\n        const world = photo.worldLandmarks;\r\n        const normalized = photo.normalizedLandmarks;\r\n        const aspect = photo.width / photo.height;\r\n\r\n        const leftShoulderView = normalizedLandmarkToViewSpace(normalized[11].point, aspect);\r\n        const rightShoulderView = normalizedLandmarkToViewSpace(normalized[12].point, aspect);\r\n        const leftHipView = normalizedLandmarkToViewSpace(normalized[23].point, aspect);\r\n        const rightHipView = normalizedLandmarkToViewSpace(normalized[24].point, aspect);\r\n        const trunkUpView = getNormal(mid(leftHipView, rightHipView), mid(leftShoulderView, rightShoulderView));\r\n        const trunkRightView = getNormal(rightShoulderView, leftShoulderView);\r\n\r\n        const confL = Math.min(\r\n            avg(world[11].visibility, world[23].visibility, world[24].visibility),\r\n            avg(world[23].visibility, world[25].visibility)\r\n        );\r\n        let errorL = Infinity;\r\n        let viewError1L = Infinity;\r\n        let viewError2L = Infinity;\r\n        if (confL >= LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD) {\r\n            const dirL = getNormalInLocalSpace(\r\n                world[24].point,\r\n                world[23].point,\r\n                world[23].point,\r\n                world[11].point,\r\n                world[23].point,\r\n                world[25].point,\r\n            );\r\n            errorL = angleBetweenVec3(dirL, this.isLeft ? this.thighLocalDir : this.thighLocalDirMirror);\r\n            viewError1L = angleBetweenVec3(trunkUpView, this.isLeft ? this.trunkViewUp : this.trunkViewUpMirror);\r\n            viewError2L = angleBetweenVec3(trunkRightView, this.isLeft ? this.trunkViewRight : this.trunkViewRightMirror);\r\n        }\r\n\r\n        const confR = Math.min(\r\n            avg(world[12].visibility, world[24].visibility, world[23].visibility),\r\n            avg(world[24].visibility, world[26].visibility)\r\n        );\r\n        let errorR = Infinity;\r\n        let viewError1R = Infinity;\r\n        let viewError2R = Infinity;\r\n        if (confR >= LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD) {\r\n            const dirR = getNormalInLocalSpace(\r\n                world[23].point,\r\n                world[24].point,\r\n                world[24].point,\r\n                world[12].point,\r\n                world[24].point,\r\n                world[26].point,\r\n            );\r\n            errorR = angleBetweenVec3(dirR, !this.isLeft ? this.thighLocalDir : this.thighLocalDirMirror);\r\n            viewError1R = angleBetweenVec3(trunkUpView, this.isLeft ? this.trunkViewUpMirror : this.trunkViewUp);\r\n            viewError2R = angleBetweenVec3(trunkRightView, this.isLeft ? this.trunkViewRightMirror : this.trunkViewRight);\r\n        }\r\n\r\n        if (\r\n            errorL < errorR\r\n            && errorL <= MAX_WORLD_SPACE_ANGLE_ERROR\r\n            && viewError1L <= MAX_VIEW_SPACE_ANGLE_ERROR\r\n            && viewError2L <= MAX_VIEW_SPACE_ANGLE_ERROR\r\n        ) {\r\n            return {\r\n                score: (Math.PI - errorL) * (Math.PI - viewError1L) * (Math.PI - viewError2L),\r\n                center: normalized[23].point,\r\n                related: [normalized[24].point, normalized[25].point, mid(normalized[23].point, normalized[11].point)],\r\n                flip: !this.isLeft\r\n            };\r\n        } else if (\r\n            errorR <= MAX_WORLD_SPACE_ANGLE_ERROR\r\n            && viewError1R <= MAX_VIEW_SPACE_ANGLE_ERROR\r\n            && viewError2R <= MAX_VIEW_SPACE_ANGLE_ERROR\r\n        ) {\r\n            return {\r\n                score: (Math.PI - errorR) * (Math.PI - viewError1R) * (Math.PI - viewError2R),\r\n                center: normalized[24].point,\r\n                related: [normalized[23].point, normalized[26].point, mid(normalized[24].point, normalized[12].point)],\r\n                flip: this.isLeft\r\n            };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n}","import SkeletonModel from '../../components/SkeletonModelCanvas/model/SkeletonModel';\r\nimport {LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD} from '../../config';\r\nimport {angleBetweenVec3} from '../../utils/math/math';\r\nimport Photo from '../../utils/Photo';\r\nimport {avg, getNormal, getNormalInLocalSpace, mid, normalizedLandmarkToViewSpace} from './math';\r\nimport {MatchResult, PoseMatcher} from './search';\r\n\r\nconst MAX_WORLD_SPACE_ANGLE_ERROR = Math.PI / 180 * 30;\r\n\r\nexport default class MatchHipCameraUnrelated implements PoseMatcher {\r\n\r\n    private isLeft: boolean;\r\n\r\n    private thighLocalDir: [number, number, number] = [0, 0, 0];\r\n    private thighLocalDirMirror: [number, number, number] = [0, 0, 0];\r\n\r\n    constructor(isLeft: boolean) {\r\n        this.isLeft = isLeft;\r\n    }\r\n\r\n    prepare(model: SkeletonModel): void {\r\n        if (this.isLeft) {\r\n            this.thighLocalDir = getNormalInLocalSpace(\r\n                model.rightThigh.originWorldPosition,\r\n                model.leftThigh.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.leftThigh.originWorldPosition,\r\n                model.leftThigh.controlPointWorldPosition,\r\n            );\r\n            this.thighLocalDirMirror = getNormalInLocalSpace(\r\n                model.rightThigh.originWorldPosition,\r\n                model.leftThigh.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.leftThigh.originWorldPosition,\r\n                model.leftThigh.controlPointWorldPosition,\r\n                true,\r\n            );\r\n        } else {\r\n            this.thighLocalDir = getNormalInLocalSpace(\r\n                model.leftThigh.originWorldPosition,\r\n                model.rightThigh.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.rightThigh.originWorldPosition,\r\n                model.rightThigh.controlPointWorldPosition,\r\n            );\r\n            this.thighLocalDirMirror = getNormalInLocalSpace(\r\n                model.leftThigh.originWorldPosition,\r\n                model.rightThigh.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.rightThigh.originWorldPosition,\r\n                model.rightThigh.controlPointWorldPosition,\r\n                true,\r\n            );\r\n        }\r\n    }\r\n\r\n    match(photo: Photo): MatchResult | null {\r\n        const world = photo.worldLandmarks;\r\n        const normalized = photo.normalizedLandmarks;\r\n        const aspect = photo.width / photo.height;\r\n\r\n        const leftShoulderView = normalizedLandmarkToViewSpace(normalized[11].point, aspect);\r\n        const rightShoulderView = normalizedLandmarkToViewSpace(normalized[12].point, aspect);\r\n        const leftHipView = normalizedLandmarkToViewSpace(normalized[23].point, aspect);\r\n        const rightHipView = normalizedLandmarkToViewSpace(normalized[24].point, aspect);\r\n        const trunkUpView = getNormal(mid(leftHipView, rightHipView), mid(leftShoulderView, rightShoulderView));\r\n        const trunkRightView = getNormal(rightShoulderView, leftShoulderView);\r\n\r\n        const confL = Math.min(\r\n            avg(world[11].visibility, world[23].visibility, world[24].visibility),\r\n            avg(world[23].visibility, world[25].visibility)\r\n        );\r\n        let errorL = Infinity;\r\n        if (confL >= LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD) {\r\n            const dirL = getNormalInLocalSpace(\r\n                world[24].point,\r\n                world[23].point,\r\n                world[23].point,\r\n                world[11].point,\r\n                world[23].point,\r\n                world[25].point,\r\n            );\r\n            errorL = angleBetweenVec3(dirL, this.isLeft ? this.thighLocalDir : this.thighLocalDirMirror);\r\n        }\r\n\r\n        const confR = Math.min(\r\n            avg(world[12].visibility, world[24].visibility, world[23].visibility),\r\n            avg(world[24].visibility, world[26].visibility)\r\n        );\r\n        let errorR = Infinity;\r\n        if (confR >= LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD) {\r\n            const dirR = getNormalInLocalSpace(\r\n                world[23].point,\r\n                world[24].point,\r\n                world[24].point,\r\n                world[12].point,\r\n                world[24].point,\r\n                world[26].point,\r\n            );\r\n            errorR = angleBetweenVec3(dirR, !this.isLeft ? this.thighLocalDir : this.thighLocalDirMirror);\r\n        }\r\n\r\n        if (\r\n            errorL < errorR\r\n            && errorL <= MAX_WORLD_SPACE_ANGLE_ERROR\r\n        ) {\r\n            return {\r\n                score: (Math.PI - errorL),\r\n                center: normalized[23].point,\r\n                related: [normalized[24].point, normalized[25].point, mid(normalized[23].point, normalized[11].point)],\r\n                flip: !this.isLeft\r\n            };\r\n        } else if (\r\n            errorR <= MAX_WORLD_SPACE_ANGLE_ERROR\r\n        ) {\r\n            return {\r\n                score: (Math.PI - errorR),\r\n                center: normalized[24].point,\r\n                related: [normalized[23].point, normalized[26].point, mid(normalized[24].point, normalized[12].point)],\r\n                flip: this.isLeft\r\n            };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n}","import SkeletonModel from '../../components/SkeletonModelCanvas/model/SkeletonModel';\r\nimport {LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD} from '../../config';\r\nimport {angleBetweenVec3} from '../../utils/math/math';\r\nimport Photo from '../../utils/Photo';\r\nimport {\r\n    avg,\r\n    cross,\r\n    flipX,\r\n    getAngle,\r\n    getAngle2D,\r\n    getNormal,\r\n    getNormalInLocalSpace,\r\n    mid,\r\n    normalizedLandmarkToViewSpace,\r\n    simplifyAngle\r\n} from './math';\r\nimport {MatchResult, PoseMatcher} from './search';\r\n\r\nconst MAX_VIEW_ANGLE_ERROR = Math.PI / 180 * 45;\r\nconst MAX_WORLD_SPACE_ANGLE_ERROR = Math.PI / 180 * 45;\r\n\r\nconst Z_AXIS: [number, number, number] = [0, 0, 1];\r\n\r\nexport default class MatchKnee implements PoseMatcher {\r\n\r\n    private isLeft: boolean;\r\n\r\n    private thighZAxisAngle: number = 0;\r\n    private calfZAxisAngle: number = 0;\r\n    private kneeAngle: number = 0;\r\n    private kneeViewAngle: number = 0;\r\n\r\n    private thighLocalDir: [number, number, number] = [0, 0, 0];\r\n    private thighLocalDirMirror: [number, number, number] = [0, 0, 0];\r\n    private trunkForward: [number, number, number] = [0, 0, 0];\r\n    private trunkForwardMirror: [number, number, number] = [0, 0, 0];\r\n\r\n    constructor(isLeft: boolean) {\r\n        this.isLeft = isLeft;\r\n    }\r\n\r\n    prepare(model: SkeletonModel): void {\r\n        let hip = model.rightThigh.originViewPosition;\r\n        let knee = model.rightThigh.controlPointViewPosition;\r\n        let ankle = model.rightCalf.controlPointViewPosition;\r\n        if (this.isLeft) {\r\n            hip = model.leftThigh.originViewPosition;\r\n            knee = model.leftThigh.controlPointViewPosition;\r\n            ankle = model.leftCalf.controlPointViewPosition;\r\n        }\r\n        const thighNormal = getNormal(hip, knee);\r\n        const calfNormal = getNormal(knee, ankle);\r\n        this.thighZAxisAngle = angleBetweenVec3(Z_AXIS, thighNormal);\r\n        this.calfZAxisAngle = angleBetweenVec3(Z_AXIS, calfNormal);\r\n        this.kneeAngle = angleBetweenVec3(thighNormal, calfNormal);\r\n        this.kneeViewAngle = simplifyAngle(getAngle2D(knee, hip, knee, ankle)) - Math.PI;\r\n\r\n        if (this.isLeft) {\r\n            this.thighLocalDir = getNormalInLocalSpace(\r\n                model.rightThigh.originWorldPosition,\r\n                model.leftThigh.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.leftThigh.originWorldPosition,\r\n                model.leftThigh.controlPointWorldPosition,\r\n            );\r\n            this.thighLocalDirMirror = getNormalInLocalSpace(\r\n                model.rightThigh.originWorldPosition,\r\n                model.leftThigh.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.leftThigh.originWorldPosition,\r\n                model.leftThigh.controlPointWorldPosition,\r\n                true,\r\n            );\r\n        } else {\r\n            this.thighLocalDir = getNormalInLocalSpace(\r\n                model.leftThigh.originWorldPosition,\r\n                model.rightThigh.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.rightThigh.originWorldPosition,\r\n                model.rightThigh.controlPointWorldPosition,\r\n            );\r\n            this.thighLocalDirMirror = getNormalInLocalSpace(\r\n                model.leftThigh.originWorldPosition,\r\n                model.rightThigh.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.rightThigh.originWorldPosition,\r\n                model.rightThigh.controlPointWorldPosition,\r\n                true,\r\n            );\r\n        }\r\n\r\n        const trunkViewUp = getNormal(\r\n            mid(model.leftThigh.originViewPosition, model.rightThigh.originViewPosition),\r\n            mid(model.leftUpperArm.originViewPosition, model.rightUpperArm.originViewPosition)\r\n        );\r\n        const trunkViewUpMirror = getNormal(\r\n            flipX(mid(model.leftThigh.originViewPosition, model.rightThigh.originViewPosition)),\r\n            flipX(mid(model.leftUpperArm.originViewPosition, model.rightUpperArm.originViewPosition))\r\n        );\r\n        const trunkViewRight = getNormal(model.rightThigh.originViewPosition, model.leftThigh.originViewPosition);\r\n        const trunkViewRightMirror = getNormal(flipX(model.leftThigh.originViewPosition), flipX(model.rightThigh.originViewPosition));\r\n        this.trunkForward = cross(trunkViewRight, trunkViewUp);\r\n        this.trunkForwardMirror = cross(trunkViewRightMirror, trunkViewUpMirror);\r\n    }\r\n\r\n    match(photo: Photo): MatchResult | null {\r\n        const aspect = photo.width / photo.height;\r\n        const normalized = photo.normalizedLandmarks;\r\n        const world = photo.worldLandmarks;\r\n\r\n        const leftShoulderView = normalizedLandmarkToViewSpace(normalized[11].point, aspect);\r\n        const rightShoulderView = normalizedLandmarkToViewSpace(normalized[12].point, aspect);\r\n        const leftHipView = normalizedLandmarkToViewSpace(normalized[23].point, aspect);\r\n        const rightHipView = normalizedLandmarkToViewSpace(normalized[24].point, aspect);\r\n        const trunkUpView = getNormal(mid(leftHipView, rightHipView), mid(leftShoulderView, rightShoulderView));\r\n        const trunkRightView = getNormal(rightShoulderView, leftShoulderView);\r\n        const trunkForwardView = cross(trunkRightView, trunkUpView);\r\n\r\n        const confL = Math.min(\r\n            avg(normalized[23].visibility, normalized[25].visibility),\r\n            avg(normalized[25].visibility, normalized[27].visibility)\r\n        );\r\n        let thighZAngleErrorL = Infinity;\r\n        let calfZAngleErrorL = Infinity;\r\n        let kneeAngleErrorL = Infinity;\r\n        let kneeViewAngleErrorL = Infinity;\r\n        let thighLocalAngleErrorL = Infinity;\r\n        let forwardErrorL = Infinity;\r\n        if (confL >= LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD) {\r\n            const hipView = leftHipView;\r\n            const kneeView = normalizedLandmarkToViewSpace(normalized[25].point, aspect);\r\n            const ankleView = normalizedLandmarkToViewSpace(normalized[27].point, aspect);\r\n            const thighViewNormal = getNormal(hipView, kneeView);\r\n            const calfViewNormal = getNormal(kneeView, ankleView);\r\n            const thighZAxisAngle = angleBetweenVec3(Z_AXIS, thighViewNormal);\r\n            const calfZAxisAngle = angleBetweenVec3(Z_AXIS, calfViewNormal);\r\n            thighZAngleErrorL = Math.abs(this.thighZAxisAngle - thighZAxisAngle);\r\n            calfZAngleErrorL = Math.abs(this.calfZAxisAngle - calfZAxisAngle);\r\n\r\n            const hip = world[23].point;\r\n            const knee = world[25].point;\r\n            const ankle = world[27].point;\r\n            const kneeAngle = getAngle(hip, knee, knee, ankle);\r\n            kneeAngleErrorL = Math.abs(this.kneeAngle - kneeAngle);\r\n\r\n            const kneeViewAngle = simplifyAngle(getAngle2D(kneeView, hipView, kneeView, ankleView)) - Math.PI;\r\n            kneeViewAngleErrorL = Math.abs(this.kneeViewAngle - kneeViewAngle * (this.isLeft ? 1 : -1));\r\n\r\n            const thighLocalDir = getNormalInLocalSpace(\r\n                world[24].point,\r\n                world[23].point,\r\n                world[23].point,\r\n                world[11].point,\r\n                world[23].point,\r\n                world[25].point,\r\n            );\r\n            thighLocalAngleErrorL = angleBetweenVec3(thighLocalDir, this.isLeft ? this.thighLocalDir : this.thighLocalDirMirror);\r\n\r\n            forwardErrorL = angleBetweenVec3(trunkForwardView, this.isLeft ? this.trunkForward : this.trunkForwardMirror);\r\n        }\r\n        const scoreL = (Math.PI - thighZAngleErrorL)\r\n            * (Math.PI - calfZAngleErrorL)\r\n            * (Math.PI - kneeAngleErrorL)\r\n            * (Math.PI * 2 - kneeViewAngleErrorL)\r\n            * (Math.PI - thighLocalAngleErrorL)\r\n            * (Math.PI - forwardErrorL)\r\n        ;\r\n\r\n\r\n        const confR = Math.min(\r\n            avg(normalized[24].visibility, normalized[26].visibility),\r\n            avg(normalized[26].visibility, normalized[28].visibility)\r\n        );\r\n        let thighZAngleErrorR = Infinity;\r\n        let calfZAngleErrorR = Infinity;\r\n        let kneeAngleErrorR = Infinity;\r\n        let kneeViewAngleErrorR = Infinity;\r\n        let thighLocalAngleErrorR = Infinity;\r\n        let forwardErrorR = Infinity;\r\n        if (confR >= LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD) {\r\n            const hipView = rightHipView;\r\n            const kneeView = normalizedLandmarkToViewSpace(normalized[26].point, aspect);\r\n            const ankleView = normalizedLandmarkToViewSpace(normalized[28].point, aspect);\r\n            const thighViewNormal = getNormal(hipView, kneeView);\r\n            const calfViewNormal = getNormal(kneeView, ankleView);\r\n            const thighZAxisAngle = angleBetweenVec3(Z_AXIS, thighViewNormal);\r\n            const calfZAxisAngle = angleBetweenVec3(Z_AXIS, calfViewNormal);\r\n            thighZAngleErrorR = Math.abs(this.thighZAxisAngle - thighZAxisAngle);\r\n            calfZAngleErrorR = Math.abs(this.calfZAxisAngle - calfZAxisAngle);\r\n\r\n            const hip = world[24].point;\r\n            const knee = world[26].point;\r\n            const ankle = world[28].point;\r\n            const kneeAngle = getAngle(hip, knee, knee, ankle);\r\n            kneeAngleErrorR = Math.abs(this.kneeAngle - kneeAngle);\r\n\r\n            const kneeViewAngle = simplifyAngle(getAngle2D(kneeView, hipView, kneeView, ankleView)) - Math.PI;\r\n            kneeViewAngleErrorR = Math.abs(this.kneeViewAngle - kneeViewAngle * (this.isLeft ? -1 : 1));\r\n\r\n            const thighLocalDir = getNormalInLocalSpace(\r\n                world[23].point,\r\n                world[24].point,\r\n                world[24].point,\r\n                world[12].point,\r\n                world[24].point,\r\n                world[26].point,\r\n            );\r\n            thighLocalAngleErrorR = angleBetweenVec3(thighLocalDir, !this.isLeft ? this.thighLocalDir : this.thighLocalDirMirror);\r\n\r\n            forwardErrorR = angleBetweenVec3(trunkForwardView, !this.isLeft ? this.trunkForward : this.trunkForwardMirror);\r\n        }\r\n        const scoreR = (Math.PI - thighZAngleErrorR)\r\n            * (Math.PI - calfZAngleErrorR)\r\n            * (Math.PI - kneeAngleErrorR)\r\n            * (Math.PI * 2 - kneeViewAngleErrorR)\r\n            * (Math.PI - thighLocalAngleErrorR)\r\n            * (Math.PI - forwardErrorR)\r\n        ;\r\n\r\n        if (scoreL >= scoreR\r\n            && thighZAngleErrorL <= MAX_VIEW_ANGLE_ERROR\r\n            && calfZAngleErrorL <= MAX_VIEW_ANGLE_ERROR\r\n            && kneeAngleErrorL <= MAX_WORLD_SPACE_ANGLE_ERROR\r\n            && kneeViewAngleErrorL <= MAX_VIEW_ANGLE_ERROR\r\n            && thighLocalAngleErrorL <= MAX_WORLD_SPACE_ANGLE_ERROR\r\n        ) {\r\n            return {\r\n                score: scoreL,\r\n                center: normalized[25].point,\r\n                related: [normalized[23].point, normalized[27].point],\r\n                flip: !this.isLeft\r\n            };\r\n        } else if (\r\n            thighZAngleErrorR <= MAX_VIEW_ANGLE_ERROR\r\n            && calfZAngleErrorR <= MAX_VIEW_ANGLE_ERROR\r\n            && kneeAngleErrorR <= MAX_WORLD_SPACE_ANGLE_ERROR\r\n            && kneeViewAngleErrorR <= MAX_VIEW_ANGLE_ERROR\r\n            && thighLocalAngleErrorR <= MAX_WORLD_SPACE_ANGLE_ERROR\r\n        ) {\r\n            return {\r\n                score: scoreR,\r\n                center: normalized[26].point,\r\n                related: [normalized[24].point, normalized[28].point],\r\n                flip: this.isLeft\r\n            };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n}","import SkeletonModel from '../../components/SkeletonModelCanvas/model/SkeletonModel';\r\nimport {LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD} from '../../config';\r\nimport {angleBetweenVec3} from '../../utils/math/math';\r\nimport Photo from '../../utils/Photo';\r\nimport {avg, getAngle, getNormal, getNormalInLocalSpace} from './math';\r\nimport {MatchResult, PoseMatcher} from './search';\r\n\r\nconst MAX_WORLD_SPACE_ANGLE_ERROR = Math.PI / 180 * 45;\r\n\r\nexport default class MatchKneeCameraUnrelated implements PoseMatcher {\r\n\r\n    private isLeft: boolean;\r\n\r\n    private kneeAngle: number = 0;\r\n    private thighLocalDir: [number, number, number] = [0, 0, 0];\r\n    private thighLocalDirMirror: [number, number, number] = [0, 0, 0];\r\n    private calfLocalDir: [number, number, number] = [0, 0, 0];\r\n    private calfLocalDirMirror: [number, number, number] = [0, 0, 0];\r\n\r\n    constructor(isLeft: boolean) {\r\n        this.isLeft = isLeft;\r\n    }\r\n\r\n    prepare(model: SkeletonModel): void {\r\n        let hip = model.rightThigh.originWorldPosition;\r\n        let knee = model.rightThigh.controlPointWorldPosition;\r\n        let ankle = model.rightCalf.controlPointWorldPosition;\r\n        if (this.isLeft) {\r\n            hip = model.leftThigh.originWorldPosition;\r\n            knee = model.leftThigh.controlPointWorldPosition;\r\n            ankle = model.leftCalf.controlPointWorldPosition;\r\n        }\r\n        const thighNormal = getNormal(hip, knee);\r\n        const calfNormal = getNormal(knee, ankle);\r\n        this.kneeAngle = angleBetweenVec3(thighNormal, calfNormal);\r\n\r\n        if (this.isLeft) {\r\n            this.thighLocalDir = getNormalInLocalSpace(\r\n                model.rightThigh.originWorldPosition,\r\n                model.leftThigh.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.leftThigh.originWorldPosition,\r\n                model.leftThigh.controlPointWorldPosition,\r\n            );\r\n            this.thighLocalDirMirror = getNormalInLocalSpace(\r\n                model.rightThigh.originWorldPosition,\r\n                model.leftThigh.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.leftThigh.originWorldPosition,\r\n                model.leftThigh.controlPointWorldPosition,\r\n                true,\r\n            );\r\n\r\n            this.calfLocalDir = getNormalInLocalSpace(\r\n                model.rightThigh.originWorldPosition,\r\n                model.leftThigh.originWorldPosition,\r\n                model.leftThigh.controlPointWorldPosition,\r\n                model.leftThigh.originWorldPosition,\r\n                model.leftCalf.originWorldPosition,\r\n                model.leftCalf.controlPointWorldPosition,\r\n            );\r\n            this.calfLocalDirMirror = getNormalInLocalSpace(\r\n                model.rightThigh.originWorldPosition,\r\n                model.leftThigh.originWorldPosition,\r\n                model.leftThigh.controlPointWorldPosition,\r\n                model.leftThigh.originWorldPosition,\r\n                model.leftCalf.originWorldPosition,\r\n                model.leftCalf.controlPointWorldPosition,\r\n                true\r\n            );\r\n        } else {\r\n            this.thighLocalDir = getNormalInLocalSpace(\r\n                model.leftThigh.originWorldPosition,\r\n                model.rightThigh.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.rightThigh.originWorldPosition,\r\n                model.rightThigh.controlPointWorldPosition,\r\n            );\r\n            this.thighLocalDirMirror = getNormalInLocalSpace(\r\n                model.leftThigh.originWorldPosition,\r\n                model.rightThigh.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.rightThigh.originWorldPosition,\r\n                model.rightThigh.controlPointWorldPosition,\r\n                true,\r\n            );\r\n\r\n            this.calfLocalDir = getNormalInLocalSpace(\r\n                model.leftThigh.originWorldPosition,\r\n                model.rightThigh.originWorldPosition,\r\n                model.rightThigh.controlPointWorldPosition,\r\n                model.rightThigh.originWorldPosition,\r\n                model.rightCalf.originWorldPosition,\r\n                model.rightCalf.controlPointWorldPosition,\r\n            );\r\n            this.calfLocalDirMirror = getNormalInLocalSpace(\r\n                model.leftThigh.originWorldPosition,\r\n                model.rightThigh.originWorldPosition,\r\n                model.rightThigh.controlPointWorldPosition,\r\n                model.rightThigh.originWorldPosition,\r\n                model.rightCalf.originWorldPosition,\r\n                model.rightCalf.controlPointWorldPosition,\r\n                true\r\n            );\r\n        }\r\n    }\r\n\r\n    match(photo: Photo): MatchResult | null {\r\n        const world = photo.worldLandmarks;\r\n        const normalized = photo.normalizedLandmarks;\r\n\r\n        const confL = Math.min(\r\n            avg(world[23].visibility, world[25].visibility),\r\n            avg(world[25].visibility, world[27].visibility)\r\n        );\r\n        let kneeAngleErrorL = Infinity;\r\n        let thighLocalAngleErrorL = Infinity;\r\n        let calfLocalAngleErrorL = Infinity;\r\n        if (confL >= LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD) {\r\n            const hip = world[23].point;\r\n            const knee = world[25].point;\r\n            const ankle = world[27].point;\r\n            const kneeAngle = getAngle(hip, knee, knee, ankle);\r\n            kneeAngleErrorL = Math.abs(this.kneeAngle - kneeAngle);\r\n\r\n            const thighLocalDir = getNormalInLocalSpace(\r\n                world[24].point,\r\n                world[23].point,\r\n                world[23].point,\r\n                world[11].point,\r\n                world[23].point,\r\n                world[25].point,\r\n            );\r\n            thighLocalAngleErrorL = angleBetweenVec3(thighLocalDir, this.isLeft ? this.thighLocalDir : this.thighLocalDirMirror);\r\n\r\n            const calfLocalDir = getNormalInLocalSpace(\r\n                world[24].point,\r\n                world[23].point,\r\n                world[25].point,\r\n                world[23].point,\r\n                world[25].point,\r\n                world[27].point,\r\n            );\r\n            calfLocalAngleErrorL = angleBetweenVec3(calfLocalDir, this.isLeft ? this.calfLocalDir : this.calfLocalDirMirror);\r\n        }\r\n        const scoreL = (Math.PI - kneeAngleErrorL) * (Math.PI - thighLocalAngleErrorL) * (Math.PI - calfLocalAngleErrorL);\r\n\r\n        const confR = Math.min(\r\n            avg(world[24].visibility, world[26].visibility),\r\n            avg(world[26].visibility, world[28].visibility)\r\n        );\r\n        let kneeAngleErrorR = Infinity;\r\n        let thighLocalAngleErrorR = Infinity;\r\n        let calfLocalAngleErrorR = Infinity;\r\n        if (confR >= LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD) {\r\n            const hip = world[24].point;\r\n            const knee = world[26].point;\r\n            const ankle = world[28].point;\r\n            const kneeAngle = getAngle(hip, knee, knee, ankle);\r\n            kneeAngleErrorR = Math.abs(this.kneeAngle - kneeAngle);\r\n\r\n            const thighLocalDir = getNormalInLocalSpace(\r\n                world[23].point,\r\n                world[24].point,\r\n                world[24].point,\r\n                world[12].point,\r\n                world[24].point,\r\n                world[26].point,\r\n            );\r\n            thighLocalAngleErrorR = angleBetweenVec3(thighLocalDir, !this.isLeft ? this.thighLocalDir : this.thighLocalDirMirror);\r\n\r\n            const calfLocalDir = getNormalInLocalSpace(\r\n                world[23].point,\r\n                world[24].point,\r\n                world[26].point,\r\n                world[24].point,\r\n                world[26].point,\r\n                world[28].point,\r\n            );\r\n            calfLocalAngleErrorR = angleBetweenVec3(calfLocalDir, !this.isLeft ? this.calfLocalDir : this.calfLocalDirMirror);\r\n        }\r\n        const scoreR = (Math.PI - kneeAngleErrorR) * (Math.PI - thighLocalAngleErrorR) * (Math.PI - calfLocalAngleErrorR);\r\n\r\n        if (scoreL >= scoreR\r\n            && kneeAngleErrorL <= MAX_WORLD_SPACE_ANGLE_ERROR\r\n            && thighLocalAngleErrorL <= MAX_WORLD_SPACE_ANGLE_ERROR\r\n            && calfLocalAngleErrorL <= MAX_WORLD_SPACE_ANGLE_ERROR\r\n        ) {\r\n            return {\r\n                score: scoreL,\r\n                center: normalized[25].point,\r\n                related: [normalized[23].point, normalized[27].point],\r\n                flip: !this.isLeft\r\n            };\r\n        } else if (\r\n            kneeAngleErrorR <= MAX_WORLD_SPACE_ANGLE_ERROR\r\n            && thighLocalAngleErrorR <= MAX_WORLD_SPACE_ANGLE_ERROR\r\n            && calfLocalAngleErrorR <= MAX_WORLD_SPACE_ANGLE_ERROR\r\n        ) {\r\n            return {\r\n                score: scoreR,\r\n                center: normalized[26].point,\r\n                related: [normalized[24].point, normalized[28].point],\r\n                flip: this.isLeft\r\n            };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n}","import SkeletonModel from '../../components/SkeletonModelCanvas/model/SkeletonModel';\r\nimport {LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD} from '../../config';\r\nimport {angleBetweenVec3} from '../../utils/math/math';\r\nimport Photo from '../../utils/Photo';\r\nimport {avg, flipX, getNormal, getNormalInLocalSpace, mid, normalizedLandmarkToViewSpace} from './math';\r\nimport {MatchResult, PoseMatcher} from './search';\r\n\r\nconst MAX_WORLD_SPACE_ANGLE_ERROR = Math.PI / 180 * 30;\r\nconst MAX_VIEW_SPACE_ANGLE_ERROR = Math.PI / 180 * 45;\r\n\r\nexport default class MatchShoulder implements PoseMatcher {\r\n\r\n    private isLeft: boolean;\r\n\r\n    private shoulderLocalDir: [number, number, number] = [0, 0, 0];\r\n    private shoulderLocalDirMirror: [number, number, number] = [0, 0, 0];\r\n\r\n    private trunkViewUp: [number, number, number] = [0, 0, 0];\r\n    private trunkViewRight: [number, number, number] = [0, 0, 0];\r\n    private trunkViewUpMirror: [number, number, number] = [0, 0, 0];\r\n    private trunkViewRightMirror: [number, number, number] = [0, 0, 0];\r\n\r\n    constructor(isLeft: boolean) {\r\n        this.isLeft = isLeft;\r\n    }\r\n\r\n    prepare(model: SkeletonModel) {\r\n        this.trunkViewUp = getNormal(\r\n            mid(model.leftThigh.originViewPosition, model.rightThigh.originViewPosition),\r\n            mid(model.leftUpperArm.originViewPosition, model.rightUpperArm.originViewPosition)\r\n        );\r\n        this.trunkViewUpMirror = getNormal(\r\n            flipX(mid(model.leftThigh.originViewPosition, model.rightThigh.originViewPosition)),\r\n            flipX(mid(model.leftUpperArm.originViewPosition, model.rightUpperArm.originViewPosition))\r\n        );\r\n        this.trunkViewRight = getNormal(model.rightUpperArm.originViewPosition, model.leftUpperArm.originViewPosition);\r\n        this.trunkViewRightMirror = getNormal(flipX(model.leftUpperArm.originViewPosition), flipX(model.rightUpperArm.originViewPosition));\r\n        if (this.isLeft) {\r\n            this.shoulderLocalDir = getNormalInLocalSpace(\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.leftUpperArm.controlPointWorldPosition,\r\n            );\r\n            this.shoulderLocalDirMirror = getNormalInLocalSpace(\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.leftUpperArm.controlPointWorldPosition,\r\n                true,\r\n            );\r\n        } else {\r\n            this.shoulderLocalDir = getNormalInLocalSpace(\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.rightUpperArm.controlPointWorldPosition,\r\n            );\r\n            this.shoulderLocalDirMirror = getNormalInLocalSpace(\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.rightUpperArm.controlPointWorldPosition,\r\n                true,\r\n            );\r\n        }\r\n    }\r\n\r\n    match(photo: Photo): MatchResult | null {\r\n        const world = photo.worldLandmarks;\r\n        const normalized = photo.normalizedLandmarks;\r\n        const aspect = photo.width / photo.height;\r\n\r\n        const leftShoulderView = normalizedLandmarkToViewSpace(normalized[11].point, aspect);\r\n        const rightShoulderView = normalizedLandmarkToViewSpace(normalized[12].point, aspect);\r\n        const leftHipView = normalizedLandmarkToViewSpace(normalized[23].point, aspect);\r\n        const rightHipView = normalizedLandmarkToViewSpace(normalized[24].point, aspect);\r\n        const trunkUpView = getNormal(mid(leftHipView, rightHipView), mid(leftShoulderView, rightShoulderView));\r\n        const trunkRightView = getNormal(rightShoulderView, leftShoulderView);\r\n\r\n        const confL = Math.min(\r\n            avg(world[12].visibility, world[11].visibility, world[23].visibility),\r\n            avg(world[11].visibility, world[13].visibility)\r\n        );\r\n        let errorL = Infinity;\r\n        let viewError1L = Infinity;\r\n        let viewError2L = Infinity;\r\n        if (confL >= LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD) {\r\n            const dirL = getNormalInLocalSpace(\r\n                world[12].point,\r\n                world[11].point,\r\n                world[23].point,\r\n                world[11].point,\r\n                world[11].point,\r\n                world[13].point,\r\n            );\r\n            errorL = angleBetweenVec3(dirL, this.isLeft ? this.shoulderLocalDir : this.shoulderLocalDirMirror);\r\n            viewError1L = angleBetweenVec3(trunkUpView, this.isLeft ? this.trunkViewUp : this.trunkViewUpMirror);\r\n            viewError2L = angleBetweenVec3(trunkRightView, this.isLeft ? this.trunkViewRight : this.trunkViewRightMirror);\r\n        }\r\n\r\n        const confR = Math.min(\r\n            avg(world[11].visibility, world[12].visibility, world[24].visibility),\r\n            avg(world[12].visibility, world[14].visibility)\r\n        );\r\n        let errorR = Infinity;\r\n        let viewError1R = Infinity;\r\n        let viewError2R = Infinity;\r\n        if (confR >= LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD) {\r\n            const dirR = getNormalInLocalSpace(\r\n                world[11].point,\r\n                world[12].point,\r\n                world[24].point,\r\n                world[12].point,\r\n                world[12].point,\r\n                world[14].point,\r\n            );\r\n            errorR = angleBetweenVec3(dirR, !this.isLeft ? this.shoulderLocalDir : this.shoulderLocalDirMirror);\r\n            viewError1R = angleBetweenVec3(trunkUpView, this.isLeft ? this.trunkViewUpMirror : this.trunkViewUp);\r\n            viewError2R = angleBetweenVec3(trunkRightView, this.isLeft ? this.trunkViewRightMirror : this.trunkViewRight);\r\n        }\r\n\r\n        if (\r\n            errorL < errorR\r\n            && errorL <= MAX_WORLD_SPACE_ANGLE_ERROR\r\n            && viewError1L <= MAX_VIEW_SPACE_ANGLE_ERROR\r\n            && viewError2L <= MAX_VIEW_SPACE_ANGLE_ERROR\r\n        ) {\r\n            return {\r\n                score: (Math.PI - errorL) * (Math.PI - viewError1L) * (Math.PI - viewError2L),\r\n                center: normalized[11].point,\r\n                related: [normalized[12].point, normalized[13].point, mid(normalized[23].point, normalized[11].point)],\r\n                flip: !this.isLeft\r\n            };\r\n        } else if (\r\n            errorR <= MAX_WORLD_SPACE_ANGLE_ERROR\r\n            && viewError1R <= MAX_VIEW_SPACE_ANGLE_ERROR\r\n            && viewError2R <= MAX_VIEW_SPACE_ANGLE_ERROR\r\n        ) {\r\n            return {\r\n                score: (Math.PI - errorR) * (Math.PI - viewError1R) * (Math.PI - viewError2R),\r\n                center: normalized[12].point,\r\n                related: [normalized[11].point, normalized[14].point, mid(normalized[24].point, normalized[12].point)],\r\n                flip: this.isLeft\r\n            };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n}","import SkeletonModel from '../../components/SkeletonModelCanvas/model/SkeletonModel';\r\nimport {LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD} from '../../config';\r\nimport {angleBetweenVec3} from '../../utils/math/math';\r\nimport Photo from '../../utils/Photo';\r\nimport {avg, getNormal, getNormalInLocalSpace, mid, normalizedLandmarkToViewSpace} from './math';\r\nimport {MatchResult, PoseMatcher} from './search';\r\n\r\nconst MAX_WORLD_SPACE_ANGLE_ERROR = Math.PI / 180 * 30;\r\n\r\nexport default class MatchShoulderCameraUnrelated implements PoseMatcher {\r\n\r\n    private isLeft: boolean;\r\n\r\n    private shoulderLocalDir: [number, number, number] = [0, 0, 0];\r\n    private shoulderLocalDirMirror: [number, number, number] = [0, 0, 0];\r\n\r\n    constructor(isLeft: boolean) {\r\n        this.isLeft = isLeft;\r\n    }\r\n\r\n    prepare(model: SkeletonModel) {\r\n        if (this.isLeft) {\r\n            this.shoulderLocalDir = getNormalInLocalSpace(\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.leftUpperArm.controlPointWorldPosition,\r\n            );\r\n            this.shoulderLocalDirMirror = getNormalInLocalSpace(\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.leftUpperArm.controlPointWorldPosition,\r\n                true,\r\n            );\r\n        } else {\r\n            this.shoulderLocalDir = getNormalInLocalSpace(\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.rightUpperArm.controlPointWorldPosition,\r\n            );\r\n            this.shoulderLocalDirMirror = getNormalInLocalSpace(\r\n                model.leftUpperArm.originWorldPosition,\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.trunk.originWorldPosition,\r\n                model.trunk.controlPointWorldPosition,\r\n                model.rightUpperArm.originWorldPosition,\r\n                model.rightUpperArm.controlPointWorldPosition,\r\n                true,\r\n            );\r\n        }\r\n    }\r\n\r\n    match(photo: Photo): MatchResult | null {\r\n        const world = photo.worldLandmarks;\r\n        const normalized = photo.normalizedLandmarks;\r\n        const aspect = photo.width / photo.height;\r\n\r\n        const leftShoulderView = normalizedLandmarkToViewSpace(normalized[11].point, aspect);\r\n        const rightShoulderView = normalizedLandmarkToViewSpace(normalized[12].point, aspect);\r\n        const leftHipView = normalizedLandmarkToViewSpace(normalized[23].point, aspect);\r\n        const rightHipView = normalizedLandmarkToViewSpace(normalized[24].point, aspect);\r\n        const trunkUpView = getNormal(mid(leftHipView, rightHipView), mid(leftShoulderView, rightShoulderView));\r\n        const trunkRightView = getNormal(rightShoulderView, leftShoulderView);\r\n\r\n        const confL = Math.min(\r\n            avg(world[12].visibility, world[11].visibility, world[23].visibility),\r\n            avg(world[11].visibility, world[13].visibility)\r\n        );\r\n        let errorL = Infinity;\r\n        if (confL >= LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD) {\r\n            const dirL = getNormalInLocalSpace(\r\n                world[12].point,\r\n                world[11].point,\r\n                world[23].point,\r\n                world[11].point,\r\n                world[11].point,\r\n                world[13].point,\r\n            );\r\n            errorL = angleBetweenVec3(dirL, this.isLeft ? this.shoulderLocalDir : this.shoulderLocalDirMirror);\r\n        }\r\n\r\n        const confR = Math.min(\r\n            avg(world[11].visibility, world[12].visibility, world[24].visibility),\r\n            avg(world[12].visibility, world[14].visibility)\r\n        );\r\n        let errorR = Infinity;\r\n        if (confR >= LANDMARK_VISIBILITY_ACCEPTABLE_THRESHOLD) {\r\n            const dirR = getNormalInLocalSpace(\r\n                world[11].point,\r\n                world[12].point,\r\n                world[24].point,\r\n                world[12].point,\r\n                world[12].point,\r\n                world[14].point,\r\n            );\r\n            errorR = angleBetweenVec3(dirR, !this.isLeft ? this.shoulderLocalDir : this.shoulderLocalDirMirror);\r\n        }\r\n\r\n        if (\r\n            errorL < errorR\r\n            && errorL <= MAX_WORLD_SPACE_ANGLE_ERROR\r\n        ) {\r\n            return {\r\n                score: Math.PI - errorL,\r\n                center: normalized[11].point,\r\n                related: [normalized[12].point, normalized[13].point, mid(normalized[23].point, normalized[11].point)],\r\n                flip: !this.isLeft\r\n            };\r\n        } else if (\r\n            errorR <= MAX_WORLD_SPACE_ANGLE_ERROR\r\n        ) {\r\n            return {\r\n                score: Math.PI - errorR,\r\n                center: normalized[12].point,\r\n                related: [normalized[11].point, normalized[14].point, mid(normalized[24].point, normalized[12].point)],\r\n                flip: this.isLeft\r\n            };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n}","import SkeletonModel from '../../components/SkeletonModelCanvas/model/SkeletonModel';\r\nimport Photo from '../../utils/Photo';\r\n\r\nexport type MatchResult = {\r\n    score: number;\r\n    /** Search result thumbs center */\r\n    center: [number, number, number],\r\n    /** Affect search result thumbs */\r\n    related: [number, number, number][],\r\n    flip: boolean;\r\n};\r\n\r\nexport interface PoseMatcher {\r\n    prepare(model: SkeletonModel): void;\r\n\r\n    match(photo: Photo): MatchResult | null;\r\n}\r\n\r\nexport type SearchResult = {\r\n    score: number;\r\n    center: [number, number, number],\r\n    related: [number, number, number][],\r\n    flip: boolean;\r\n    photo: Photo;\r\n};\r\n\r\nexport function filterAndSort(photos: Photo[], model: SkeletonModel, matcher: PoseMatcher): SearchResult[] {\r\n    const ret: SearchResult[] = [];\r\n    matcher.prepare(model);\r\n    photos.forEach(photo => {\r\n        const matchResult = matcher.match(photo);\r\n        if (matchResult != null) {\r\n            ret.push({\r\n                ...matchResult,\r\n                photo\r\n            });\r\n        }\r\n    });\r\n    ret.sort((a, b) => -a.score + b.score);\r\n    return ret;\r\n}","import {WarningOutlined} from '@vicons/antd';\r\nimport {NButton, NIcon, NRadio, NRadioGroup, NSelect} from 'naive-ui';\r\nimport {defineComponent, onMounted, ref, nextTick} from 'vue';\r\nimport ImageClip from '../components/ImageClip/ImageClip.vue';\r\nimport ImageViewer from '../components/ImageViewer/ImageViewer.vue';\r\nimport {BodyPart} from '../components/SkeletonModelCanvas/model/BodyPart';\r\nimport SkeletonModel from '../components/SkeletonModelCanvas/model/SkeletonModel';\r\nimport SkeletonModelCanvas from '../components/SkeletonModelCanvas/SkeletonModelCanvas.vue';\r\nimport {MAX_NUM_OF_SEARCH_RESULTS} from '../config';\r\nimport {isMouseSupported, isWebGL2Supported} from '../utils/browser-support';\r\nimport PhotoDatabase from '../utils/db/PhotoDatabase';\r\nimport DraggableCamera from '../utils/DraggableCamera';\r\nimport Photo from '../utils/Photo';\r\nimport MatchChest from './impl/MatchChest';\r\nimport MatchCrotch from './impl/MatchCrotch';\r\nimport MatchElbow from './impl/MatchElbow';\r\nimport MatchElbowCameraUnrelated from './impl/MatchElbowCameraUnrelated';\r\nimport MatchHip from './impl/MatchHip';\r\nimport MatchHipCameraUnrelated from './impl/MatchHipCameraUnrelated';\r\nimport MatchKnee from './impl/MatchKnee';\r\nimport MatchKneeCameraUnrelated from './impl/MatchKneeCameraUnrelated';\r\nimport MatchShoulder from './impl/MatchShoulder';\r\nimport MatchShoulderCameraUnrelated from './impl/MatchShoulderCameraUnrelated';\r\nimport {filterAndSort, PoseMatcher, SearchResult} from './impl/search';\r\n\r\nconst matchers: {\r\n    [name: string]: {\r\n        matcher: PoseMatcher,\r\n        cameraUnrelatedMatcher?: PoseMatcher,\r\n        highlights: BodyPart[],\r\n    }\r\n} = {\r\n    'Chest': {\r\n        matcher: new MatchChest(),\r\n        highlights: [BodyPart.trunk]\r\n    },\r\n    'Left Shoulder': {\r\n        matcher: new MatchShoulder(true),\r\n        cameraUnrelatedMatcher: new MatchShoulderCameraUnrelated(true),\r\n        highlights: [BodyPart.trunk, BodyPart.leftUpperArm]\r\n    },\r\n    'Right Shoulder': {\r\n        matcher: new MatchShoulder(false),\r\n        cameraUnrelatedMatcher: new MatchShoulderCameraUnrelated(false),\r\n        highlights: [BodyPart.trunk, BodyPart.rightUpperArm]\r\n    },\r\n    'Left Elbow': {\r\n        matcher: new MatchElbow(true),\r\n        cameraUnrelatedMatcher: new MatchElbowCameraUnrelated(true),\r\n        highlights: [BodyPart.leftUpperArm, BodyPart.leftLowerArm]\r\n    },\r\n    'Right Elbow': {\r\n        matcher: new MatchElbow(false),\r\n        cameraUnrelatedMatcher: new MatchElbowCameraUnrelated(false),\r\n        highlights: [BodyPart.rightUpperArm, BodyPart.rightLowerArm]\r\n    },\r\n    'Crotch': {\r\n        matcher: new MatchCrotch(),\r\n        highlights: [BodyPart.trunk]\r\n    },\r\n    'Left Hip': {\r\n        matcher: new MatchHip(true),\r\n        cameraUnrelatedMatcher: new MatchHipCameraUnrelated(true),\r\n        highlights: [BodyPart.trunk, BodyPart.leftThigh]\r\n    },\r\n    'Right Hip': {\r\n        matcher: new MatchHip(false),\r\n        cameraUnrelatedMatcher: new MatchHipCameraUnrelated(false),\r\n        highlights: [BodyPart.trunk, BodyPart.rightThigh]\r\n    },\r\n    'Left Knee': {\r\n        matcher: new MatchKnee(true),\r\n        cameraUnrelatedMatcher: new MatchKneeCameraUnrelated(true),\r\n        highlights: [BodyPart.leftThigh, BodyPart.leftCalf]\r\n    },\r\n    'Right Knee': {\r\n        matcher: new MatchKnee(false),\r\n        cameraUnrelatedMatcher: new MatchKneeCameraUnrelated(false),\r\n        highlights: [BodyPart.rightThigh, BodyPart.rightCalf]\r\n    },\r\n};\r\n\r\nexport default defineComponent({\r\n    components: {\r\n        NButton,\r\n        NSelect,\r\n        NRadio,\r\n        NRadioGroup,\r\n        NIcon,\r\n\r\n        WarningOutlined,\r\n\r\n        SkeletonModelCanvas,\r\n        ImageClip,\r\n        ImageViewer,\r\n    },\r\n    setup() {\r\n        const supportWebGL2 = isWebGL2Supported();\r\n        const supportMouse = isMouseSupported();\r\n\r\n        const database = new PhotoDatabase();\r\n        const model = new SkeletonModel();\r\n        const camera = new DraggableCamera();\r\n\r\n        const searchResultDom = ref<HTMLElement>();\r\n\r\n        const dbLoading = ref(false);\r\n        const bodyPartOptions = Object.keys(matchers).map(option => ({value: option, label: option}));\r\n        const bodyPart = ref<string>();\r\n        const gender = ref(0);\r\n        const cameraRelated = ref(1);\r\n\r\n        const searching = ref(false);\r\n        let photos: Photo[] = [];\r\n        const searchResult = ref<SearchResult[]>();\r\n\r\n        const showImageViewer = ref(false);\r\n        const imageViewerFlip = ref(false);\r\n        const currentPhoto = ref<Photo>(new Photo());\r\n\r\n        onMounted(async function () {\r\n            try {\r\n                dbLoading.value = true;\r\n                await nextTick();\r\n                await database.init();\r\n                photos = database.queryAllPhotos();\r\n            } finally {\r\n                dbLoading.value = false;\r\n            }\r\n        });\r\n\r\n        function search() {\r\n            try {\r\n                searching.value = true;\r\n                searchResult.value = [];\r\n                const bodyPartMatchers = matchers[bodyPart.value!];\r\n                if (bodyPartMatchers) {\r\n                    let list = photos;\r\n                    if (gender.value) {\r\n                        list = list.filter(photo => photo.gender === gender.value);\r\n                    }\r\n                    const matcher = !cameraRelated.value && bodyPartMatchers.cameraUnrelatedMatcher ?\r\n                        bodyPartMatchers.cameraUnrelatedMatcher\r\n                        : bodyPartMatchers.matcher;\r\n                    searchResult.value = filterAndSort(list, model, matcher).slice(0, MAX_NUM_OF_SEARCH_RESULTS);\r\n                    searchResultDom.value!.scrollTop = 0;\r\n                }\r\n            } finally {\r\n                searching.value = false;\r\n            }\r\n        }\r\n\r\n        function showLargePhoto(item: SearchResult) {\r\n            showImageViewer.value = true;\r\n            imageViewerFlip.value = item.flip;\r\n            currentPhoto.value = item.photo;\r\n        }\r\n\r\n        return {\r\n            supportWebGL2,\r\n            supportMouse,\r\n\r\n            matchers,\r\n            model,\r\n            camera,\r\n\r\n            searchResultDom,\r\n\r\n            dbLoading,\r\n            bodyPartOptions,\r\n            bodyPart,\r\n            gender,\r\n            cameraRelated,\r\n\r\n            searchResult,\r\n            searching,\r\n\r\n            showImageViewer,\r\n            imageViewerFlip,\r\n            currentPhoto,\r\n\r\n            search,\r\n            showLargePhoto,\r\n        };\r\n    }\r\n});"],"names":["_hoisted_1","_hoisted_2","_createVNode","_hoisted_3","_openBlock","_createBlock","vec3.create","quat.create","vec3.transformQuat","vec3.sub","MAX_VIEW_SPACE_ANGLE_ERROR","MAX_VIEW_ANGLE_ERROR","MAX_WORLD_SPACE_ANGLE_ERROR","Z_AXIS"],"mappings":"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"}